{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持智能上传机制：后端连接时上传到服务器，未连接时本地缓存\n */\n\nimport fileCacheService from './FileCacheService.js';\nimport backendConnectionService from './BackendConnectionService.js';\nconst API_BASE_URL = '/api';\n\n/**\n * 智能上传文件（优先后端，否则本地缓存）\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n  const isBackendConnected = backendConnectionService.getConnectionStatus().connected;\n  if (isBackendConnected) {\n    // 后端连接时上传到服务器\n    return await uploadToServer(file);\n  } else {\n    // 后端未连接时保存到本地缓存\n    return await uploadToCache(file);\n  }\n}\n\n/**\n * 上传文件到服务器\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadToServer(file) {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n    const result = await response.json();\n    return {\n      ...result,\n      status: 'uploaded',\n      source: 'server'\n    };\n  } catch (error) {\n    console.error('文件上传到服务器失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {File} file - 要保存的文件对象\n * @returns {Promise} 保存结果\n */\nexport async function uploadToCache(file) {\n  try {\n    const cachedFile = await fileCacheService.saveFile(file);\n    return {\n      fileId: cachedFile.id,\n      fileName: cachedFile.name,\n      fileSize: cachedFile.size,\n      status: 'local',\n      source: 'cache',\n      createdAt: cachedFile.createdAt\n    };\n  } catch (error) {\n    console.error('文件保存到缓存失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 同步单个文件到服务器\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToServer(fileId) {\n  try {\n    const isConnected = backendConnectionService.getConnectionStatus().connected;\n    if (!isConnected) {\n      throw new Error('Backend not connected');\n    }\n    const cachedFile = await fileCacheService.getFile(fileId);\n    if (!cachedFile) {\n      throw new Error('File not found in cache');\n    }\n\n    // 创建 File 对象\n    const file = new File([cachedFile.buffer], cachedFile.name, {\n      type: cachedFile.type,\n      lastModified: cachedFile.lastModified\n    });\n\n    // 上传到服务器\n    const result = await uploadToServer(file);\n\n    // 更新缓存中的文件状态\n    await fileCacheService.updateFileStatus(fileId, 'uploaded', {\n      serverId: result.fileId,\n      syncedAt: new Date().toISOString()\n    });\n    return result;\n  } catch (error) {\n    console.error('同步文件到服务器失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 批量同步所有缓存文件到服务器\n * @returns {Promise} 同步结果\n */\nexport async function syncAllFilesToServer() {\n  try {\n    const isConnected = backendConnectionService.getConnectionStatus().connected;\n    if (!isConnected) {\n      throw new Error('Backend not connected');\n    }\n    const files = await fileCacheService.getAllFiles();\n    const localFiles = files.filter(file => file.status === 'local');\n    const results = {\n      total: localFiles.length,\n      success: 0,\n      failed: 0,\n      errors: []\n    };\n    for (const file of localFiles) {\n      try {\n        await syncFileToServer(file.id);\n        results.success++;\n      } catch (error) {\n        results.failed++;\n        results.errors.push({\n          fileId: file.id,\n          fileName: file.name,\n          error: error.message\n        });\n      }\n    }\n    return results;\n  } catch (error) {\n    console.error('批量同步文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @param {string} source - 数据源 ('server' | 'cache')\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId, source = 'auto') {\n  try {\n    if (source === 'cache' || source === 'auto' && !backendConnectionService.getConnectionStatus().connected) {\n      // 从本地缓存获取预览\n      return await fileCacheService.parseFileData(fileId);\n    } else {\n      // 从服务器获取预览\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`);\n      if (!response.ok) {\n        throw new Error('Failed to get preview');\n      }\n      return await response.json();\n    }\n  } catch (error) {\n    console.error('获取文件预览失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 从服务器或缓存删除文件\n * @param {string} fileId - 要删除的文件ID\n * @param {string} source - 数据源 ('server' | 'cache')\n */\nexport async function deleteFile(fileId, source = 'auto') {\n  try {\n    if (source === 'cache' || source === 'auto' && !backendConnectionService.getConnectionStatus().connected) {\n      // 从本地缓存删除\n      return await fileCacheService.deleteFile(fileId);\n    } else {\n      // 从服务器删除\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Delete failed');\n      }\n      return await response.json();\n    }\n  } catch (error) {\n    console.error('删除文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n * @param {string} source - 数据源 ('server' | 'cache')\n */\nexport async function renameFile(fileId, newName, source = 'auto') {\n  try {\n    if (source === 'cache' || source === 'auto' && !backendConnectionService.getConnectionStatus().connected) {\n      // 在本地缓存重命名\n      return await fileCacheService.renameFile(fileId, newName);\n    } else {\n      // 在服务器重命名\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newName\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Rename failed');\n      }\n      return await response.json();\n    }\n  } catch (error) {\n    console.error('重命名文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取所有文件列表（合并本地和服务器）\n * @returns {Promise} 文件列表\n */\nexport async function getAllFiles() {\n  try {\n    const cachedFiles = await fileCacheService.getAllFiles();\n    const isConnected = backendConnectionService.getConnectionStatus().connected;\n    let serverFiles = [];\n    if (isConnected) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/files`);\n        if (response.ok) {\n          serverFiles = await response.json();\n        }\n      } catch (error) {\n        console.warn('获取服务器文件列表失败:', error);\n      }\n    }\n\n    // 合并并去重文件列表\n    const allFiles = [...cachedFiles];\n\n    // 添加只存在于服务器的文件\n    serverFiles.forEach(serverFile => {\n      const existsInCache = cachedFiles.some(cachedFile => cachedFile.metadata?.serverId === serverFile.id);\n      if (!existsInCache) {\n        allFiles.push({\n          id: serverFile.id,\n          name: serverFile.name,\n          size: serverFile.size,\n          type: serverFile.type,\n          status: 'uploaded',\n          createdAt: serverFile.createdAt,\n          metadata: {\n            serverId: serverFile.id,\n            source: 'server'\n          }\n        });\n      }\n    });\n    return allFiles;\n  } catch (error) {\n    console.error('获取文件列表失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取缓存统计信息\n * @returns {Promise} 缓存统计\n */\nexport async function getCacheStats() {\n  try {\n    return await fileCacheService.getCacheStats();\n  } catch (error) {\n    console.error('获取缓存统计失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 清理本地缓存\n * @returns {Promise} 清理结果\n */\nexport async function clearCache() {\n  try {\n    return await fileCacheService.clearCache();\n  } catch (error) {\n    console.error('清理缓存失败:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["fileCacheService","backendConnectionService","API_BASE_URL","uploadFile","file","isBackendConnected","getConnectionStatus","connected","uploadToServer","uploadToCache","formData","FormData","append","response","fetch","method","body","ok","Error","result","json","status","source","error","console","cachedFile","saveFile","fileId","id","fileName","name","fileSize","size","createdAt","syncFileToServer","isConnected","getFile","File","buffer","type","lastModified","updateFileStatus","serverId","syncedAt","Date","toISOString","syncAllFilesToServer","files","getAllFiles","localFiles","filter","results","total","length","success","failed","errors","push","message","getFilePreview","parseFileData","deleteFile","renameFile","newName","headers","JSON","stringify","cachedFiles","serverFiles","warn","allFiles","forEach","serverFile","existsInCache","some","metadata","getCacheStats","clearCache"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持智能上传机制：后端连接时上传到服务器，未连接时本地缓存\n */\n\nimport fileCacheService from './FileCacheService.js'\nimport backendConnectionService from './BackendConnectionService.js'\n\nconst API_BASE_URL = '/api'\n\n/**\n * 智能上传文件（优先后端，否则本地缓存）\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n    const isBackendConnected = backendConnectionService.getConnectionStatus().connected\n    \n    if (isBackendConnected) {\n        // 后端连接时上传到服务器\n        return await uploadToServer(file)\n    } else {\n        // 后端未连接时保存到本地缓存\n        return await uploadToCache(file)\n    }\n}\n\n/**\n * 上传文件到服务器\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadToServer(file) {\n    const formData = new FormData()\n    formData.append('file', file)\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/upload`, {\n            method: 'POST',\n            body: formData\n        })\n\n        if (!response.ok) {\n            throw new Error('Upload failed')\n        }\n\n        const result = await response.json()\n        return {\n            ...result,\n            status: 'uploaded',\n            source: 'server'\n        }\n    } catch (error) {\n        console.error('文件上传到服务器失败:', error)\n        throw error\n    }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {File} file - 要保存的文件对象\n * @returns {Promise} 保存结果\n */\nexport async function uploadToCache(file) {\n    try {\n        const cachedFile = await fileCacheService.saveFile(file)\n        return {\n            fileId: cachedFile.id,\n            fileName: cachedFile.name,\n            fileSize: cachedFile.size,\n            status: 'local',\n            source: 'cache',\n            createdAt: cachedFile.createdAt\n        }\n    } catch (error) {\n        console.error('文件保存到缓存失败:', error)\n        throw error\n    }\n}\n\n/**\n * 同步单个文件到服务器\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToServer(fileId) {\n    try {\n        const isConnected = backendConnectionService.getConnectionStatus().connected\n        if (!isConnected) {\n            throw new Error('Backend not connected')\n        }\n\n        const cachedFile = await fileCacheService.getFile(fileId)\n        if (!cachedFile) {\n            throw new Error('File not found in cache')\n        }\n\n        // 创建 File 对象\n        const file = new File([cachedFile.buffer], cachedFile.name, {\n            type: cachedFile.type,\n            lastModified: cachedFile.lastModified\n        })\n\n        // 上传到服务器\n        const result = await uploadToServer(file)\n        \n        // 更新缓存中的文件状态\n        await fileCacheService.updateFileStatus(fileId, 'uploaded', {\n            serverId: result.fileId,\n            syncedAt: new Date().toISOString()\n        })\n\n        return result\n    } catch (error) {\n        console.error('同步文件到服务器失败:', error)\n        throw error\n    }\n}\n\n/**\n * 批量同步所有缓存文件到服务器\n * @returns {Promise} 同步结果\n */\nexport async function syncAllFilesToServer() {\n    try {\n        const isConnected = backendConnectionService.getConnectionStatus().connected\n        if (!isConnected) {\n            throw new Error('Backend not connected')\n        }\n\n        const files = await fileCacheService.getAllFiles()\n        const localFiles = files.filter(file => file.status === 'local')\n        \n        const results = {\n            total: localFiles.length,\n            success: 0,\n            failed: 0,\n            errors: []\n        }\n\n        for (const file of localFiles) {\n            try {\n                await syncFileToServer(file.id)\n                results.success++\n            } catch (error) {\n                results.failed++\n                results.errors.push({\n                    fileId: file.id,\n                    fileName: file.name,\n                    error: error.message\n                })\n            }\n        }\n\n        return results\n    } catch (error) {\n        console.error('批量同步文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @param {string} source - 数据源 ('server' | 'cache')\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId, source = 'auto') {\n    try {\n        if (source === 'cache' || (source === 'auto' && !backendConnectionService.getConnectionStatus().connected)) {\n            // 从本地缓存获取预览\n            return await fileCacheService.parseFileData(fileId)\n        } else {\n            // 从服务器获取预览\n            const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`)\n            if (!response.ok) {\n                throw new Error('Failed to get preview')\n            }\n            return await response.json()\n        }\n    } catch (error) {\n        console.error('获取文件预览失败:', error)\n        throw error\n    }\n}\n\n/**\n * 从服务器或缓存删除文件\n * @param {string} fileId - 要删除的文件ID\n * @param {string} source - 数据源 ('server' | 'cache')\n */\nexport async function deleteFile(fileId, source = 'auto') {\n    try {\n        if (source === 'cache' || (source === 'auto' && !backendConnectionService.getConnectionStatus().connected)) {\n            // 从本地缓存删除\n            return await fileCacheService.deleteFile(fileId)\n        } else {\n            // 从服务器删除\n            const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n                method: 'DELETE'\n            })\n            if (!response.ok) {\n                throw new Error('Delete failed')\n            }\n            return await response.json()\n        }\n    } catch (error) {\n        console.error('删除文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n * @param {string} source - 数据源 ('server' | 'cache')\n */\nexport async function renameFile(fileId, newName, source = 'auto') {\n    try {\n        if (source === 'cache' || (source === 'auto' && !backendConnectionService.getConnectionStatus().connected)) {\n            // 在本地缓存重命名\n            return await fileCacheService.renameFile(fileId, newName)\n        } else {\n            // 在服务器重命名\n            const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ name: newName })\n            })\n            if (!response.ok) {\n                throw new Error('Rename failed')\n            }\n            return await response.json()\n        }\n    } catch (error) {\n        console.error('重命名文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取所有文件列表（合并本地和服务器）\n * @returns {Promise} 文件列表\n */\nexport async function getAllFiles() {\n    try {\n        const cachedFiles = await fileCacheService.getAllFiles()\n        const isConnected = backendConnectionService.getConnectionStatus().connected\n        \n        let serverFiles = []\n        if (isConnected) {\n            try {\n                const response = await fetch(`${API_BASE_URL}/files`)\n                if (response.ok) {\n                    serverFiles = await response.json()\n                }\n            } catch (error) {\n                console.warn('获取服务器文件列表失败:', error)\n            }\n        }\n        \n        // 合并并去重文件列表\n        const allFiles = [...cachedFiles]\n        \n        // 添加只存在于服务器的文件\n        serverFiles.forEach(serverFile => {\n            const existsInCache = cachedFiles.some(cachedFile => \n                cachedFile.metadata?.serverId === serverFile.id\n            )\n            \n            if (!existsInCache) {\n                allFiles.push({\n                    id: serverFile.id,\n                    name: serverFile.name,\n                    size: serverFile.size,\n                    type: serverFile.type,\n                    status: 'uploaded',\n                    createdAt: serverFile.createdAt,\n                    metadata: {\n                        serverId: serverFile.id,\n                        source: 'server'\n                    }\n                })\n            }\n        })\n        \n        return allFiles\n    } catch (error) {\n        console.error('获取文件列表失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取缓存统计信息\n * @returns {Promise} 缓存统计\n */\nexport async function getCacheStats() {\n    try {\n        return await fileCacheService.getCacheStats()\n    } catch (error) {\n        console.error('获取缓存统计失败:', error)\n        throw error\n    }\n}\n\n/**\n * 清理本地缓存\n * @returns {Promise} 清理结果\n */\nexport async function clearCache() {\n    try {\n        return await fileCacheService.clearCache()\n    } catch (error) {\n        console.error('清理缓存失败:', error)\n        throw error\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}