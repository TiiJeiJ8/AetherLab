{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx';\nconst API_BASE_URL = '/api';\nconst CACHE_KEY = 'fuck_charts_files';\nconst PREVIEW_ROWS_LIMIT = 100; // 可配置的预览行数\n\n// 后端连接状态\nlet isBackendConnected = false;\n\n/**\n * 检测后端连接状态\n * @returns {Promise<boolean>} 连接状态\n */\nexport async function checkBackendConnection() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000);\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      method: 'GET',\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    isBackendConnected = response.ok;\n    return isBackendConnected;\n  } catch (error) {\n    console.log('后端连接检测:', error.message);\n    isBackendConnected = false;\n    return false;\n  }\n}\n\n/**\n * 获取后端连接状态\n * @returns {boolean} 连接状态\n */\nexport function getBackendStatus() {\n  return isBackendConnected;\n}\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n  try {\n    const cached = localStorage.getItem(CACHE_KEY);\n    return cached ? JSON.parse(cached) : [];\n  } catch (error) {\n    console.error('读取缓存失败:', error);\n    return [];\n  }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n  try {\n    const cached = getCachedFiles();\n    cached.push(fileInfo);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cached));\n  } catch (error) {\n    console.error('保存到缓存失败:', error);\n  }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n  try {\n    const cached = getCachedFiles();\n    const filtered = cached.filter(file => file.id !== fileId);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(filtered));\n  } catch (error) {\n    console.error('从缓存删除失败:', error);\n  }\n}\n\n/**\n * 清除所有缓存\n */\nexport function clearAllCache() {\n  try {\n    localStorage.removeItem(CACHE_KEY);\n    console.log('缓存已清除');\n  } catch (error) {\n    console.error('清除缓存失败:', error);\n  }\n}\n\n/**\n * 设置预览行数并清除缓存（用于调试）\n * @param {number} newLimit - 新的预览行数限制\n */\nexport function setPreviewLimit(newLimit) {\n  console.log(`预览行数已设置为: ${newLimit}`);\n  console.log('请重新上传文件以应用新设置，或清除缓存后刷新页面');\n\n  // 你可以在这里添加清除缓存的逻辑\n  // clearAllCache()\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = e.target.result;\n        let workbook, worksheet, jsonData;\n        if (file.name.toLowerCase().endsWith('.csv')) {\n          // CSV文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'string',\n            codepage: 65001 // UTF-8\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        } else {\n          // Excel文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'array',\n            cellDates: true,\n            cellNF: false,\n            cellText: false\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        }\n\n        // 过滤空行\n        jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''));\n        resolve({\n          data: jsonData,\n          // 返回完整数据\n          totalRows: jsonData.length,\n          totalColumns: jsonData[0] ? jsonData[0].length : 0,\n          headers: jsonData[0] || []\n        });\n      } catch (error) {\n        console.error('文件解析失败:', error);\n        reject(new Error('文件解析失败：' + error.message));\n      }\n    };\n    reader.onerror = () => reject(new Error('文件读取失败'));\n    if (file.name.toLowerCase().endsWith('.csv')) {\n      reader.readAsText(file, 'UTF-8');\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  });\n}\n\n/**\n * 智能上传文件（根据后端连接状态决定上传或缓存）\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n  try {\n    // 首先解析文件内容\n    console.log('开始解析文件:', file.name);\n    const parsedContent = await parseFileContent(file);\n    const fileInfo = {\n      id: Date.now() + Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      rows: parsedContent.totalRows,\n      columns: parsedContent.totalColumns,\n      headers: parsedContent.headers,\n      createdAt: new Date().toISOString(),\n      status: 'local',\n      data: parsedContent.data,\n      file: file // 保存原始文件对象用于后续上传\n    };\n\n    // 检查后端连接状态\n    const isConnected = await checkBackendConnection();\n    console.log('后端连接状态:', isConnected);\n    if (isConnected) {\n      // 后端连接时直接上传\n      try {\n        fileInfo.status = 'uploading';\n        console.log('正在上传到后端...');\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await fetch(`${API_BASE_URL}/files/upload`, {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`上传失败: ${response.status} ${response.statusText}`);\n        }\n        const result = await response.json();\n        fileInfo.status = 'uploaded';\n        fileInfo.serverId = result.fileId;\n        console.log('上传成功:', result);\n\n        // 同时保存到缓存\n        saveToCache(fileInfo);\n        return fileInfo;\n      } catch (error) {\n        console.error('后端上传失败:', error);\n        fileInfo.status = 'local'; // 改为本地缓存而不是error\n        saveToCache(fileInfo);\n        console.log('已保存到本地缓存');\n        return fileInfo;\n      }\n    } else {\n      // 后端未连接时保存到本地缓存\n      console.log('后端未连接，保存到本地缓存');\n      fileInfo.status = 'local';\n      saveToCache(fileInfo);\n      return fileInfo;\n    }\n  } catch (error) {\n    console.error('文件处理失败:', error);\n    throw new Error('文件处理失败：' + error.message);\n  }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @param {number} maxRows - 最大预览行数，默认使用配置值\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId, maxRows = PREVIEW_ROWS_LIMIT) {\n  // 先从缓存查找\n  const cachedFiles = getCachedFiles();\n  const cachedFile = cachedFiles.find(file => file.id === fileId);\n  if (cachedFile && cachedFile.data) {\n    // 动态调整预览行数\n    const previewData = cachedFile.data.slice(0, maxRows);\n    return {\n      data: previewData,\n      totalRows: cachedFile.rows,\n      totalColumns: cachedFile.columns,\n      headers: cachedFile.headers\n    };\n  }\n\n  // 如果缓存中没有，且后端连接，则从后端获取\n  if (isBackendConnected) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`);\n      if (!response.ok) {\n        throw new Error('Failed to get preview');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('获取文件预览失败:', error);\n      throw error;\n    }\n  }\n  throw new Error('文件预览不可用');\n}\n\n/**\n * 同步本地文件到后端\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToBackend(fileId) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo || !fileInfo.file) {\n    throw new Error('本地文件不存在');\n  }\n  if (!(await checkBackendConnection())) {\n    throw new Error('后端未连接');\n  }\n  try {\n    const formData = new FormData();\n    formData.append('file', fileInfo.file);\n    const response = await fetch(`${API_BASE_URL}/files/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('同步失败');\n    }\n    const result = await response.json();\n\n    // 更新缓存中的文件状态\n    fileInfo.status = 'uploaded';\n    fileInfo.serverId = result.fileId;\n    const updatedFiles = cachedFiles.map(file => file.id === fileId ? fileInfo : file);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles));\n    return fileInfo;\n  } catch (error) {\n    console.error('同步文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取所有文件列表（本地缓存 + 远程文件）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n  const cachedFiles = getCachedFiles();\n  if (!(await checkBackendConnection())) {\n    return cachedFiles;\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/files`);\n    if (!response.ok) {\n      return cachedFiles;\n    }\n    const remoteFiles = await response.json();\n\n    // 合并本地和远程文件，避免重复\n    const allFiles = [...cachedFiles];\n    remoteFiles.forEach(remoteFile => {\n      const existsInCache = cachedFiles.some(cached => cached.serverId === remoteFile.id);\n      if (!existsInCache) {\n        allFiles.push({\n          ...remoteFile,\n          id: remoteFile.id,\n          serverId: remoteFile.id,\n          status: 'uploaded'\n        });\n      }\n    });\n    return allFiles;\n  } catch (error) {\n    console.error('获取远程文件列表失败:', error);\n    return cachedFiles;\n  }\n}\n\n/**\n * 智能删除文件（根据文件状态决定删除位置）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('文件不存在');\n  }\n\n  // 如果文件已上传到服务器，同时从服务器删除\n  if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n    if (await checkBackendConnection()) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          console.warn('从服务器删除文件失败');\n        }\n      } catch (error) {\n        console.error('从服务器删除文件失败:', error);\n      }\n    }\n  }\n\n  // 从本地缓存删除\n  removeFromCache(fileId);\n  return {\n    success: true\n  };\n}\n\n/**\n * 智能重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('文件不存在');\n  }\n\n  // 如果文件已上传到服务器，同时更新服务器\n  if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n    if (await checkBackendConnection()) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}/rename`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: newName\n          })\n        });\n        if (!response.ok) {\n          console.warn('服务器重命名失败');\n        }\n      } catch (error) {\n        console.error('服务器重命名失败:', error);\n      }\n    }\n  }\n\n  // 更新本地缓存\n  fileInfo.name = newName;\n  const updatedFiles = cachedFiles.map(file => file.id === fileId ? fileInfo : file);\n  localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles));\n  return {\n    success: true,\n    file: fileInfo\n  };\n}","map":{"version":3,"names":["XLSX","API_BASE_URL","CACHE_KEY","PREVIEW_ROWS_LIMIT","isBackendConnected","checkBackendConnection","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","clearTimeout","ok","error","console","log","message","getBackendStatus","getCachedFiles","cached","localStorage","getItem","JSON","parse","saveToCache","fileInfo","push","setItem","stringify","removeFromCache","fileId","filtered","filter","file","id","clearAllCache","removeItem","setPreviewLimit","newLimit","parseFileContent","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","worksheet","jsonData","name","toLowerCase","endsWith","read","type","codepage","Sheets","SheetNames","utils","sheet_to_json","header","defval","blankrows","cellDates","cellNF","cellText","row","some","cell","totalRows","length","totalColumns","headers","Error","onerror","readAsText","readAsArrayBuffer","uploadFile","parsedContent","Date","now","Math","random","toString","substr","size","rows","columns","createdAt","toISOString","status","isConnected","formData","FormData","append","body","statusText","json","serverId","getFilePreview","maxRows","cachedFiles","cachedFile","find","previewData","slice","syncFileToBackend","updatedFiles","map","getAllFiles","remoteFiles","allFiles","forEach","remoteFile","existsInCache","deleteFile","warn","success","renameFile","newName"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx'\n\nconst API_BASE_URL = '/api'\nconst CACHE_KEY = 'fuck_charts_files'\nconst PREVIEW_ROWS_LIMIT = 100 // 可配置的预览行数\n\n// 后端连接状态\nlet isBackendConnected = false\n\n/**\n * 检测后端连接状态\n * @returns {Promise<boolean>} 连接状态\n */\nexport async function checkBackendConnection() {\n    try {\n        const controller = new AbortController()\n        const timeoutId = setTimeout(() => controller.abort(), 3000)\n\n        const response = await fetch(`${API_BASE_URL}/health`, {\n            method: 'GET',\n            signal: controller.signal\n        })\n\n        clearTimeout(timeoutId)\n        isBackendConnected = response.ok\n        return isBackendConnected\n    } catch (error) {\n        console.log('后端连接检测:', error.message)\n        isBackendConnected = false\n        return false\n    }\n}\n\n/**\n * 获取后端连接状态\n * @returns {boolean} 连接状态\n */\nexport function getBackendStatus() {\n    return isBackendConnected\n}\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n    try {\n        const cached = localStorage.getItem(CACHE_KEY)\n        return cached ? JSON.parse(cached) : []\n    } catch (error) {\n        console.error('读取缓存失败:', error)\n        return []\n    }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n    try {\n        const cached = getCachedFiles()\n        cached.push(fileInfo)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(cached))\n    } catch (error) {\n        console.error('保存到缓存失败:', error)\n    }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n    try {\n        const cached = getCachedFiles()\n        const filtered = cached.filter(file => file.id !== fileId)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(filtered))\n    } catch (error) {\n        console.error('从缓存删除失败:', error)\n    }\n}\n\n/**\n * 清除所有缓存\n */\nexport function clearAllCache() {\n    try {\n        localStorage.removeItem(CACHE_KEY)\n        console.log('缓存已清除')\n    } catch (error) {\n        console.error('清除缓存失败:', error)\n    }\n}\n\n/**\n * 设置预览行数并清除缓存（用于调试）\n * @param {number} newLimit - 新的预览行数限制\n */\nexport function setPreviewLimit(newLimit) {\n    console.log(`预览行数已设置为: ${newLimit}`)\n    console.log('请重新上传文件以应用新设置，或清除缓存后刷新页面')\n    \n    // 你可以在这里添加清除缓存的逻辑\n    // clearAllCache()\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n\n        reader.onload = (e) => {\n            try {\n                const data = e.target.result\n                let workbook, worksheet, jsonData\n\n                if (file.name.toLowerCase().endsWith('.csv')) {\n                    // CSV文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'string',\n                        codepage: 65001 // UTF-8\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                } else {\n                    // Excel文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'array',\n                        cellDates: true,\n                        cellNF: false,\n                        cellText: false\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                }\n\n                // 过滤空行\n                jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''))\n\n                resolve({\n                    data: jsonData, // 返回完整数据\n                    totalRows: jsonData.length,\n                    totalColumns: jsonData[0] ? jsonData[0].length : 0,\n                    headers: jsonData[0] || []\n                })\n            } catch (error) {\n                console.error('文件解析失败:', error)\n                reject(new Error('文件解析失败：' + error.message))\n            }\n        }\n\n        reader.onerror = () => reject(new Error('文件读取失败'))\n\n        if (file.name.toLowerCase().endsWith('.csv')) {\n            reader.readAsText(file, 'UTF-8')\n        } else {\n            reader.readAsArrayBuffer(file)\n        }\n    })\n}\n\n/**\n * 智能上传文件（根据后端连接状态决定上传或缓存）\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n    try {\n        // 首先解析文件内容\n        console.log('开始解析文件:', file.name)\n        const parsedContent = await parseFileContent(file)\n\n        const fileInfo = {\n            id: Date.now() + Math.random().toString(36).substr(2, 9),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            rows: parsedContent.totalRows,\n            columns: parsedContent.totalColumns,\n            headers: parsedContent.headers,\n            createdAt: new Date().toISOString(),\n            status: 'local',\n            data: parsedContent.data,\n            file: file // 保存原始文件对象用于后续上传\n        }\n\n        // 检查后端连接状态\n        const isConnected = await checkBackendConnection()\n        console.log('后端连接状态:', isConnected)\n\n        if (isConnected) {\n            // 后端连接时直接上传\n            try {\n                fileInfo.status = 'uploading'\n                console.log('正在上传到后端...')\n\n                const formData = new FormData()\n                formData.append('file', file)\n\n                const response = await fetch(`${API_BASE_URL}/files/upload`, {\n                    method: 'POST',\n                    body: formData\n                })\n\n                if (!response.ok) {\n                    throw new Error(`上传失败: ${response.status} ${response.statusText}`)\n                }\n\n                const result = await response.json()\n                fileInfo.status = 'uploaded'\n                fileInfo.serverId = result.fileId\n\n                console.log('上传成功:', result)\n\n                // 同时保存到缓存\n                saveToCache(fileInfo)\n\n                return fileInfo\n            } catch (error) {\n                console.error('后端上传失败:', error)\n                fileInfo.status = 'local' // 改为本地缓存而不是error\n                saveToCache(fileInfo)\n                console.log('已保存到本地缓存')\n                return fileInfo\n            }\n        } else {\n            // 后端未连接时保存到本地缓存\n            console.log('后端未连接，保存到本地缓存')\n            fileInfo.status = 'local'\n            saveToCache(fileInfo)\n            return fileInfo\n        }\n    } catch (error) {\n        console.error('文件处理失败:', error)\n        throw new Error('文件处理失败：' + error.message)\n    }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @param {number} maxRows - 最大预览行数，默认使用配置值\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId, maxRows = PREVIEW_ROWS_LIMIT) {\n    // 先从缓存查找\n    const cachedFiles = getCachedFiles()\n    const cachedFile = cachedFiles.find(file => file.id === fileId)\n\n    if (cachedFile && cachedFile.data) {\n        // 动态调整预览行数\n        const previewData = cachedFile.data.slice(0, maxRows)\n        return {\n            data: previewData,\n            totalRows: cachedFile.rows,\n            totalColumns: cachedFile.columns,\n            headers: cachedFile.headers\n        }\n    }\n\n    // 如果缓存中没有，且后端连接，则从后端获取\n    if (isBackendConnected) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`)\n            if (!response.ok) {\n                throw new Error('Failed to get preview')\n            }\n            return await response.json()\n        } catch (error) {\n            console.error('获取文件预览失败:', error)\n            throw error\n        }\n    }\n\n    throw new Error('文件预览不可用')\n}\n\n/**\n * 同步本地文件到后端\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToBackend(fileId) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo || !fileInfo.file) {\n        throw new Error('本地文件不存在')\n    }\n\n    if (!await checkBackendConnection()) {\n        throw new Error('后端未连接')\n    }\n\n    try {\n        const formData = new FormData()\n        formData.append('file', fileInfo.file)\n\n        const response = await fetch(`${API_BASE_URL}/files/upload`, {\n            method: 'POST',\n            body: formData\n        })\n\n        if (!response.ok) {\n            throw new Error('同步失败')\n        }\n\n        const result = await response.json()\n\n        // 更新缓存中的文件状态\n        fileInfo.status = 'uploaded'\n        fileInfo.serverId = result.fileId\n\n        const updatedFiles = cachedFiles.map(file =>\n            file.id === fileId ? fileInfo : file\n        )\n        localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles))\n\n        return fileInfo\n    } catch (error) {\n        console.error('同步文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取所有文件列表（本地缓存 + 远程文件）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n    const cachedFiles = getCachedFiles()\n\n    if (!await checkBackendConnection()) {\n        return cachedFiles\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/files`)\n        if (!response.ok) {\n            return cachedFiles\n        }\n\n        const remoteFiles = await response.json()\n\n        // 合并本地和远程文件，避免重复\n        const allFiles = [...cachedFiles]\n\n        remoteFiles.forEach(remoteFile => {\n            const existsInCache = cachedFiles.some(cached =>\n                cached.serverId === remoteFile.id\n            )\n\n            if (!existsInCache) {\n                allFiles.push({\n                    ...remoteFile,\n                    id: remoteFile.id,\n                    serverId: remoteFile.id,\n                    status: 'uploaded'\n                })\n            }\n        })\n\n        return allFiles\n    } catch (error) {\n        console.error('获取远程文件列表失败:', error)\n        return cachedFiles\n    }\n}\n\n/**\n * 智能删除文件（根据文件状态决定删除位置）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo) {\n        throw new Error('文件不存在')\n    }\n\n    // 如果文件已上传到服务器，同时从服务器删除\n    if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n        if (await checkBackendConnection()) {\n            try {\n                const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}`, {\n                    method: 'DELETE'\n                })\n                if (!response.ok) {\n                    console.warn('从服务器删除文件失败')\n                }\n            } catch (error) {\n                console.error('从服务器删除文件失败:', error)\n            }\n        }\n    }\n\n    // 从本地缓存删除\n    removeFromCache(fileId)\n\n    return { success: true }\n}\n\n/**\n * 智能重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo) {\n        throw new Error('文件不存在')\n    }\n\n    // 如果文件已上传到服务器，同时更新服务器\n    if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n        if (await checkBackendConnection()) {\n            try {\n                const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}/rename`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ name: newName })\n                })\n                if (!response.ok) {\n                    console.warn('服务器重命名失败')\n                }\n            } catch (error) {\n                console.error('服务器重命名失败:', error)\n            }\n        }\n    }\n\n    // 更新本地缓存\n    fileInfo.name = newName\n    const updatedFiles = cachedFiles.map(file =>\n        file.id === fileId ? fileInfo : file\n    )\n    localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles))\n\n    return { success: true, file: fileInfo }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}