{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartRef\",\n  class: \"chart-display\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\newArchitecture\\frontend_vue_design\\src\\components\\ChartDisplay.vue"],"sourcesContent":["<template>\n    <div ref=\"chartRef\" class=\"chart-display\"></div>\n</template>\n\n<script setup>\n/* eslint-disable */\n    import { ref, watch, onMounted, onBeforeUnmount } from 'vue'\n    import * as echarts from 'echarts'\n\n    const props = defineProps({\n        option: { type: Object, required: true }\n    })\n\n    const chartRef = ref(null)\n    let chartInstance = null\n\n    function renderChart() {\n        if (!chartInstance && chartRef.value) {\n            chartInstance = echarts.init(chartRef.value)\n        }\n        if (chartInstance && props.option) {\n            chartInstance.setOption(props.option, true)\n        }\n    }\n\n    watch(() => props.option, renderChart, { deep: true })\n    onMounted(renderChart)\n    onBeforeUnmount(() => {\n        if (chartInstance) chartInstance.dispose()\n    })\n</script>\n\n<style scoped>\n    .chart-display {\n        width: 100%;\n        height: 100%;\n        min-height: 400px;\n        background: var(--bg-color, #fff);\n        border-radius: 12px;\n        box-shadow: 1px var(--text-color);\n    }\n</style>"],"mappings":";;EACSA,GAAG,EAAC,UAAU;EAACC,KAAK,EAAC;;;uBAA1BC,mBAAA,CAAgD,OAAhDC,UAAgD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}