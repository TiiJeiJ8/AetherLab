{"ast":null,"code":"import { ref, nextTick } from 'vue';\nimport { getThemeIcon } from '@/assets/JS/SVG/icons.js';\nexport default {\n  __name: 'AutoRenderToggle',\n  props: {\n    modelValue: Boolean\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const toggleTooltip = ref({\n      visible: false,\n      text: '',\n      style: {}\n    });\n    let tooltipPositioned = false;\n    function showToggleTooltip(event, type) {\n      toggleTooltip.value.text = type === 'Auto' ? 'Real-time Render' : 'Manual Render';\n      if (!tooltipPositioned) {\n        toggleTooltip.value.visible = true;\n        nextTick(() => {\n          let el = event.currentTarget || event.target;\n          if (el && el.classList && !el.classList.contains('block-toggle-option')) {\n            el = el.closest('.block-toggle-option');\n          }\n          if (el) {\n            const rect = el.getBoundingClientRect();\n            toggleTooltip.value.style = {\n              left: `${rect.left + rect.width / 2 - 50 + window.scrollX}px`,\n              top: `${rect.bottom + 6 + window.scrollY}px`,\n              position: 'absolute',\n              zIndex: 2000,\n              minWidth: '100px',\n              textAlign: 'center'\n            };\n            tooltipPositioned = true;\n          }\n        });\n      } else {\n        toggleTooltip.value.visible = true;\n      }\n    }\n    // 只保留一份 hideToggleTooltip，防止重复声明\n    function hideToggleTooltip() {\n      toggleTooltip.value.visible = false;\n      tooltipPositioned = false;\n    }\n    const __returned__ = {\n      props,\n      emit,\n      toggleTooltip,\n      get tooltipPositioned() {\n        return tooltipPositioned;\n      },\n      set tooltipPositioned(v) {\n        tooltipPositioned = v;\n      },\n      showToggleTooltip,\n      hideToggleTooltip,\n      ref,\n      nextTick,\n      get getThemeIcon() {\n        return getThemeIcon;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","nextTick","getThemeIcon","props","__props","emit","__emit","toggleTooltip","visible","text","style","tooltipPositioned","showToggleTooltip","event","type","value","el","currentTarget","target","classList","contains","closest","rect","getBoundingClientRect","left","width","window","scrollX","top","bottom","scrollY","position","zIndex","minWidth","textAlign","hideToggleTooltip"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Common/AutoRenderToggle.vue"],"sourcesContent":["<template>\n<div class=\"block-toggle-group\" style=\"position: relative;\">\n    <div class=\"block-toggle\" :class=\"{ 'checked': modelValue }\">\n        <div class=\"block-toggle-slider\" :class=\"{ 'right': !modelValue }\"></div>\n        <div class=\"block-toggle-option left\" :class=\"{ active: modelValue }\"\n            @mouseover=\"showToggleTooltip($event, 'Auto')\" @mouseout=\"hideToggleTooltip\"\n            @focus=\"showToggleTooltip($event, 'Auto')\" @blur=\"hideToggleTooltip\"\n            @click=\"() => emit('update:modelValue', true)\"\n            tabindex=\"0\"\n        >\n            <span v-html=\"getThemeIcon('refresh')\"></span>\n        </div>\n        <div class=\"block-toggle-option right\" :class=\"{ active: !modelValue }\"\n            @mouseover=\"showToggleTooltip($event, 'Manual')\" @mouseout=\"hideToggleTooltip\"\n            @focus=\"showToggleTooltip($event, 'Manual')\" @blur=\"hideToggleTooltip\"\n            @click=\"() => emit('update:modelValue', false)\"\n            tabindex=\"0\"\n        >\n            <span v-html=\"getThemeIcon('eye')\"></span>\n        </div>\n    </div>\n    <teleport to=\"body\">\n      <div v-if=\"toggleTooltip.visible\" class=\"toggle-tooltip\" :style=\"toggleTooltip.style\">\n          {{ toggleTooltip.text }}\n      </div>\n    </teleport>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, nextTick, defineProps, defineEmits } from 'vue'\nimport { getThemeIcon } from '@/assets/JS/SVG/icons.js'\n\nconst props = defineProps({\n    modelValue: Boolean\n})\nconst emit = defineEmits(['update:modelValue'])\n\n\n\nconst toggleTooltip = ref({ visible: false, text: '', style: {} })\nlet tooltipPositioned = false\nfunction showToggleTooltip (event, type) {\n    toggleTooltip.value.text = type === 'Auto' ? 'Real-time Render' : 'Manual Render'\n    if (!tooltipPositioned) {\n        toggleTooltip.value.visible = true\n        nextTick(() => {\n            let el = event.currentTarget || event.target\n            if (el && el.classList && !el.classList.contains('block-toggle-option')) {\n                el = el.closest('.block-toggle-option')\n            }\n            if (el) {\n                const rect = el.getBoundingClientRect()\n                toggleTooltip.value.style = {\n                    left: `${rect.left + rect.width / 2 - 50 + window.scrollX}px`,\n                    top: `${rect.bottom + 6 + window.scrollY}px`,\n                    position: 'absolute',\n                    zIndex: 2000,\n                    minWidth: '100px',\n                    textAlign: 'center'\n                }\n                tooltipPositioned = true\n            }\n        })\n    } else {\n        toggleTooltip.value.visible = true\n    }\n}\n// 只保留一份 hideToggleTooltip，防止重复声明\nfunction hideToggleTooltip () {\n    toggleTooltip.value.visible = false\n    tooltipPositioned = false\n}\n</script>\n\n<style scoped>\n\n.block-toggle-group {\n    display: flex;\n    align-items: center;\n    margin-right: 18px;\n    position: relative;\n}\n.block-toggle {\n    position: relative;\n    width: 74px;\n    height: 26px;\n    background: #f5f5f5;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.04);\n    transition: background 0.2s;\n    user-select: none;\n    border: 1px solid #e0e0e0;\n}\n.block-toggle-option {\n    flex: 1;\n    text-align: center;\n    z-index: 2;\n    font-size: 0.93em;\n    font-weight: 500;\n    color: #888;\n    transition: color 0.2s, font-weight 0.2s;\n    padding: 0 1px;\n    line-height: 26px;\n    border-radius: 6px;\n    position: relative;\n    letter-spacing: 0.01em;\n}\n.block-toggle-option.active {\n    color: #222;\n    font-weight: 700;\n    background: #e0e0e0;\n}\n.block-toggle-slider {\n    position: absolute;\n    top: 1.5px;\n    left: 2px;\n    width: 32px;\n    height: 21px;\n    background: #e0e0e0;\n    border-radius: 5px;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.06);\n    transition: left 0.18s cubic-bezier(.4,2,.6,1), background 0.2s;\n    z-index: 1;\n}\n.block-toggle-slider.right {\n    left: 40px;\n    background: #e0e0e0;\n}\n.toggle-tooltip {\n    position: fixed;\n    background: #222;\n    color: #fff;\n    border-radius: 5px;\n    padding: 3px 6px;\n    font-size: 0.55em;\n    pointer-events: none;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.13);\n    white-space: nowrap;\n    opacity: 0.97;\n    transition: opacity 0.18s;\n}\n\n/* 深色模式适配 */\n[data-theme=\"dark\"] .block-toggle {\n    background: #23272e;\n    border-color: #444c5a;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.18);\n}\n[data-theme=\"dark\"] .block-toggle-option {\n    color: #aaa;\n}\n[data-theme=\"dark\"] .block-toggle-option.active {\n    color: #fff;\n    background: #3a4251;\n}\n[data-theme=\"dark\"] .block-toggle-slider,\n[data-theme=\"dark\"] .block-toggle-slider.right {\n    background: #3a4251;\n}\n[data-theme=\"dark\"] .toggle-tooltip {\n    background: #222b3a;\n    color: #e0e6f0;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.33);\n    font-size: 12px;\n}\n</style>\n"],"mappings":"AA+BA,SAASA,GAAG,EAAEC,QAAkC,QAAQ,KAAI;AAC5D,SAASC,YAAY,QAAQ,0BAAyB;;;;;;;;;;;;;IAFtD;IAIA,MAAMC,KAAK,GAAGC,OAAA;IAGd,MAAMC,IAAI,GAAGC,MAAA;IAIb,MAAMC,aAAa,GAAGP,GAAG,CAAC;MAAEQ,OAAO,EAAE,KAAK;MAAEC,IAAI,EAAE,EAAE;MAAEC,KAAK,EAAE,CAAC;IAAE,CAAC;IACjE,IAAIC,iBAAiB,GAAG,KAAI;IAC5B,SAASC,iBAAiBA,CAAEC,KAAK,EAAEC,IAAI,EAAE;MACrCP,aAAa,CAACQ,KAAK,CAACN,IAAI,GAAGK,IAAI,KAAK,MAAM,GAAG,kBAAkB,GAAG,eAAc;MAChF,IAAI,CAACH,iBAAiB,EAAE;QACpBJ,aAAa,CAACQ,KAAK,CAACP,OAAO,GAAG,IAAG;QACjCP,QAAQ,CAAC,MAAM;UACX,IAAIe,EAAE,GAAGH,KAAK,CAACI,aAAa,IAAIJ,KAAK,CAACK,MAAK;UAC3C,IAAIF,EAAE,IAAIA,EAAE,CAACG,SAAS,IAAI,CAACH,EAAE,CAACG,SAAS,CAACC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;YACrEJ,EAAE,GAAGA,EAAE,CAACK,OAAO,CAAC,sBAAsB;UAC1C;UACA,IAAIL,EAAE,EAAE;YACJ,MAAMM,IAAI,GAAGN,EAAE,CAACO,qBAAqB,CAAC;YACtChB,aAAa,CAACQ,KAAK,CAACL,KAAK,GAAG;cACxBc,IAAI,EAAE,GAAGF,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,KAAK,GAAG,CAAC,GAAG,EAAE,GAAGC,MAAM,CAACC,OAAO,IAAI;cAC7DC,GAAG,EAAE,GAAGN,IAAI,CAACO,MAAM,GAAG,CAAC,GAAGH,MAAM,CAACI,OAAO,IAAI;cAC5CC,QAAQ,EAAE,UAAU;cACpBC,MAAM,EAAE,IAAI;cACZC,QAAQ,EAAE,OAAO;cACjBC,SAAS,EAAE;YACf;YACAvB,iBAAiB,GAAG,IAAG;UAC3B;QACJ,CAAC;MACL,CAAC,MAAM;QACHJ,aAAa,CAACQ,KAAK,CAACP,OAAO,GAAG,IAAG;MACrC;IACJ;IACA;IACA,SAAS2B,iBAAiBA,CAAA,EAAI;MAC1B5B,aAAa,CAACQ,KAAK,CAACP,OAAO,GAAG,KAAI;MAClCG,iBAAiB,GAAG,KAAI;IAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}