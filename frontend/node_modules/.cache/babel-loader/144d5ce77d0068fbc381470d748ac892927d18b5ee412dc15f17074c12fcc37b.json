{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, computed, watch } from 'vue';\nexport default {\n  __name: 'DataMappingPanel',\n  props: {\n    selectedChartType: String\n  },\n  emits: ['update-chart'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 根据图表类型动态生成拖放区域\n    const dropZones = computed(() => {\n      if (!props.selectedChartType) return [];\n      // 这里可以根据不同的图表类型返回不同的配置项\n      switch (props.selectedChartType) {\n        case 'bar':\n        case 'line':\n          return [{\n            id: 'xAxis',\n            label: 'X轴'\n          }, {\n            id: 'yAxis',\n            label: 'Y轴'\n          }, {\n            id: 'series',\n            label: '系列 (可选)'\n          }];\n        case 'pie':\n          return [{\n            id: 'name',\n            label: '标签'\n          }, {\n            id: 'value',\n            label: '值'\n          }];\n        default:\n          return [{\n            id: 'data',\n            label: '数据'\n          }];\n      }\n    });\n    const mappedData = ref({});\n    watch(() => props.selectedChartType, () => {\n      // 图表类型改变时清空已映射数据\n      mappedData.value = {};\n    });\n    function onDrop(zoneId, event) {\n      const data = JSON.parse(event.dataTransfer.getData('application/json'));\n      mappedData.value[zoneId] = {\n        file: data.fileName,\n        column: data.column\n      };\n      console.log(`Dropped ${data.column} from ${data.fileName} into ${zoneId}`);\n    }\n    function removeItem(zoneId) {\n      mappedData.value[zoneId] = null;\n    }\n    const canGenerate = computed(() => {\n      // 简单检查是否可以生成图表\n      return dropZones.value.some(zone => mappedData.value[zone.id] && !zone.label.includes('可选'));\n    });\n    function generateChart() {\n      // 在这里可以添加更复杂的逻辑来组合来自不同文件的数据\n      // 目前只是一个示例\n      console.log('Generating chart with:', mappedData.value);\n      // 触发事件，将配置好的图表信息传递给父组件\n      emit('update-chart', {\n        type: props.selectedChartType,\n        mapping: mappedData.value\n      });\n    }\n    const __returned__ = {\n      props,\n      emit,\n      dropZones,\n      mappedData,\n      onDrop,\n      removeItem,\n      canGenerate,\n      generateChart,\n      ref,\n      computed,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","props","__props","emit","__emit","dropZones","selectedChartType","id","label","mappedData","value","onDrop","zoneId","event","data","JSON","parse","dataTransfer","getData","file","fileName","column","console","log","removeItem","canGenerate","some","zone","includes","generateChart","type","mapping"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/components/DataMappingPanel.vue"],"sourcesContent":["<template>\n  <div class=\"data-mapping-panel\">\n    <h4>{{ selectedChartType || '未选择图表' }} 配置</h4>\n    <div v-if=\"!selectedChartType\">\n      <p>请先从左侧选择一个图表类型。</p>\n    </div>\n    <div v-else class=\"drop-zones\">\n      <!-- 动态生成拖放区域 -->\n      <div v-for=\"zone in dropZones\" :key=\"zone.id\" class=\"drop-zone\">\n        <label>{{ zone.label }}</label>\n        <div\n          class=\"drop-area\"\n          @dragover.prevent\n          @drop=\"onDrop(zone.id, $event)\"\n        >\n          <div v-if=\"mappedData[zone.id]\" class=\"mapped-item\">\n            {{ mappedData[zone.id].file }}: {{ mappedData[zone.id].column }}\n            <button @click=\"removeItem(zone.id)\">&times;</button>\n          </div>\n          <span v-else class=\"placeholder\">拖拽列到此处</span>\n        </div>\n      </div>\n    </div>\n    <button @click=\"generateChart\" :disabled=\"!canGenerate\">生成图表</button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from 'vue';\n\nconst props = defineProps({\n  selectedChartType: String,\n});\n\nconst emit = defineEmits(['update-chart']);\n\n// 根据图表类型动态生成拖放区域\nconst dropZones = computed(() => {\n  if (!props.selectedChartType) return [];\n  // 这里可以根据不同的图表类型返回不同的配置项\n  switch (props.selectedChartType) {\n    case 'bar':\n    case 'line':\n      return [\n        { id: 'xAxis', label: 'X轴' },\n        { id: 'yAxis', label: 'Y轴' },\n        { id: 'series', label: '系列 (可选)' },\n      ];\n    case 'pie':\n      return [\n        { id: 'name', label: '标签' },\n        { id: 'value', label: '值' },\n      ];\n    default:\n      return [{ id: 'data', label: '数据' }];\n  }\n});\n\nconst mappedData = ref({});\n\nwatch(() => props.selectedChartType, () => {\n  // 图表类型改变时清空已映射数据\n  mappedData.value = {};\n});\n\nfunction onDrop(zoneId, event) {\n  const data = JSON.parse(event.dataTransfer.getData('application/json'));\n  mappedData.value[zoneId] = {\n    file: data.fileName,\n    column: data.column,\n  };\n  console.log(`Dropped ${data.column} from ${data.fileName} into ${zoneId}`);\n}\n\nfunction removeItem(zoneId) {\n  mappedData.value[zoneId] = null;\n}\n\nconst canGenerate = computed(() => {\n  // 简单检查是否可以生成图表\n  return dropZones.value.some(zone => mappedData.value[zone.id] && !zone.label.includes('可选'));\n});\n\nfunction generateChart() {\n  // 在这里可以添加更复杂的逻辑来组合来自不同文件的数据\n  // 目前只是一个示例\n  console.log('Generating chart with:', mappedData.value);\n  // 触发事件，将配置好的图表信息传递给父组件\n  emit('update-chart', {\n    type: props.selectedChartType,\n    mapping: mappedData.value,\n  });\n}\n</script>\n\n<style scoped>\n.data-mapping-panel {\n  padding: 16px;\n  color: var(--text-color);\n}\n.drop-zones {\n  margin-top: 20px;\n}\n.drop-zone {\n  margin-bottom: 15px;\n}\n.drop-area {\n  border: 2px dashed #ccc;\n  padding: 10px;\n  min-height: 40px;\n  border-radius: 8px;\n  transition: background-color 0.2s;\n}\n.drop-area:hover {\n  background-color: rgba(136, 133, 133, 0.1);\n}\n.placeholder {\n  color: #888;\n  font-size: 0.9em;\n}\n.mapped-item {\n  background-color: #4a4a4a;\n  padding: 5px 10px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n"],"mappings":";;AA4BA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,KAAK;;;;;;;;;;;;IAE1C,MAAMC,KAAK,GAAGC,OAEZ;IAEF,MAAMC,IAAI,GAAGC,MAA6B;;IAE1C;IACA,MAAMC,SAAS,GAAGN,QAAQ,CAAC,MAAM;MAC/B,IAAI,CAACE,KAAK,CAACK,iBAAiB,EAAE,OAAO,EAAE;MACvC;MACA,QAAQL,KAAK,CAACK,iBAAiB;QAC7B,KAAK,KAAK;QACV,KAAK,MAAM;UACT,OAAO,CACL;YAAEC,EAAE,EAAE,OAAO;YAAEC,KAAK,EAAE;UAAK,CAAC,EAC5B;YAAED,EAAE,EAAE,OAAO;YAAEC,KAAK,EAAE;UAAK,CAAC,EAC5B;YAAED,EAAE,EAAE,QAAQ;YAAEC,KAAK,EAAE;UAAU,CAAC,CACnC;QACH,KAAK,KAAK;UACR,OAAO,CACL;YAAED,EAAE,EAAE,MAAM;YAAEC,KAAK,EAAE;UAAK,CAAC,EAC3B;YAAED,EAAE,EAAE,OAAO;YAAEC,KAAK,EAAE;UAAI,CAAC,CAC5B;QACH;UACE,OAAO,CAAC;YAAED,EAAE,EAAE,MAAM;YAAEC,KAAK,EAAE;UAAK,CAAC,CAAC;MACxC;IACF,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGX,GAAG,CAAC,CAAC,CAAC,CAAC;IAE1BE,KAAK,CAAC,MAAMC,KAAK,CAACK,iBAAiB,EAAE,MAAM;MACzC;MACAG,UAAU,CAACC,KAAK,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,SAASC,MAAMA,CAACC,MAAM,EAAEC,KAAK,EAAE;MAC7B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CAAC;MACvET,UAAU,CAACC,KAAK,CAACE,MAAM,CAAC,GAAG;QACzBO,IAAI,EAAEL,IAAI,CAACM,QAAQ;QACnBC,MAAM,EAAEP,IAAI,CAACO;MACf,CAAC;MACDC,OAAO,CAACC,GAAG,CAAC,WAAWT,IAAI,CAACO,MAAM,SAASP,IAAI,CAACM,QAAQ,SAASR,MAAM,EAAE,CAAC;IAC5E;IAEA,SAASY,UAAUA,CAACZ,MAAM,EAAE;MAC1BH,UAAU,CAACC,KAAK,CAACE,MAAM,CAAC,GAAG,IAAI;IACjC;IAEA,MAAMa,WAAW,GAAG1B,QAAQ,CAAC,MAAM;MACjC;MACA,OAAOM,SAAS,CAACK,KAAK,CAACgB,IAAI,CAACC,IAAI,IAAIlB,UAAU,CAACC,KAAK,CAACiB,IAAI,CAACpB,EAAE,CAAC,IAAI,CAACoB,IAAI,CAACnB,KAAK,CAACoB,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9F,CAAC,CAAC;IAEF,SAASC,aAAaA,CAAA,EAAG;MACvB;MACA;MACAP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEd,UAAU,CAACC,KAAK,CAAC;MACvD;MACAP,IAAI,CAAC,cAAc,EAAE;QACnB2B,IAAI,EAAE7B,KAAK,CAACK,iBAAiB;QAC7ByB,OAAO,EAAEtB,UAAU,CAACC;MACtB,CAAC,CAAC;IACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}