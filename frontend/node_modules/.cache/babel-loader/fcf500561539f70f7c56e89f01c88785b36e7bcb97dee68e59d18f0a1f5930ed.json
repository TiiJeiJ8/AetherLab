{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * 图表配置管理器\n * 提供配置管理、验证、序列化等高级功能\n */\n\nimport { getChartConfig, validateChartConfiguration } from './chartConfigs.js';\nimport { inferDataType } from './dataTypes.js';\nexport class ChartConfigManager {\n  constructor() {\n    this.configs = new Map();\n    this.history = [];\n    this.currentVersion = 0;\n  }\n\n  // 创建新配置\n  createConfig(chartType, id = null) {\n    const configId = id || this.generateId();\n    const chartConfig = getChartConfig(chartType);\n    const config = {\n      id: configId,\n      chartType: chartType,\n      fieldMappings: {},\n      options: chartConfig.getDefaultConfig(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    };\n    this.configs.set(configId, config);\n    this.addToHistory('create', configId, null, config);\n    return config;\n  }\n\n  // 获取配置\n  getConfig(id) {\n    return this.configs.get(id);\n  }\n\n  // 更新配置\n  updateConfig(id, updates) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    const oldConfig = {\n      ...config\n    };\n    const newConfig = {\n      ...config,\n      ...updates,\n      version: config.version + 1,\n      modified: new Date().toISOString()\n    };\n    this.configs.set(id, newConfig);\n    this.addToHistory('update', id, oldConfig, newConfig);\n    return newConfig;\n  }\n\n  // 删除配置\n  deleteConfig(id) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    this.configs.delete(id);\n    this.addToHistory('delete', id, config, null);\n    return true;\n  }\n\n  // 复制配置\n  cloneConfig(id, newId = null) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    const clonedConfig = {\n      ...config,\n      id: newId || this.generateId(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    };\n    this.configs.set(clonedConfig.id, clonedConfig);\n    this.addToHistory('clone', clonedConfig.id, null, clonedConfig);\n    return clonedConfig;\n  }\n\n  // 验证配置\n  validateConfig(id) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    return validateChartConfiguration(config.chartType, config.fieldMappings, config.options);\n  }\n\n  // 自动字段映射\n  autoMapFields(id, columns) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    const chartConfig = getChartConfig(config.chartType);\n\n    // 推断列的数据类型\n    const processedColumns = columns.map(col => ({\n      ...col,\n      dataType: inferDataType(col.values || [])\n    }));\n\n    // 获取字段建议\n    const suggestions = chartConfig.getFieldSuggestions(processedColumns);\n\n    // 自动映射字段\n    const autoMappings = {};\n    Object.entries(suggestions).forEach(([fieldName, suggestion]) => {\n      if (suggestion.suggestions.length > 0) {\n        const bestSuggestion = suggestion.suggestions[0];\n        if (bestSuggestion.confidence > 0.7) {\n          autoMappings[fieldName] = {\n            field: bestSuggestion.column.name,\n            type: bestSuggestion.column.dataType\n          };\n        }\n      }\n    });\n\n    // 更新配置\n    this.updateConfig(id, {\n      fieldMappings: {\n        ...config.fieldMappings,\n        ...autoMappings\n      }\n    });\n    return autoMappings;\n  }\n\n  // 导出配置\n  exportConfig(id) {\n    const config = this.configs.get(id);\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`);\n    }\n    return {\n      ...config,\n      exportedAt: new Date().toISOString(),\n      version: config.version\n    };\n  }\n\n  // 导入配置\n  importConfig(configData) {\n    const config = {\n      ...configData,\n      id: configData.id || this.generateId(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    };\n    delete config.exportedAt;\n    this.configs.set(config.id, config);\n    this.addToHistory('import', config.id, null, config);\n    return config;\n  }\n\n  // 批量操作\n  batchUpdate(updates) {\n    const results = [];\n    updates.forEach(update => {\n      try {\n        const result = this.updateConfig(update.id, update.data);\n        results.push({\n          success: true,\n          id: update.id,\n          config: result\n        });\n      } catch (error) {\n        results.push({\n          success: false,\n          id: update.id,\n          error: error.message\n        });\n      }\n    });\n    return results;\n  }\n\n  // 搜索配置\n  searchConfigs(query) {\n    const results = [];\n    this.configs.forEach((config, id) => {\n      const searchText = `${config.chartType} ${JSON.stringify(config.options)}`.toLowerCase();\n      if (searchText.includes(query.toLowerCase())) {\n        results.push(config);\n      }\n    });\n    return results;\n  }\n\n  // 获取所有配置\n  getAllConfigs() {\n    return Array.from(this.configs.values());\n  }\n\n  // 获取配置统计\n  getStats() {\n    const stats = {\n      total: this.configs.size,\n      byType: {},\n      byDate: {},\n      averageComplexity: 0\n    };\n    this.configs.forEach(config => {\n      // 按类型统计\n      stats.byType[config.chartType] = (stats.byType[config.chartType] || 0) + 1;\n\n      // 按日期统计\n      const date = config.created.split('T')[0];\n      stats.byDate[date] = (stats.byDate[date] || 0) + 1;\n\n      // 复杂度统计\n      const complexity = this.calculateComplexity(config);\n      stats.averageComplexity += complexity;\n    });\n    stats.averageComplexity /= this.configs.size || 1;\n    return stats;\n  }\n\n  // 计算配置复杂度\n  calculateComplexity(config) {\n    let complexity = 0;\n\n    // 字段映射复杂度\n    complexity += Object.keys(config.fieldMappings).length * 10;\n\n    // 配置选项复杂度\n    complexity += Object.keys(config.options).length * 5;\n\n    // 特殊配置复杂度\n    if (config.options.showDataLabels) complexity += 5;\n    if (config.options.showTrendline) complexity += 10;\n    if (config.options.stack) complexity += 15;\n    return complexity;\n  }\n\n  // 获取历史记录\n  getHistory(limit = 50) {\n    return this.history.slice(-limit);\n  }\n\n  // 添加历史记录\n  addToHistory(action, id, oldValue, newValue) {\n    this.history.push({\n      version: ++this.currentVersion,\n      action,\n      id,\n      oldValue,\n      newValue,\n      timestamp: new Date().toISOString()\n    });\n\n    // 限制历史记录数量\n    if (this.history.length > 1000) {\n      this.history = this.history.slice(-500);\n    }\n  }\n\n  // 撤销操作\n  undo() {\n    if (this.history.length === 0) {\n      return false;\n    }\n    const lastAction = this.history[this.history.length - 1];\n    switch (lastAction.action) {\n      case 'create':\n        this.configs.delete(lastAction.id);\n        break;\n      case 'update':\n        this.configs.set(lastAction.id, lastAction.oldValue);\n        break;\n      case 'delete':\n        this.configs.set(lastAction.id, lastAction.oldValue);\n        break;\n      case 'clone':\n        this.configs.delete(lastAction.id);\n        break;\n    }\n    this.history.pop();\n    return true;\n  }\n\n  // 生成唯一ID\n  generateId() {\n    return 'chart_config_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  // 清空所有配置\n  clear() {\n    this.configs.clear();\n    this.history = [];\n    this.currentVersion = 0;\n  }\n\n  // 序列化为JSON\n  toJSON() {\n    return {\n      configs: Array.from(this.configs.entries()),\n      history: this.history,\n      currentVersion: this.currentVersion\n    };\n  }\n\n  // 从JSON反序列化\n  fromJSON(data) {\n    this.configs = new Map(data.configs);\n    this.history = data.history || [];\n    this.currentVersion = data.currentVersion || 0;\n  }\n}\n\n// 创建全局配置管理器实例\nexport const globalConfigManager = new ChartConfigManager();\n\n// 便利函数\nexport function createChartConfig(chartType, id = null) {\n  return globalConfigManager.createConfig(chartType, id);\n}\nexport function getChartConfiguration(id) {\n  return globalConfigManager.getConfig(id);\n}\nexport function updateChartConfiguration(id, updates) {\n  return globalConfigManager.updateConfig(id, updates);\n}\nexport function validateChartConfig(id) {\n  return globalConfigManager.validateConfig(id);\n}\nexport function autoMapFieldsForChart(id, columns) {\n  return globalConfigManager.autoMapFields(id, columns);\n}","map":{"version":3,"names":["getChartConfig","validateChartConfiguration","inferDataType","ChartConfigManager","constructor","configs","Map","history","currentVersion","createConfig","chartType","id","configId","generateId","chartConfig","config","fieldMappings","options","getDefaultConfig","version","created","Date","toISOString","modified","set","addToHistory","getConfig","get","updateConfig","updates","Error","oldConfig","newConfig","deleteConfig","delete","cloneConfig","newId","clonedConfig","validateConfig","autoMapFields","columns","processedColumns","map","col","dataType","values","suggestions","getFieldSuggestions","autoMappings","Object","entries","forEach","fieldName","suggestion","length","bestSuggestion","confidence","field","column","name","type","exportConfig","exportedAt","importConfig","configData","batchUpdate","results","update","result","data","push","success","error","message","searchConfigs","query","searchText","JSON","stringify","toLowerCase","includes","getAllConfigs","Array","from","getStats","stats","total","size","byType","byDate","averageComplexity","date","split","complexity","calculateComplexity","keys","showDataLabels","showTrendline","stack","getHistory","limit","slice","action","oldValue","newValue","timestamp","undo","lastAction","pop","now","Math","random","toString","substr","clear","toJSON","fromJSON","globalConfigManager","createChartConfig","getChartConfiguration","updateChartConfiguration","validateChartConfig","autoMapFieldsForChart"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/configs/configManager.js"],"sourcesContent":["/**\n * 图表配置管理器\n * 提供配置管理、验证、序列化等高级功能\n */\n\nimport { getChartConfig, validateChartConfiguration } from './chartConfigs.js'\nimport { inferDataType } from './dataTypes.js'\n\nexport class ChartConfigManager {\n  constructor () {\n    this.configs = new Map()\n    this.history = []\n    this.currentVersion = 0\n  }\n\n  // 创建新配置\n  createConfig (chartType, id = null) {\n    const configId = id || this.generateId()\n    const chartConfig = getChartConfig(chartType)\n\n    const config = {\n      id: configId,\n      chartType: chartType,\n      fieldMappings: {},\n      options: chartConfig.getDefaultConfig(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    }\n\n    this.configs.set(configId, config)\n    this.addToHistory('create', configId, null, config)\n\n    return config\n  }\n\n  // 获取配置\n  getConfig (id) {\n    return this.configs.get(id)\n  }\n\n  // 更新配置\n  updateConfig (id, updates) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    const oldConfig = { ...config }\n    const newConfig = {\n      ...config,\n      ...updates,\n      version: config.version + 1,\n      modified: new Date().toISOString()\n    }\n\n    this.configs.set(id, newConfig)\n    this.addToHistory('update', id, oldConfig, newConfig)\n\n    return newConfig\n  }\n\n  // 删除配置\n  deleteConfig (id) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    this.configs.delete(id)\n    this.addToHistory('delete', id, config, null)\n\n    return true\n  }\n\n  // 复制配置\n  cloneConfig (id, newId = null) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    const clonedConfig = {\n      ...config,\n      id: newId || this.generateId(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    }\n\n    this.configs.set(clonedConfig.id, clonedConfig)\n    this.addToHistory('clone', clonedConfig.id, null, clonedConfig)\n\n    return clonedConfig\n  }\n\n  // 验证配置\n  validateConfig (id) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    return validateChartConfiguration(config.chartType, config.fieldMappings, config.options)\n  }\n\n  // 自动字段映射\n  autoMapFields (id, columns) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    const chartConfig = getChartConfig(config.chartType)\n\n    // 推断列的数据类型\n    const processedColumns = columns.map(col => ({\n      ...col,\n      dataType: inferDataType(col.values || [])\n    }))\n\n    // 获取字段建议\n    const suggestions = chartConfig.getFieldSuggestions(processedColumns)\n\n    // 自动映射字段\n    const autoMappings = {}\n\n    Object.entries(suggestions).forEach(([fieldName, suggestion]) => {\n      if (suggestion.suggestions.length > 0) {\n        const bestSuggestion = suggestion.suggestions[0]\n        if (bestSuggestion.confidence > 0.7) {\n          autoMappings[fieldName] = {\n            field: bestSuggestion.column.name,\n            type: bestSuggestion.column.dataType\n          }\n        }\n      }\n    })\n\n    // 更新配置\n    this.updateConfig(id, {\n      fieldMappings: {\n        ...config.fieldMappings,\n        ...autoMappings\n      }\n    })\n\n    return autoMappings\n  }\n\n  // 导出配置\n  exportConfig (id) {\n    const config = this.configs.get(id)\n    if (!config) {\n      throw new Error(`Configuration with id ${id} not found`)\n    }\n\n    return {\n      ...config,\n      exportedAt: new Date().toISOString(),\n      version: config.version\n    }\n  }\n\n  // 导入配置\n  importConfig (configData) {\n    const config = {\n      ...configData,\n      id: configData.id || this.generateId(),\n      version: 1,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString()\n    }\n\n    delete config.exportedAt\n\n    this.configs.set(config.id, config)\n    this.addToHistory('import', config.id, null, config)\n\n    return config\n  }\n\n  // 批量操作\n  batchUpdate (updates) {\n    const results = []\n\n    updates.forEach(update => {\n      try {\n        const result = this.updateConfig(update.id, update.data)\n        results.push({ success: true, id: update.id, config: result })\n      } catch (error) {\n        results.push({ success: false, id: update.id, error: error.message })\n      }\n    })\n\n    return results\n  }\n\n  // 搜索配置\n  searchConfigs (query) {\n    const results = []\n\n    this.configs.forEach((config, id) => {\n      const searchText = `${config.chartType} ${JSON.stringify(config.options)}`.toLowerCase()\n      if (searchText.includes(query.toLowerCase())) {\n        results.push(config)\n      }\n    })\n\n    return results\n  }\n\n  // 获取所有配置\n  getAllConfigs () {\n    return Array.from(this.configs.values())\n  }\n\n  // 获取配置统计\n  getStats () {\n    const stats = {\n      total: this.configs.size,\n      byType: {},\n      byDate: {},\n      averageComplexity: 0\n    }\n\n    this.configs.forEach(config => {\n      // 按类型统计\n      stats.byType[config.chartType] = (stats.byType[config.chartType] || 0) + 1\n\n      // 按日期统计\n      const date = config.created.split('T')[0]\n      stats.byDate[date] = (stats.byDate[date] || 0) + 1\n\n      // 复杂度统计\n      const complexity = this.calculateComplexity(config)\n      stats.averageComplexity += complexity\n    })\n\n    stats.averageComplexity /= this.configs.size || 1\n\n    return stats\n  }\n\n  // 计算配置复杂度\n  calculateComplexity (config) {\n    let complexity = 0\n\n    // 字段映射复杂度\n    complexity += Object.keys(config.fieldMappings).length * 10\n\n    // 配置选项复杂度\n    complexity += Object.keys(config.options).length * 5\n\n    // 特殊配置复杂度\n    if (config.options.showDataLabels) complexity += 5\n    if (config.options.showTrendline) complexity += 10\n    if (config.options.stack) complexity += 15\n\n    return complexity\n  }\n\n  // 获取历史记录\n  getHistory (limit = 50) {\n    return this.history.slice(-limit)\n  }\n\n  // 添加历史记录\n  addToHistory (action, id, oldValue, newValue) {\n    this.history.push({\n      version: ++this.currentVersion,\n      action,\n      id,\n      oldValue,\n      newValue,\n      timestamp: new Date().toISOString()\n    })\n\n    // 限制历史记录数量\n    if (this.history.length > 1000) {\n      this.history = this.history.slice(-500)\n    }\n  }\n\n  // 撤销操作\n  undo () {\n    if (this.history.length === 0) {\n      return false\n    }\n\n    const lastAction = this.history[this.history.length - 1]\n\n    switch (lastAction.action) {\n      case 'create':\n        this.configs.delete(lastAction.id)\n        break\n      case 'update':\n        this.configs.set(lastAction.id, lastAction.oldValue)\n        break\n      case 'delete':\n        this.configs.set(lastAction.id, lastAction.oldValue)\n        break\n      case 'clone':\n        this.configs.delete(lastAction.id)\n        break\n    }\n\n    this.history.pop()\n    return true\n  }\n\n  // 生成唯一ID\n  generateId () {\n    return 'chart_config_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)\n  }\n\n  // 清空所有配置\n  clear () {\n    this.configs.clear()\n    this.history = []\n    this.currentVersion = 0\n  }\n\n  // 序列化为JSON\n  toJSON () {\n    return {\n      configs: Array.from(this.configs.entries()),\n      history: this.history,\n      currentVersion: this.currentVersion\n    }\n  }\n\n  // 从JSON反序列化\n  fromJSON (data) {\n    this.configs = new Map(data.configs)\n    this.history = data.history || []\n    this.currentVersion = data.currentVersion || 0\n  }\n}\n\n// 创建全局配置管理器实例\nexport const globalConfigManager = new ChartConfigManager()\n\n// 便利函数\nexport function createChartConfig (chartType, id = null) {\n  return globalConfigManager.createConfig(chartType, id)\n}\n\nexport function getChartConfiguration (id) {\n  return globalConfigManager.getConfig(id)\n}\n\nexport function updateChartConfiguration (id, updates) {\n  return globalConfigManager.updateConfig(id, updates)\n}\n\nexport function validateChartConfig (id) {\n  return globalConfigManager.validateConfig(id)\n}\n\nexport function autoMapFieldsForChart (id, columns) {\n  return globalConfigManager.autoMapFields(id, columns)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}