{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// utils/mappingValidator.js\n// 用于校验拖拽映射时的数据列维度和业务规则\n\n/**eslint-disable\n\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file, length }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String }\n */\nexport function validateMappingDimension({\n  column,\n  target,\n  currentConfig,\n  fileDataMap,\n  chartType\n}) {\n  // 获取当前X、Y轴已选字段的行数\n  function getFieldLength(fieldObj) {\n    if (!fieldObj || !fieldObj.field || !fieldObj.file) return 0;\n    const fileRows = fileDataMap[fieldObj.file] || [];\n    return fileRows.length;\n  }\n\n  // 取当前映射的X、Y轴（支持多选）\n  const xAxis = currentConfig.xAxis;\n  const yAxis = currentConfig.yAxis;\n  let xLen = 0,\n    yLen = 0;\n  if (Array.isArray(xAxis)) {\n    xLen = Math.max(...xAxis.map(getFieldLength), 0);\n  } else {\n    xLen = getFieldLength(xAxis);\n  }\n  if (Array.isArray(yAxis)) {\n    yLen = Math.max(...yAxis.map(getFieldLength), 0);\n  } else {\n    yLen = getFieldLength(yAxis);\n  }\n\n  // 拖入的列的行数\n  const dragLen = column.length || 0;\n\n  // 针对不同图表类型和目标区，制定规则\n  if (target === 'xAxis') {\n    // X轴要求：行数 >= Y轴\n    if (yLen > 0 && dragLen < yLen) {\n      return {\n        valid: false,\n        message: 'X轴数据行数不能小于Y轴'\n      };\n    }\n  }\n  if (target === 'yAxis') {\n    // Y轴要求：行数 <= X轴\n    if (xLen > 0 && dragLen > xLen) {\n      return {\n        valid: false,\n        message: 'Y轴数据行数不能大于X轴'\n      };\n    }\n  }\n  // 其他图表类型可扩展\n  // if (chartType === 'pie') {...}\n\n  // 通过\n  return {\n    valid: true,\n    message: ''\n  };\n}","map":{"version":3,"names":["validateMappingDimension","column","target","currentConfig","fileDataMap","chartType","getFieldLength","fieldObj","field","file","fileRows","length","xAxis","yAxis","xLen","yLen","Array","isArray","Math","max","map","dragLen","valid","message"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/utils/mappingValidator.js"],"sourcesContent":["// utils/mappingValidator.js\n// 用于校验拖拽映射时的数据列维度和业务规则\n\n/**eslint-disable\n\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file, length }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String }\n */\nexport function validateMappingDimension({ column, target, currentConfig, fileDataMap, chartType }) {\n    // 获取当前X、Y轴已选字段的行数\n    function getFieldLength(fieldObj) {\n        if (!fieldObj || !fieldObj.field || !fieldObj.file) return 0;\n        const fileRows = fileDataMap[fieldObj.file] || [];\n        return fileRows.length;\n    }\n\n    // 取当前映射的X、Y轴（支持多选）\n    const xAxis = currentConfig.xAxis;\n    const yAxis = currentConfig.yAxis;\n    let xLen = 0, yLen = 0;\n    if (Array.isArray(xAxis)) {\n        xLen = Math.max(...xAxis.map(getFieldLength), 0);\n    } else {\n        xLen = getFieldLength(xAxis);\n    }\n    if (Array.isArray(yAxis)) {\n        yLen = Math.max(...yAxis.map(getFieldLength), 0);\n    } else {\n        yLen = getFieldLength(yAxis);\n    }\n\n    // 拖入的列的行数\n    const dragLen = column.length || 0;\n\n    // 针对不同图表类型和目标区，制定规则\n    if (target === 'xAxis') {\n        // X轴要求：行数 >= Y轴\n        if (yLen > 0 && dragLen < yLen) {\n            return { valid: false, message: 'X轴数据行数不能小于Y轴' };\n        }\n    }\n    if (target === 'yAxis') {\n        // Y轴要求：行数 <= X轴\n        if (xLen > 0 && dragLen > xLen) {\n            return { valid: false, message: 'Y轴数据行数不能大于X轴' };\n        }\n    }\n    // 其他图表类型可扩展\n    // if (chartType === 'pie') {...}\n\n    // 通过\n    return { valid: true, message: '' };\n}\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,wBAAwBA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC,aAAa;EAAEC,WAAW;EAAEC;AAAU,CAAC,EAAE;EAChG;EACA,SAASC,cAAcA,CAACC,QAAQ,EAAE;IAC9B,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAAK,IAAI,CAACD,QAAQ,CAACE,IAAI,EAAE,OAAO,CAAC;IAC5D,MAAMC,QAAQ,GAAGN,WAAW,CAACG,QAAQ,CAACE,IAAI,CAAC,IAAI,EAAE;IACjD,OAAOC,QAAQ,CAACC,MAAM;EAC1B;;EAEA;EACA,MAAMC,KAAK,GAAGT,aAAa,CAACS,KAAK;EACjC,MAAMC,KAAK,GAAGV,aAAa,CAACU,KAAK;EACjC,IAAIC,IAAI,GAAG,CAAC;IAAEC,IAAI,GAAG,CAAC;EACtB,IAAIC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;IACtBE,IAAI,GAAGI,IAAI,CAACC,GAAG,CAAC,GAAGP,KAAK,CAACQ,GAAG,CAACd,cAAc,CAAC,EAAE,CAAC,CAAC;EACpD,CAAC,MAAM;IACHQ,IAAI,GAAGR,cAAc,CAACM,KAAK,CAAC;EAChC;EACA,IAAII,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;IACtBE,IAAI,GAAGG,IAAI,CAACC,GAAG,CAAC,GAAGN,KAAK,CAACO,GAAG,CAACd,cAAc,CAAC,EAAE,CAAC,CAAC;EACpD,CAAC,MAAM;IACHS,IAAI,GAAGT,cAAc,CAACO,KAAK,CAAC;EAChC;;EAEA;EACA,MAAMQ,OAAO,GAAGpB,MAAM,CAACU,MAAM,IAAI,CAAC;;EAElC;EACA,IAAIT,MAAM,KAAK,OAAO,EAAE;IACpB;IACA,IAAIa,IAAI,GAAG,CAAC,IAAIM,OAAO,GAAGN,IAAI,EAAE;MAC5B,OAAO;QAAEO,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IACpD;EACJ;EACA,IAAIrB,MAAM,KAAK,OAAO,EAAE;IACpB;IACA,IAAIY,IAAI,GAAG,CAAC,IAAIO,OAAO,GAAGP,IAAI,EAAE;MAC5B,OAAO;QAAEQ,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IACpD;EACJ;EACA;EACA;;EAEA;EACA,OAAO;IAAED,KAAK,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAG,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}