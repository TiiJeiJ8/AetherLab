{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* eslint-disable */\n\n/**\n * 高级配置项：\n * 树状图朝向 orient\n * 树状图显示样式 layout\n * 树状图多树排列形式 left, right, top, bottom\n * 曲线度 curveness\n * 线宽 lineWidth\n * 节点间距 nodeGap\n * 节点原点半径 symbolSize\n * 折线分叉位置 edgeForkPosition\n * 连线形状 edgeShape\n * 默认展开层级 initialTreeDepth\n */\n\n// 树状图生成器\nexport default function treeOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n  console.log('[TreeOption Gen] seriesData: ', seriesData);\n  return {\n    toolbox: {\n      show: true,\n      feature: {\n        dataView: {\n          show: true,\n          readOnly: false\n        },\n        restore: {\n          show: true\n        },\n        saveAsImage: {\n          show: true\n        }\n      }\n    },\n    tooltip: {\n      trigger: 'item',\n      triggerOn: 'mousemove',\n      formatter: function (params) {\n        // 支持显示 value\n        if (params.data.value !== undefined && params.data.value !== null) {\n          return `${params.data.name} : ${params.data.value}`;\n        }\n        return params.data.name;\n      }\n    },\n    // 判断是否有多棵树\n    series: Array.isArray(seriesData) ? seriesData.map((tree, idx, arr) => {\n      const n = arr.length;\n      let left = config.left || '10%';\n      let right = config.right || '10%';\n      let top = config.top || '10%';\n      let bottom = config.bottom || '10%';\n      // 设置多树排列位置\n      if (config.position_tree === 'left and right') {\n        // 横向均分 left/right\n        left = `${idx * 100 / n + 5}%`;\n        right = `${(n - idx - 1) * 100 / n + 5}%`;\n        top = '10%';\n        bottom = '10%';\n      } else if (config.position_tree === 'top and bottom') {\n        // 纵向均分 top/bottom\n        left = '10%';\n        right = '10%';\n        top = `${idx * 100 / n + 5}%`;\n        bottom = `${(n - idx - 1) * 100 / n + 5}%`;\n      } else {\n        // 默认均分 left/right\n        left = `${idx * 100 / n + 5}%`;\n        right = `${(n - idx - 1) * 100 / n + 5}%`;\n        top = '10%';\n        bottom = '10%';\n      }\n      return {\n        type: 'tree',\n        data: [tree],\n        orient: config.orient || 'BT',\n        // LR, RL, TB, BT\n        /**\n         * orthogonal: 直角布局, radial: 径向布局\n         * orthogonal 布局时, orient 只支持 LR, RL\n         * radial 布局时, orient 只支持 TB, BT\n         * 直角布局时，节点间距会更大一些\n         * 径向布局时，节点间距会更小一些\n         */\n        layout: config.layout || 'radial',\n        // orthogonal, radial\n        top,\n        left,\n        bottom,\n        right,\n        symbolSize: config.symbolSize || 9,\n        // 节点原点半径\n        label: {\n          position: 'right',\n          verticalAlign: 'middle',\n          align: 'right',\n          fontSize: 12,\n          overflow: 'break',\n          // 标签自动换行\n          ellipsis: true // 标签超出部分省略号\n        },\n        leaves: {\n          label: {\n            position: 'right',\n            verticalAlign: 'middle',\n            align: 'left',\n            overflow: 'break',\n            ellipsis: true\n          }\n        },\n        lineStyle: {\n          width: config.width || 1,\n          // 线宽\n          curveness: config.curveness || 0.3 // 曲线度\n        },\n        emphasis: {\n          focus: 'descendant'\n        },\n        symbolSize: config.symbolSize || 7,\n        edgeShape: config.edgeShape || 'curve',\n        // curve, polyline\n        edgeForkPosition: config.edgeForkPosition || '50%',\n        // 折线分叉位置\n        initialTreeDepth: config.initialTreeDepth || 3,\n        expandAndCollapse: true,\n        // 是否允许展开和折叠\n        roam: true,\n        animationDuration: 500,\n        animationDurationUpdate: 700\n      };\n    }) : [{\n      type: 'tree',\n      data: seriesData,\n      orient: config.orient || 'LR',\n      // LR, RL, TB, BT\n      /**\n       * orthogonal: 直角布局, radial: 径向布局\n       * orthogonal 布局时, orient 只支持 LR, RL\n       * radial 布局时, orient 只支持 TB, BT\n       * 直角布局时，节点间距会更大一些\n       * 径向布局时，节点间距会更小一些\n       */\n      layout: config.layout || 'orthogonal',\n      // orthogonal, radial\n      top: config.top || '10%',\n      left: config.left || '10%',\n      bottom: config.bottom || '10%',\n      right: config.right || '10%',\n      symbolSize: config.symbolSize || 9,\n      label: {\n        position: 'right',\n        verticalAlign: 'middle',\n        align: 'right',\n        fontSize: 12,\n        overflow: 'break',\n        ellipsis: true\n      },\n      leaves: {\n        label: {\n          position: 'right',\n          verticalAlign: 'middle',\n          align: 'left',\n          overflow: 'break',\n          ellipsis: true\n        }\n      },\n      emphasis: {\n        focus: 'descendant'\n      },\n      symbolSize: config.symbolSize || 7,\n      edgeShape: config.edgeShape || 'curve',\n      // curve, polyline\n      edgeForkPosition: config.edgeForkPosition || '50%',\n      // 折线分叉位置\n      initialTreeDepth: config.initialTreeDepth || 2,\n      expandAndCollapse: true,\n      // 是否允许展开和折叠\n      roam: true,\n      animationDuration: 500,\n      animationDurationUpdate: 700\n    }],\n    ...customOption\n  };\n}","map":{"version":3,"names":["treeOption","config","fileDataMap","xData","yDataArr","selectedChartType","seriesData","customOption","console","log","toolbox","show","feature","dataView","readOnly","restore","saveAsImage","tooltip","trigger","triggerOn","formatter","params","data","value","undefined","name","series","Array","isArray","map","tree","idx","arr","n","length","left","right","top","bottom","position_tree","type","orient","layout","symbolSize","label","position","verticalAlign","align","fontSize","overflow","ellipsis","leaves","lineStyle","width","curveness","emphasis","focus","edgeShape","edgeForkPosition","initialTreeDepth","expandAndCollapse","roam","animationDuration","animationDurationUpdate"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/chartOptions/tree.js"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 高级配置项：\n * 树状图朝向 orient\n * 树状图显示样式 layout\n * 树状图多树排列形式 left, right, top, bottom\n * 曲线度 curveness\n * 线宽 lineWidth\n * 节点间距 nodeGap\n * 节点原点半径 symbolSize\n * 折线分叉位置 edgeForkPosition\n * 连线形状 edgeShape\n * 默认展开层级 initialTreeDepth\n */\n\n// 树状图生成器\nexport default function treeOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n    console.log('[TreeOption Gen] seriesData: ', seriesData);\n\n    return {\n        toolbox: {\n            show: true,\n            feature: {\n                dataView: { show: true, readOnly: false },\n                restore: { show: true },\n                saveAsImage: { show: true },\n            }\n        },\n        tooltip: {\n            trigger: 'item',\n            triggerOn: 'mousemove',\n            formatter: function (params) {\n                // 支持显示 value\n                if (params.data.value !== undefined && params.data.value !== null) {\n                    return `${params.data.name} : ${params.data.value}`;\n                }\n                return params.data.name;\n            }\n        },\n        // 判断是否有多棵树\n        series: Array.isArray(seriesData)\n            ? seriesData.map((tree, idx, arr) => {\n                const n = arr.length;\n\n                let left = config.left || '10%';\n                let right = config.right || '10%';\n                let top = config.top || '10%';\n                let bottom = config.bottom || '10%';\n                // 设置多树排列位置\n                if (config.position_tree === 'left and right') {\n                    // 横向均分 left/right\n                    left = `${(idx * 100 / n + 5)}%`;\n                    right = `${((n - idx - 1) * 100 / n + 5)}%`;\n                    top = '10%';\n                    bottom = '10%';\n                }\n                else if (config.position_tree === 'top and bottom') {\n                    // 纵向均分 top/bottom\n                    left = '10%';\n                    right = '10%';\n                    top = `${(idx * 100 / n + 5)}%`;\n                    bottom = `${((n - idx - 1) * 100 / n + 5)}%`;\n                } else {\n                    // 默认均分 left/right\n                    left = `${(idx * 100 / n + 5)}%`;\n                    right = `${((n - idx - 1) * 100 / n + 5)}%`;\n                    top = '10%';\n                    bottom = '10%';\n                }\n\n                return {\n                    type: 'tree',\n                    data: [tree],\n                    orient: config.orient || 'BT', // LR, RL, TB, BT\n                    /**\n                     * orthogonal: 直角布局, radial: 径向布局\n                     * orthogonal 布局时, orient 只支持 LR, RL\n                     * radial 布局时, orient 只支持 TB, BT\n                     * 直角布局时，节点间距会更大一些\n                     * 径向布局时，节点间距会更小一些\n                     */\n                    layout: config.layout || 'radial', // orthogonal, radial\n                    top,\n                    left,\n                    bottom,\n                    right,\n                    symbolSize: config.symbolSize || 9, // 节点原点半径\n                    label: {\n                        position: 'right',\n                        verticalAlign: 'middle',\n                        align: 'right',\n                        fontSize: 12,\n                        overflow: 'break', // 标签自动换行\n                        ellipsis: true // 标签超出部分省略号\n                    },\n                    leaves: {\n                        label: {\n                            position: 'right',\n                            verticalAlign: 'middle',\n                            align: 'left',\n                            overflow: 'break',\n                            ellipsis: true\n                        }\n                    },\n                    lineStyle: {\n                        width: config.width || 1, // 线宽\n                        curveness: config.curveness || 0.3 // 曲线度\n                    },\n                    emphasis: {\n                        focus: 'descendant'\n                    },\n                    symbolSize: config.symbolSize || 7,\n                    edgeShape: config.edgeShape || 'curve', // curve, polyline\n                    edgeForkPosition: config.edgeForkPosition || '50%', // 折线分叉位置\n                    initialTreeDepth: config.initialTreeDepth || 3,\n                    expandAndCollapse: true, // 是否允许展开和折叠\n                    roam: true,\n                    animationDuration: 500,\n                    animationDurationUpdate: 700,\n                };\n            })\n            : [\n                {\n                    type: 'tree',\n                    data: seriesData,\n                    orient: config.orient || 'LR', // LR, RL, TB, BT\n                    /**\n                     * orthogonal: 直角布局, radial: 径向布局\n                     * orthogonal 布局时, orient 只支持 LR, RL\n                     * radial 布局时, orient 只支持 TB, BT\n                     * 直角布局时，节点间距会更大一些\n                     * 径向布局时，节点间距会更小一些\n                     */\n                    layout: config.layout || 'orthogonal', // orthogonal, radial\n                    top: config.top || '10%',\n                    left: config.left || '10%',\n                    bottom: config.bottom || '10%',\n                    right: config.right || '10%',\n                    symbolSize: config.symbolSize || 9,\n                    label: {\n                        position: 'right',\n                        verticalAlign: 'middle',\n                        align: 'right',\n                        fontSize: 12,\n                        overflow: 'break',\n                        ellipsis: true\n                    },\n                    leaves: {\n                        label: {\n                            position: 'right',\n                            verticalAlign: 'middle',\n                            align: 'left',\n                            overflow: 'break',\n                            ellipsis: true\n                        }\n                    },\n                    emphasis: {\n                        focus: 'descendant'\n                    },\n                    symbolSize: config.symbolSize || 7,\n                    edgeShape: config.edgeShape || 'curve', // curve, polyline\n                    edgeForkPosition: config.edgeForkPosition || '50%', // 折线分叉位置\n                    initialTreeDepth: config.initialTreeDepth || 2,\n                    expandAndCollapse: true, // 是否允许展开和折叠\n                    roam: true,\n                    animationDuration: 500,\n                    animationDurationUpdate: 700,\n                }\n            ],\n        ...customOption,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}