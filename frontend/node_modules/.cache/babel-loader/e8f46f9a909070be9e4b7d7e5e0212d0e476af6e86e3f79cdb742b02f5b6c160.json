{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/* eslint-disable */\n/**\n * 拖拽工具函数模块\n * 提供拖拽功能的复用工具函数\n */\n\n/**\n * 创建拖拽事件处理器\n * @param {Object} options - 配置选项\n * @param {Function} options.onDragStart - 拖拽开始回调\n * @param {Function} options.onDragEnd - 拖拽结束回调\n * @param {Function} options.onDrop - 拖拽释放回调\n * @param {Function} options.onDragOver - 拖拽经过回调\n * @param {Function} options.onDragLeave - 拖拽离开回调\n * @returns {Object} 事件处理器对象\n */\nexport function createDragHandler(options = {}) {\n  const {\n    onDragStart = () => {},\n    onDragEnd = () => {},\n    onDrop = () => {},\n    onDragOver = () => {},\n    onDragLeave = () => {}\n  } = options;\n  return {\n    handleDragStart(event, data) {\n      event.dataTransfer.setData('text/plain', JSON.stringify(data));\n      event.dataTransfer.effectAllowed = 'copy';\n      onDragStart(event, data);\n    },\n    handleDragEnd(event, data) {\n      onDragEnd(event, data);\n    },\n    handleDrop(event) {\n      event.preventDefault();\n      try {\n        const data = JSON.parse(event.dataTransfer.getData('text/plain'));\n        onDrop(event, data);\n      } catch (error) {\n        console.error('拖拽数据解析失败:', error);\n      }\n    },\n    handleDragOver(event) {\n      event.preventDefault();\n      onDragOver(event);\n    },\n    handleDragLeave(event) {\n      onDragLeave(event);\n    }\n  };\n}\n\n/**\n * 创建拖拽区域管理器\n * @param {Array} areas - 拖拽区域配置数组\n * @param {Function} onAreaChange - 区域变化回调\n * @returns {Object} 拖拽区域管理器\n */\nexport function createDragAreaManager(areas = [], onAreaChange = () => {}) {\n  const draggedItem = ref(null);\n  const dragOverArea = ref(null);\n  const setDraggedItem = item => {\n    draggedItem.value = item;\n  };\n  const setDragOverArea = areaKey => {\n    dragOverArea.value = areaKey;\n  };\n  const clearDragState = () => {\n    draggedItem.value = null;\n    dragOverArea.value = null;\n  };\n  const addItemToArea = (areaKey, item) => {\n    const area = areas.find(a => a.key === areaKey);\n    if (!area) return false;\n\n    // 检查是否已存在\n    const exists = area.items.some(existingItem => existingItem.id === item.id);\n    if (exists) return false;\n    if (area.multiple) {\n      area.items.push(item);\n    } else {\n      area.items = [item];\n    }\n    onAreaChange(areaKey, area.items);\n    return true;\n  };\n  const removeItemFromArea = (areaKey, itemIndex) => {\n    const area = areas.find(a => a.key === areaKey);\n    if (!area) return false;\n    area.items.splice(itemIndex, 1);\n    onAreaChange(areaKey, area.items);\n    return true;\n  };\n  const clearArea = areaKey => {\n    const area = areas.find(a => a.key === areaKey);\n    if (!area) return false;\n    area.items = [];\n    onAreaChange(areaKey, area.items);\n    return true;\n  };\n  const clearAllAreas = () => {\n    areas.forEach(area => {\n      area.items = [];\n      onAreaChange(area.key, area.items);\n    });\n  };\n  return {\n    draggedItem: readonly(draggedItem),\n    dragOverArea: readonly(dragOverArea),\n    setDraggedItem,\n    setDragOverArea,\n    clearDragState,\n    addItemToArea,\n    removeItemFromArea,\n    clearArea,\n    clearAllAreas\n  };\n}\n\n/**\n * 创建数据映射验证器\n * @param {Object} chartConfig - 图表配置\n * @returns {Object} 验证器对象\n */\nexport function createMappingValidator(chartConfig) {\n  const validateMapping = (mappings, areas) => {\n    const errors = [];\n\n    // 检查必需字段\n    const requiredAreas = areas.filter(area => area.required);\n    requiredAreas.forEach(area => {\n      if (!mappings[area.key] || mappings[area.key].length === 0) {\n        errors.push({\n          area: area.key,\n          message: `${area.label} 是必需的`\n        });\n      }\n    });\n\n    // 检查数据类型兼容性\n    areas.forEach(area => {\n      const mapping = mappings[area.key];\n      if (mapping && mapping.length > 0) {\n        mapping.forEach(item => {\n          if (!isDataTypeCompatible(item.columnType, area.type)) {\n            errors.push({\n              area: area.key,\n              message: `${item.columnName} 的数据类型 ${item.columnType} 与 ${area.label} 不兼容`\n            });\n          }\n        });\n      }\n    });\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n  const isDataTypeCompatible = (columnType, areaType) => {\n    const compatibilityMap = {\n      'category': ['text', 'date'],\n      'value': ['numeric'],\n      'any': ['text', 'numeric', 'date']\n    };\n    return compatibilityMap[areaType]?.includes(columnType) || false;\n  };\n  return {\n    validateMapping,\n    isDataTypeCompatible\n  };\n}\n\n/**\n * 创建数据过滤器\n * @param {Array} data - 原始数据\n * @param {Object} filterConfig - 过滤配置\n * @returns {Array} 过滤后的数据\n */\nexport function createDataFilter(data, filterConfig) {\n  if (!data || data.length === 0) return data;\n  switch (filterConfig.mode) {\n    case 'all':\n      return data;\n    case 'range':\n      const {\n        start,\n        end\n      } = filterConfig.range;\n      return data.slice(start - 1, end);\n    case 'condition':\n      return filterByConditions(data, filterConfig.conditions);\n    default:\n      return data;\n  }\n}\n\n/**\n * 根据条件过滤数据\n * @param {Array} data - 原始数据\n * @param {Array} conditions - 过滤条件\n * @returns {Array} 过滤后的数据\n */\nfunction filterByConditions(data, conditions) {\n  if (!conditions || conditions.length === 0) return data;\n  return data.filter(row => {\n    return conditions.every(condition => {\n      const {\n        column,\n        operator,\n        value\n      } = condition;\n      const cellValue = row[column];\n      switch (operator) {\n        case 'equals':\n          return cellValue == value;\n        case 'not_equals':\n          return cellValue != value;\n        case 'greater':\n          return Number(cellValue) > Number(value);\n        case 'less':\n          return Number(cellValue) < Number(value);\n        case 'contains':\n          return String(cellValue).includes(String(value));\n        case 'not_contains':\n          return !String(cellValue).includes(String(value));\n        default:\n          return true;\n      }\n    });\n  });\n}\n\n/**\n * 创建临时数据集\n * @param {Array} files - 文件数组\n * @param {Object} mappings - 数据映射配置\n * @param {Object} filterConfig - 过滤配置\n * @returns {Array} 临时数据集\n */\nexport function createTempDataset(files, mappings, filterConfig) {\n  console.log('createTempDataset called with:', {\n    files: files.length,\n    mappings,\n    filterConfig\n  });\n  const tempData = [];\n  const columnMap = new Map();\n\n  // 收集所有需要的列数据\n  Object.entries(mappings).forEach(([areaKey, areaMappings]) => {\n    console.log(`Processing area: ${areaKey}`, areaMappings);\n    if (areaMappings && areaMappings.length > 0) {\n      areaMappings.forEach(mapping => {\n        const file = files.find(f => f.id === mapping.fileId);\n        console.log(`Looking for file ${mapping.fileId}, found:`, !!file);\n        if (file && file.previewData) {\n          const columnData = file.previewData.map(row => row[mapping.columnName]);\n          const columnKey = `${areaKey}_${mapping.columnName}`;\n          console.log(`Column ${columnKey} data sample:`, columnData.slice(0, 3));\n          columnMap.set(columnKey, {\n            data: columnData,\n            mapping,\n            areaKey\n          });\n        }\n      });\n    }\n  });\n  console.log('Column map size:', columnMap.size);\n  console.log('Column map keys:', Array.from(columnMap.keys()));\n\n  // 构建临时数据集\n  if (columnMap.size > 0) {\n    const maxLength = Math.max(...Array.from(columnMap.values()).map(col => col.data.length));\n    console.log('Max data length:', maxLength);\n    for (let i = 0; i < maxLength; i++) {\n      const row = {};\n      columnMap.forEach((columnInfo, key) => {\n        row[key] = columnInfo.data[i] || null;\n      });\n      tempData.push(row);\n    }\n  }\n  console.log('Temp data created:', tempData.length, 'rows');\n  console.log('Temp data sample:', tempData.slice(0, 3));\n\n  // 应用过滤\n  return createDataFilter(tempData, filterConfig);\n}\n\n/**\n * 图表配置转换器\n * @param {Object} mappingConfig - 映射配置\n * @param {Array} tempData - 临时数据集\n * @param {String} chartType - 图表类型\n * @returns {Object} ECharts 配置对象\n */\nexport function convertToChartConfig(mappingConfig, tempData, chartType) {\n  console.log('convertToChartConfig called with:', {\n    mappingConfig,\n    tempData: tempData.length,\n    chartType\n  });\n  const {\n    basicConfig,\n    advancedConfig\n  } = mappingConfig;\n  const chartConverters = {\n    'Line Chart': convertToLineChart,\n    'Bar Chart': convertToBarChart,\n    'Pie Chart': convertToPieChart,\n    'Scatter Plot': convertToScatterChart\n  };\n  const converter = chartConverters[chartType] || chartConverters['Line Chart'];\n  const result = converter(basicConfig, advancedConfig, tempData);\n  console.log('Chart config result:', result);\n  return result;\n}\n\n/**\n * 转换为折线图配置\n */\nfunction convertToLineChart(basicConfig, advancedConfig, data) {\n  console.log('convertToLineChart called with:', {\n    basicConfig,\n    advancedConfig,\n    data: data.length\n  });\n\n  // 获取 X 轴数据\n  const xMapping = basicConfig.x?.[0];\n  const xData = xMapping ? data.map(row => row[`x_${xMapping.columnName}`]) : [];\n\n  // 获取 Y 轴数据\n  const yMapping = basicConfig.y?.[0];\n  const yData = yMapping ? data.map(row => row[`y_${yMapping.columnName}`]) : [];\n  console.log('X data sample:', xData.slice(0, 5));\n  console.log('Y data sample:', yData.slice(0, 5));\n\n  // 处理多个数据系列\n  const series = [];\n  if (basicConfig.series && basicConfig.series.length > 0) {\n    // 如果有配置数据系列\n    basicConfig.series.forEach((seriesMapping, index) => {\n      const seriesData = data.map(row => row[`series_${seriesMapping.columnName}`]);\n      series.push({\n        name: seriesMapping.columnName,\n        type: 'line',\n        data: seriesData\n      });\n    });\n  } else if (yData.length > 0) {\n    // 如果没有配置数据系列，使用 Y 轴数据\n    series.push({\n      name: yMapping?.columnName || '数据系列',\n      type: 'line',\n      data: yData\n    });\n  }\n  console.log('Series data:', series);\n  return {\n    title: {\n      text: '折线图',\n      left: 'center'\n    },\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      data: series.map(s => s.name),\n      top: 30\n    },\n    xAxis: {\n      type: 'category',\n      data: xData\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: series\n  };\n}\n\n/**\n * 转换为柱状图配置\n */\nfunction convertToBarChart(basicConfig, advancedConfig, data) {\n  const xData = basicConfig.x?.[0] ? data.map(row => row[`x_${basicConfig.x[0].columnName}`]) : [];\n  const yData = basicConfig.y?.[0] ? data.map(row => row[`y_${basicConfig.y[0].columnName}`]) : [];\n  return {\n    title: {\n      text: '柱状图',\n      left: 'center'\n    },\n    tooltip: {\n      trigger: 'axis'\n    },\n    legend: {\n      data: ['数据系列'],\n      top: 30\n    },\n    xAxis: {\n      type: 'category',\n      data: xData\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [{\n      name: '数据系列',\n      type: 'bar',\n      data: yData\n    }]\n  };\n}\n\n/**\n * 转换为饼图配置\n */\nfunction convertToPieChart(basicConfig, advancedConfig, data) {\n  const categoryData = basicConfig.category?.[0] ? data.map(row => row[`category_${basicConfig.category[0].columnName}`]) : [];\n  const valueData = basicConfig.value?.[0] ? data.map(row => row[`value_${basicConfig.value[0].columnName}`]) : [];\n  const pieData = categoryData.map((name, index) => ({\n    name,\n    value: valueData[index] || 0\n  }));\n  return {\n    title: {\n      text: '饼图',\n      left: 'center'\n    },\n    tooltip: {\n      trigger: 'item'\n    },\n    legend: {\n      orient: 'vertical',\n      left: 'left'\n    },\n    series: [{\n      name: '数据',\n      type: 'pie',\n      radius: '50%',\n      data: pieData,\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }]\n  };\n}\n\n/**\n * 转换为散点图配置\n */\nfunction convertToScatterChart(basicConfig, advancedConfig, data) {\n  const xData = basicConfig.x?.[0] ? data.map(row => row[`x_${basicConfig.x[0].columnName}`]) : [];\n  const yData = basicConfig.y?.[0] ? data.map(row => row[`y_${basicConfig.y[0].columnName}`]) : [];\n  const scatterData = xData.map((x, index) => [x, yData[index]]);\n  return {\n    title: {\n      text: '散点图',\n      left: 'center'\n    },\n    tooltip: {\n      trigger: 'item'\n    },\n    xAxis: {\n      type: 'value'\n    },\n    yAxis: {\n      type: 'value'\n    },\n    series: [{\n      name: '数据点',\n      type: 'scatter',\n      data: scatterData\n    }]\n  };\n}\n\n// 导入 Vue 3 的 ref 和 readonly\nimport { ref, readonly } from 'vue';","map":{"version":3,"names":["createDragHandler","options","onDragStart","onDragEnd","onDrop","onDragOver","onDragLeave","handleDragStart","event","data","dataTransfer","setData","JSON","stringify","effectAllowed","handleDragEnd","handleDrop","preventDefault","parse","getData","error","console","handleDragOver","handleDragLeave","createDragAreaManager","areas","onAreaChange","draggedItem","ref","dragOverArea","setDraggedItem","item","value","setDragOverArea","areaKey","clearDragState","addItemToArea","area","find","a","key","exists","items","some","existingItem","id","multiple","push","removeItemFromArea","itemIndex","splice","clearArea","clearAllAreas","forEach","readonly","createMappingValidator","chartConfig","validateMapping","mappings","errors","requiredAreas","filter","required","length","message","label","mapping","isDataTypeCompatible","columnType","type","columnName","isValid","areaType","compatibilityMap","includes","createDataFilter","filterConfig","mode","start","end","range","slice","filterByConditions","conditions","row","every","condition","column","operator","cellValue","Number","String","createTempDataset","files","log","tempData","columnMap","Map","Object","entries","areaMappings","file","f","fileId","previewData","columnData","map","columnKey","set","size","Array","from","keys","maxLength","Math","max","values","col","i","columnInfo","convertToChartConfig","mappingConfig","chartType","basicConfig","advancedConfig","chartConverters","convertToLineChart","convertToBarChart","convertToPieChart","convertToScatterChart","converter","result","xMapping","x","xData","yMapping","y","yData","series","seriesMapping","index","seriesData","name","title","text","left","tooltip","trigger","legend","s","top","xAxis","yAxis","categoryData","category","valueData","pieData","orient","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","scatterData"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/utils/dragUtils.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 拖拽工具函数模块\n * 提供拖拽功能的复用工具函数\n */\n\n/**\n * 创建拖拽事件处理器\n * @param {Object} options - 配置选项\n * @param {Function} options.onDragStart - 拖拽开始回调\n * @param {Function} options.onDragEnd - 拖拽结束回调\n * @param {Function} options.onDrop - 拖拽释放回调\n * @param {Function} options.onDragOver - 拖拽经过回调\n * @param {Function} options.onDragLeave - 拖拽离开回调\n * @returns {Object} 事件处理器对象\n */\nexport function createDragHandler(options = {}) {\n    const {\n        onDragStart = () => { },\n        onDragEnd = () => { },\n        onDrop = () => { },\n        onDragOver = () => { },\n        onDragLeave = () => { }\n    } = options\n\n    return {\n        handleDragStart(event, data) {\n            event.dataTransfer.setData('text/plain', JSON.stringify(data))\n            event.dataTransfer.effectAllowed = 'copy'\n            onDragStart(event, data)\n        },\n\n        handleDragEnd(event, data) {\n            onDragEnd(event, data)\n        },\n\n        handleDrop(event) {\n            event.preventDefault()\n            try {\n                const data = JSON.parse(event.dataTransfer.getData('text/plain'))\n                onDrop(event, data)\n            } catch (error) {\n                console.error('拖拽数据解析失败:', error)\n            }\n        },\n\n        handleDragOver(event) {\n            event.preventDefault()\n            onDragOver(event)\n        },\n\n        handleDragLeave(event) {\n            onDragLeave(event)\n        }\n    }\n}\n\n/**\n * 创建拖拽区域管理器\n * @param {Array} areas - 拖拽区域配置数组\n * @param {Function} onAreaChange - 区域变化回调\n * @returns {Object} 拖拽区域管理器\n */\nexport function createDragAreaManager(areas = [], onAreaChange = () => { }) {\n    const draggedItem = ref(null)\n    const dragOverArea = ref(null)\n\n    const setDraggedItem = (item) => {\n        draggedItem.value = item\n    }\n\n    const setDragOverArea = (areaKey) => {\n        dragOverArea.value = areaKey\n    }\n\n    const clearDragState = () => {\n        draggedItem.value = null\n        dragOverArea.value = null\n    }\n\n    const addItemToArea = (areaKey, item) => {\n        const area = areas.find(a => a.key === areaKey)\n        if (!area) return false\n\n        // 检查是否已存在\n        const exists = area.items.some(existingItem =>\n            existingItem.id === item.id\n        )\n\n        if (exists) return false\n\n        if (area.multiple) {\n            area.items.push(item)\n        } else {\n            area.items = [item]\n        }\n\n        onAreaChange(areaKey, area.items)\n        return true\n    }\n\n    const removeItemFromArea = (areaKey, itemIndex) => {\n        const area = areas.find(a => a.key === areaKey)\n        if (!area) return false\n\n        area.items.splice(itemIndex, 1)\n        onAreaChange(areaKey, area.items)\n        return true\n    }\n\n    const clearArea = (areaKey) => {\n        const area = areas.find(a => a.key === areaKey)\n        if (!area) return false\n\n        area.items = []\n        onAreaChange(areaKey, area.items)\n        return true\n    }\n\n    const clearAllAreas = () => {\n        areas.forEach(area => {\n            area.items = []\n            onAreaChange(area.key, area.items)\n        })\n    }\n\n    return {\n        draggedItem: readonly(draggedItem),\n        dragOverArea: readonly(dragOverArea),\n        setDraggedItem,\n        setDragOverArea,\n        clearDragState,\n        addItemToArea,\n        removeItemFromArea,\n        clearArea,\n        clearAllAreas\n    }\n}\n\n/**\n * 创建数据映射验证器\n * @param {Object} chartConfig - 图表配置\n * @returns {Object} 验证器对象\n */\nexport function createMappingValidator(chartConfig) {\n    const validateMapping = (mappings, areas) => {\n        const errors = []\n\n        // 检查必需字段\n        const requiredAreas = areas.filter(area => area.required)\n        requiredAreas.forEach(area => {\n            if (!mappings[area.key] || mappings[area.key].length === 0) {\n                errors.push({\n                    area: area.key,\n                    message: `${area.label} 是必需的`\n                })\n            }\n        })\n\n        // 检查数据类型兼容性\n        areas.forEach(area => {\n            const mapping = mappings[area.key]\n            if (mapping && mapping.length > 0) {\n                mapping.forEach(item => {\n                    if (!isDataTypeCompatible(item.columnType, area.type)) {\n                        errors.push({\n                            area: area.key,\n                            message: `${item.columnName} 的数据类型 ${item.columnType} 与 ${area.label} 不兼容`\n                        })\n                    }\n                })\n            }\n        })\n\n        return {\n            isValid: errors.length === 0,\n            errors\n        }\n    }\n\n    const isDataTypeCompatible = (columnType, areaType) => {\n        const compatibilityMap = {\n            'category': ['text', 'date'],\n            'value': ['numeric'],\n            'any': ['text', 'numeric', 'date']\n        }\n\n        return compatibilityMap[areaType]?.includes(columnType) || false\n    }\n\n    return {\n        validateMapping,\n        isDataTypeCompatible\n    }\n}\n\n/**\n * 创建数据过滤器\n * @param {Array} data - 原始数据\n * @param {Object} filterConfig - 过滤配置\n * @returns {Array} 过滤后的数据\n */\nexport function createDataFilter(data, filterConfig) {\n    if (!data || data.length === 0) return data\n\n    switch (filterConfig.mode) {\n        case 'all':\n            return data\n\n        case 'range':\n            const { start, end } = filterConfig.range\n            return data.slice(start - 1, end)\n\n        case 'condition':\n            return filterByConditions(data, filterConfig.conditions)\n\n        default:\n            return data\n    }\n}\n\n/**\n * 根据条件过滤数据\n * @param {Array} data - 原始数据\n * @param {Array} conditions - 过滤条件\n * @returns {Array} 过滤后的数据\n */\nfunction filterByConditions(data, conditions) {\n    if (!conditions || conditions.length === 0) return data\n\n    return data.filter(row => {\n        return conditions.every(condition => {\n            const { column, operator, value } = condition\n            const cellValue = row[column]\n\n            switch (operator) {\n                case 'equals':\n                    return cellValue == value\n                case 'not_equals':\n                    return cellValue != value\n                case 'greater':\n                    return Number(cellValue) > Number(value)\n                case 'less':\n                    return Number(cellValue) < Number(value)\n                case 'contains':\n                    return String(cellValue).includes(String(value))\n                case 'not_contains':\n                    return !String(cellValue).includes(String(value))\n                default:\n                    return true\n            }\n        })\n    })\n}\n\n/**\n * 创建临时数据集\n * @param {Array} files - 文件数组\n * @param {Object} mappings - 数据映射配置\n * @param {Object} filterConfig - 过滤配置\n * @returns {Array} 临时数据集\n */\nexport function createTempDataset(files, mappings, filterConfig) {\n    console.log('createTempDataset called with:', { files: files.length, mappings, filterConfig })\n    \n    const tempData = []\n    const columnMap = new Map()\n\n    // 收集所有需要的列数据\n    Object.entries(mappings).forEach(([areaKey, areaMappings]) => {\n        console.log(`Processing area: ${areaKey}`, areaMappings)\n        \n        if (areaMappings && areaMappings.length > 0) {\n            areaMappings.forEach(mapping => {\n                const file = files.find(f => f.id === mapping.fileId)\n                console.log(`Looking for file ${mapping.fileId}, found:`, !!file)\n                \n                if (file && file.previewData) {\n                    const columnData = file.previewData.map(row => row[mapping.columnName])\n                    const columnKey = `${areaKey}_${mapping.columnName}`\n                    \n                    console.log(`Column ${columnKey} data sample:`, columnData.slice(0, 3))\n                    \n                    columnMap.set(columnKey, {\n                        data: columnData,\n                        mapping,\n                        areaKey\n                    })\n                }\n            })\n        }\n    })\n\n    console.log('Column map size:', columnMap.size)\n    console.log('Column map keys:', Array.from(columnMap.keys()))\n\n    // 构建临时数据集\n    if (columnMap.size > 0) {\n        const maxLength = Math.max(...Array.from(columnMap.values()).map(col => col.data.length))\n        console.log('Max data length:', maxLength)\n\n        for (let i = 0; i < maxLength; i++) {\n            const row = {}\n            columnMap.forEach((columnInfo, key) => {\n                row[key] = columnInfo.data[i] || null\n            })\n            tempData.push(row)\n        }\n    }\n\n    console.log('Temp data created:', tempData.length, 'rows')\n    console.log('Temp data sample:', tempData.slice(0, 3))\n\n    // 应用过滤\n    return createDataFilter(tempData, filterConfig)\n}\n\n/**\n * 图表配置转换器\n * @param {Object} mappingConfig - 映射配置\n * @param {Array} tempData - 临时数据集\n * @param {String} chartType - 图表类型\n * @returns {Object} ECharts 配置对象\n */\nexport function convertToChartConfig(mappingConfig, tempData, chartType) {\n    console.log('convertToChartConfig called with:', { mappingConfig, tempData: tempData.length, chartType })\n    \n    const { basicConfig, advancedConfig } = mappingConfig\n\n    const chartConverters = {\n        'Line Chart': convertToLineChart,\n        'Bar Chart': convertToBarChart,\n        'Pie Chart': convertToPieChart,\n        'Scatter Plot': convertToScatterChart\n    }\n\n    const converter = chartConverters[chartType] || chartConverters['Line Chart']\n    const result = converter(basicConfig, advancedConfig, tempData)\n    \n    console.log('Chart config result:', result)\n    return result\n}\n\n/**\n * 转换为折线图配置\n */\nfunction convertToLineChart(basicConfig, advancedConfig, data) {\n    console.log('convertToLineChart called with:', { basicConfig, advancedConfig, data: data.length })\n    \n    // 获取 X 轴数据\n    const xMapping = basicConfig.x?.[0]\n    const xData = xMapping ? data.map(row => row[`x_${xMapping.columnName}`]) : []\n    \n    // 获取 Y 轴数据\n    const yMapping = basicConfig.y?.[0]\n    const yData = yMapping ? data.map(row => row[`y_${yMapping.columnName}`]) : []\n    \n    console.log('X data sample:', xData.slice(0, 5))\n    console.log('Y data sample:', yData.slice(0, 5))\n    \n    // 处理多个数据系列\n    const series = []\n    \n    if (basicConfig.series && basicConfig.series.length > 0) {\n        // 如果有配置数据系列\n        basicConfig.series.forEach((seriesMapping, index) => {\n            const seriesData = data.map(row => row[`series_${seriesMapping.columnName}`])\n            series.push({\n                name: seriesMapping.columnName,\n                type: 'line',\n                data: seriesData\n            })\n        })\n    } else if (yData.length > 0) {\n        // 如果没有配置数据系列，使用 Y 轴数据\n        series.push({\n            name: yMapping?.columnName || '数据系列',\n            type: 'line',\n            data: yData\n        })\n    }\n    \n    console.log('Series data:', series)\n\n    return {\n        title: {\n            text: '折线图',\n            left: 'center'\n        },\n        tooltip: {\n            trigger: 'axis'\n        },\n        legend: {\n            data: series.map(s => s.name),\n            top: 30\n        },\n        xAxis: {\n            type: 'category',\n            data: xData\n        },\n        yAxis: {\n            type: 'value'\n        },\n        series: series\n    }\n}\n\n/**\n * 转换为柱状图配置\n */\nfunction convertToBarChart(basicConfig, advancedConfig, data) {\n    const xData = basicConfig.x?.[0] ? data.map(row => row[`x_${basicConfig.x[0].columnName}`]) : []\n    const yData = basicConfig.y?.[0] ? data.map(row => row[`y_${basicConfig.y[0].columnName}`]) : []\n\n    return {\n        title: {\n            text: '柱状图',\n            left: 'center'\n        },\n        tooltip: {\n            trigger: 'axis'\n        },\n        legend: {\n            data: ['数据系列'],\n            top: 30\n        },\n        xAxis: {\n            type: 'category',\n            data: xData\n        },\n        yAxis: {\n            type: 'value'\n        },\n        series: [{\n            name: '数据系列',\n            type: 'bar',\n            data: yData\n        }]\n    }\n}\n\n/**\n * 转换为饼图配置\n */\nfunction convertToPieChart(basicConfig, advancedConfig, data) {\n    const categoryData = basicConfig.category?.[0] ? data.map(row => row[`category_${basicConfig.category[0].columnName}`]) : []\n    const valueData = basicConfig.value?.[0] ? data.map(row => row[`value_${basicConfig.value[0].columnName}`]) : []\n\n    const pieData = categoryData.map((name, index) => ({\n        name,\n        value: valueData[index] || 0\n    }))\n\n    return {\n        title: {\n            text: '饼图',\n            left: 'center'\n        },\n        tooltip: {\n            trigger: 'item'\n        },\n        legend: {\n            orient: 'vertical',\n            left: 'left'\n        },\n        series: [{\n            name: '数据',\n            type: 'pie',\n            radius: '50%',\n            data: pieData,\n            emphasis: {\n                itemStyle: {\n                    shadowBlur: 10,\n                    shadowOffsetX: 0,\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\n                }\n            }\n        }]\n    }\n}\n\n/**\n * 转换为散点图配置\n */\nfunction convertToScatterChart(basicConfig, advancedConfig, data) {\n    const xData = basicConfig.x?.[0] ? data.map(row => row[`x_${basicConfig.x[0].columnName}`]) : []\n    const yData = basicConfig.y?.[0] ? data.map(row => row[`y_${basicConfig.y[0].columnName}`]) : []\n\n    const scatterData = xData.map((x, index) => [x, yData[index]])\n\n    return {\n        title: {\n            text: '散点图',\n            left: 'center'\n        },\n        tooltip: {\n            trigger: 'item'\n        },\n        xAxis: {\n            type: 'value'\n        },\n        yAxis: {\n            type: 'value'\n        },\n        series: [{\n            name: '数据点',\n            type: 'scatter',\n            data: scatterData\n        }]\n    }\n}\n\n// 导入 Vue 3 的 ref 和 readonly\nimport { ref, readonly } from 'vue'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}