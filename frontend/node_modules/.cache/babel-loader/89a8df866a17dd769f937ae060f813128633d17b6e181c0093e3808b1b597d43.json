{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// dataMergeUtils.js\n// 多文件数据合并与主键处理工具函数\n// 根据不同图表类型，主函数分发到对应的处理器进行数据处理，生成能够绘制图表的数据\n\n/*\n关键函数 mergeChartData(config, fileDataMap, nullHandlingType, options)\n    参数校验 validateParams\n    类型\n    图表类型分发器 chartTypeHandlers[type]\n    数据提取 getDataRows\n    过滤器插件 options.filterPlugin 或 defaultFilterPlugin\n    缺失值处理插件 handleNulls (调用 nullHandlingModule 中的具体方法)\n    主键合并 如有多文件/多字段，合并主键\n    组装seriesData 生成最终用于图表的数据结构\n    返回 {xData, yDataArr, mergeType, seriesData}\n*/\n\n/* eslint-disable */\n\n/**\n * @typedef {Object} AxisConfig\n * @property {string} file - 数据文件名\n * @property {string} field - 字段名\n */\n\n/**\n * @typedef {Object} ChartConfig\n * @property {AxisConfig} [xAxis]\n * @property {AxisConfig|AxisConfig[]} [yAxis]\n * @property {AxisConfig} [category]\n * @property {AxisConfig} [value]\n * @property {Object} [filter]\n * @property {string} [type] - 图表类型，如 'pie', 'line', 'bar' 等\n */\n\n/**\n * @typedef {Object.<string, Array<Object>>} FileDataMap\n */\n\n/**\n * 判断是否有主键（即所有y轴字段的文件都包含x轴字段）\n * @param {AxisConfig} xAxis\n * @param {AxisConfig|AxisConfig[]} yAxis\n * @param {FileDataMap} fileDataMap\n * @returns {boolean}\n */\nexport function hasPrimaryKey(xAxis, yAxis, fileDataMap) {\n  if (!xAxis || !xAxis.field) return false;\n  const xField = xAxis.field;\n  const yArr = Array.isArray(yAxis) ? yAxis : [yAxis];\n  return yArr.every(y => {\n    const yFileData = fileDataMap[y.file];\n    return yFileData && yFileData.length > 0 && yFileData[0].hasOwnProperty(xField);\n  });\n}\n\n// ---------------- 通用数据处理工具函数 ----------------\n\n/**\n * 提取数据并去掉标题行\n * @param {FileDataMap} fileDataMap\n * @param {string} file\n * @returns {Array<Object>}\n */\nfunction getDataRows(fileDataMap, file) {\n  return (fileDataMap[file] || []).slice(1);\n}\n\n/**\n * 通用缺失值处理器分发\n * @param {string} type\n * @param {Array} arr\n * @param {Object} nullHandlingModule\n * @returns {Array}\n */\nfunction handleNulls(type, arr, nullHandlingModule) {\n  if (!type || type === 'ignore') return arr;\n  const handler = nullHandlingModule[type] || nullHandlingModule.ignoreNull;\n  return handler(arr);\n}\n\n/**\n * 参数校验\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n */\nfunction validateParams(config, fileDataMap) {\n  if (!config || typeof config !== 'object') throw new Error('config must be an object');\n  if (!fileDataMap || typeof fileDataMap !== 'object') throw new Error('fileDataMap must be an object');\n}\n\n// ---------------- 过滤器插件化 ----------------\n\n/**\n * 过滤器插件，默认实现\n * @param {Array} rows\n * @param {Object} filters\n * @returns {Array}\n */\nexport function defaultFilterPlugin(rows, filters) {\n  if (!filters || !filters.filters || !Array.isArray(filters.filters) || filters.filters.length === 0) return rows;\n  const logic = filters.logic || 'AND';\n  const conds = filters.filters || [];\n  if (conds.length === 0) return rows;\n  return rows.filter(row => {\n    const results = conds.map(f => {\n      const val = row[f.field];\n      switch (f.type) {\n        case 'integer':\n          {\n            const num = parseFloat(val);\n            const cmp = parseFloat(f.value);\n            if (f.operator === 'eq') return num === cmp;\n            if (f.operator === 'ne') return num !== cmp;\n            if (f.operator === 'gt') return num > cmp;\n            if (f.operator === 'ge') return num >= cmp;\n            if (f.operator === 'lt') return num < cmp;\n            if (f.operator === 'le') return num <= cmp;\n            return true;\n          }\n        case 'string':\n          {\n            const str = String(val ?? '');\n            const cmp = String(f.value ?? '');\n            if (f.operator === 'eq') return str === cmp;\n            if (f.operator === 'ne') return str !== cmp;\n            if (f.operator === 'contains') return str.includes(cmp);\n            if (f.operator === 'notcontains') return !str.includes(cmp);\n            if (f.operator === 'startsWith') return str.startsWith(cmp);\n            if (f.operator === 'endsWith') return str.endsWith(cmp);\n            return true;\n          }\n        case 'category':\n          {\n            if (f.operator === 'eq') return val === f.value;\n            if (f.operator === 'ne') return val !== f.value;\n            if (f.operator === 'in') return Array.isArray(f.value) ? f.value.includes(val) : false;\n            if (f.operator === 'notin') return Array.isArray(f.value) ? !f.value.includes(val) : false;\n            return true;\n          }\n        case 'boolean':\n          {\n            const boolVal = val === true || val === 'true' || val === 1 || val === '1';\n            const cmp = f.value === true || f.value === 'true' || f.value === 1 || f.value === '1';\n            if (f.operator === 'eq') return boolVal === cmp;\n            if (f.operator === 'ne') return boolVal !== cmp;\n            return true;\n          }\n        case 'date':\n          {\n            const dateVal = new Date(val).getTime();\n            const cmp = new Date(f.value).getTime();\n            if (f.operator === 'eq') return dateVal === cmp;\n            if (f.operator === 'ne') return dateVal !== cmp;\n            if (f.operator === 'before') return dateVal < cmp;\n            if (f.operator === 'after') return dateVal > cmp;\n            return true;\n          }\n        default:\n          return true;\n      }\n    });\n    return logic === 'AND' ? results.every(Boolean) : results.some(Boolean);\n  });\n}\nimport BoxplotChartIcon from '../../../components/svg/BoxplotChartIcon.vue';\n/**\n * 合并多文件数据，返回 { xData, yDataArr, mergeType, seriesData }\n * @param {Object} config - chartConfig\n * @param {Object} fileDataMap - 文件名到对象数组的映射\n * @returns {Object}\n */\n\nimport * as nullHandling from './nullHandling.js';\n\n// ---------------- 图表类型处理器 ----------------\n\n// 调试输入函数\nfunction debugInput(config, fileDataMap, options) {\n  console.log('[--debugInput {Chart Type Processor}--] config:', config);\n  console.log('[--debugInput {Chart Type Processor}--] fileDataMap:', fileDataMap);\n  console.log('[--debugInput {Chart Type Processor}--] options:', options);\n}\n\n/**\n * 通用 x/y 图表（如折线、柱状等）数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction xyChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options);\n  const {\n    source,\n    target,\n    value\n  } = config;\n\n  // 1. 合并为对象数组\n  const rawData = Array.isArray(source) && Array.isArray(target) && Array.isArray(value) ? source.map((s, i) => ({\n    source: s,\n    target: target[i],\n    value: value[i]\n  })) : [];\n\n  // 2. 收集所有节点\n  const nodeSet = new Set();\n  rawData.forEach(row => {\n    nodeSet.add(row.source);\n    nodeSet.add(row.target);\n  });\n  const nodes = Array.from(nodeSet).map(name => ({\n    name\n  }));\n\n  // 3. links\n  const links = rawData.map(row => ({\n    source: row.source,\n    target: row.target,\n    value: row.value\n  }));\n  return {\n    nodes,\n    links\n  };\n  let mainData = getDataRows(fileDataMap, xAxis.file);\n  const {\n    isAggregate = true,\n    aggregateFn\n  } = options;\n  // 应用过滤\n  if (config.filter && config.filter.filters && config.filter.filters.length) {\n    mainData = filterPlugin(mainData, config.filter);\n  }\n  // 只过滤空行，不去重\n  mainData = mainData.filter(row => {\n    const key = row[xAxis.field];\n    return key !== undefined && key !== null && key !== '';\n  });\n  const yArr = Array.isArray(yAxis) ? yAxis : [yAxis];\n  if (isAggregate) {\n    // 按 name 分组聚合，可自定义聚合方式\n    const groupMap = new Map(); // key: name, value: [ [y1, y2, ...], [y1, y2, ...], ... ]\n    for (const row of mainData) {\n      const key = row[xAxis.field];\n      if (!groupMap.has(key)) {\n        groupMap.set(key, yArr.map(() => []));\n      }\n      yArr.forEach((y, idx) => {\n        const rawVal = row[y.field];\n        const parsedVal = parseFloat(rawVal);\n        if (rawVal !== null && rawVal !== undefined && rawVal !== '' && !Number.isNaN(parsedVal)) {\n          groupMap.get(key)[idx].push(parsedVal);\n        }\n      });\n    }\n    const xData = Array.from(groupMap.keys());\n    // 默认聚合函数为累加\n    const defaultAggregate = arr => arr.reduce((a, b) => a + b, 0);\n    const aggFn = typeof aggregateFn === 'function' ? aggregateFn : defaultAggregate;\n    const yDataArr = yArr.map((y, idx) => xData.map(name => aggFn(groupMap.get(name)[idx])));\n    return {\n      xData,\n      yDataArr,\n      mergeType: 'groupByName',\n      seriesData: []\n    };\n  } else {\n    // 返回原始未聚合数据\n    const xData = mainData.map(row => row[xAxis.field]);\n    const yDataArr = yArr.map(y => mainData.map(row => {\n      const rawVal = row[y.field];\n      const parsedVal = parseFloat(rawVal);\n      return rawVal === null || rawVal === undefined || rawVal === '' || Number.isNaN(parsedVal) ? null : parsedVal;\n    }));\n    return {\n      xData,\n      yDataArr,\n      mergeType: 'raw',\n      seriesData: []\n    };\n  }\n}\n\n/**\n * 饼图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction pieChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    filterPlugin = defaultFilterPlugin\n  } = options;\n  let catData = getDataRows(fileDataMap, config.category.file);\n  let valData = getDataRows(fileDataMap, config.value.file);\n  // 应用过滤\n  if (config.filter && config.filter.filters && config.filter.filters.length) {\n    catData = filterPlugin(catData, config.filter);\n    valData = filterPlugin(valData, config.filter);\n  }\n  const len = Math.min(catData.length, valData.length);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const name = catData[i][config.category.field];\n    const rawVal = valData[i][config.value.field];\n    const parsedVal = parseFloat(rawVal);\n    const val = rawVal === null || rawVal === undefined || rawVal === '' || Number.isNaN(parsedVal) ? null : parsedVal;\n    if (name !== undefined && name !== null && name !== '') {\n      result.push({\n        name,\n        value: val\n      });\n    }\n  }\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'pie',\n    seriesData: result\n  };\n}\n\n/**\n * K线图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction candlestickChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    nullHandlingType = 'ignore',\n    nullHandlingModule = nullHandling,\n    filterPlugin = defaultFilterPlugin\n  } = options;\n  const {\n    time,\n    open,\n    close,\n    high,\n    low,\n    filter\n  } = config;\n  // 提取主文件数据\n  let mainData = getDataRows(fileDataMap, time.file);\n  if (filter && filter.filters && filter.filters.length) {\n    mainData = filterPlugin(mainData, filter);\n  }\n  // 按时间字段排序\n  mainData.sort((a, b) => {\n    if (a[time.field] < b[time.field]) return -1;\n    if (a[time.field] > b[time.field]) return 1;\n    return 0;\n  });\n  // 组装 xData 和 seriesData\n  const xData = mainData.map(row => row[time.field]);\n  const seriesData = mainData.map(row => {\n    const o = parseFloat(row[open.field]);\n    const c = parseFloat(row[close.field]);\n    const h = parseFloat(row[high.field]);\n    const l = parseFloat(row[low.field]);\n    // 缺失值处理\n    const arr = [o, c, l, h].map(v => v === null || v === undefined || v === '' || Number.isNaN(v) ? null : v);\n    return handleNulls(nullHandlingType, arr, nullHandlingModule);\n  });\n  return {\n    xData,\n    yDataArr: [seriesData],\n    mergeType: 'candlestick',\n    seriesData\n  };\n}\n\n/**\n * 热力图数据处理器（主键合并，一一对应）\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction heatmapChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    xAxis,\n    yAxis,\n    value\n  } = config;\n  // 获取所有数据行\n  const xRows = getDataRows(fileDataMap, xAxis.file);\n  const yRows = getDataRows(fileDataMap, yAxis.file);\n  const valRows = getDataRows(fileDataMap, value.file);\n\n  // 收集所有x、y的取值（类别）\n  const xSet = new Set(xRows.map(row => row[xAxis.field]));\n  const ySet = new Set(yRows.map(row => row[yAxis.field]));\n  const xData = Array.from(xSet);\n  const yData = Array.from(ySet);\n\n  // 构建value映射\n  const valueMap = new Map();\n  valRows.forEach(row => {\n    // 优先用valRows里的x/y字段，否则用xRows/yRows索引补齐\n    const x = row[xAxis.field] !== undefined ? row[xAxis.field] : null;\n    const y = row[yAxis.field] !== undefined ? row[yAxis.field] : null;\n    if (x !== null && y !== null) {\n      const key = `${x}|${y}`;\n      valueMap.set(key, row[value.field]);\n    }\n  });\n\n  // 生成 seriesData，补齐所有 (x, y) 组合\n  const seriesData = [];\n  yData.forEach(y => {\n    xData.forEach(x => {\n      const key = `${x}|${y}`;\n      const v = valueMap.has(key) ? valueMap.get(key) : null;\n      seriesData.push([x, y, v]);\n    });\n  });\n  return {\n    xData,\n    yData,\n    mergeType: 'heatmap',\n    seriesData\n  };\n}\n\n/**\n * 雷达图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction radarChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    indicator,\n    value,\n    name\n  } = config;\n\n  // 维度配置\n  const indicators = indicator.map(item => {\n    const rows = getDataRows(fileDataMap, item.file);\n    const values = rows.map(row => row[item.field]).filter(v => v !== undefined && v !== null);\n    const max = Math.ceil(Math.max(...values.map(v => Number(v))) * 1.2); // 乘以安全系数\n    return {\n      name: item.field,\n      max: max || 100\n    };\n  });\n\n  // 系列数据\n  const nameRows = getDataRows(fileDataMap, name.file);\n  const seriesData = nameRows.map(row => {\n    const values = value.map(item => row[item.field]);\n    return {\n      name: row[name.field],\n      value: values\n    };\n  });\n\n  // 先封装传输\n  const RadarPack = {\n    indicator: indicators,\n    seriesData_radar: seriesData\n  };\n  return {\n    xData: [],\n    yData: [],\n    mergeType: 'radar',\n    seriesData: RadarPack\n  };\n}\n\n/**\n * 箱线图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction boxplotChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  // 解析配置\n  const {\n    category,\n    series,\n    value,\n    min,\n    q1,\n    median,\n    q3,\n    max\n  } = config;\n  // 获取数据行\n  const catRows = getDataRows(fileDataMap, category.file);\n  const seriesRows = series ? getDataRows(fileDataMap, series.file) : null;\n  // 收集所有分组和系列\n  const xData = Array.from(new Set(catRows.map(row => row[category.field])));\n  let seriesList = seriesRows ? Array.from(new Set(seriesRows.map(row => row[series.field]))) : null;\n  if (!seriesList || seriesList.length === 0) seriesList = ['default'];\n  let useValue = !!value;\n  let valArrs = [];\n  if (useValue) {\n    if (Array.isArray(value)) {\n      valArrs = value.map(v => getDataRows(fileDataMap, v.file).map(row => parseFloat(row[v.field])));\n    } else {\n      valArrs = [getDataRows(fileDataMap, value.file).map(row => parseFloat(row[value.field]))];\n    }\n  }\n\n  // 构建分组：series -> category -> [values]\n  const groupMap = new Map(); // key: series, value: Map(category, [values])\n  catRows.forEach((row, idx) => {\n    const cat = row[category.field];\n    const ser = seriesRows && seriesRows[idx] && series.field ? seriesRows[idx][series.field] : 'default';\n    if (!groupMap.has(ser)) groupMap.set(ser, new Map());\n    const catMap = groupMap.get(ser);\n    if (!catMap.has(cat)) catMap.set(cat, []);\n    if (useValue) {\n      valArrs.forEach(arr => {\n        if (arr[idx] !== undefined && !Number.isNaN(arr[idx])) {\n          catMap.get(cat).push(arr[idx]);\n        }\n      });\n    }\n  });\n\n  // 计算统计量\n  function calcBoxStats(arr) {\n    if (!arr || arr.length === 0) return [null, null, null, null, null];\n    const sorted = arr.slice().sort((a, b) => a - b);\n    const minV = sorted[0];\n    const maxV = sorted[sorted.length - 1];\n    const medianV = quantile(sorted, 0.5);\n    const q1V = quantile(sorted, 0.25);\n    const q3V = quantile(sorted, 0.75);\n    return [minV, q1V, medianV, q3V, maxV];\n  }\n  function quantile(arr, q) {\n    const pos = (arr.length - 1) * q;\n    const base = Math.floor(pos);\n    const rest = pos - base;\n    if (arr[base + 1] !== undefined) {\n      return arr[base] + rest * (arr[base + 1] - arr[base]);\n    } else {\n      return arr[base];\n    }\n  }\n\n  // 计算异常值（outlier）\n  function calcOutliers(arr, stats) {\n    if (!arr || arr.length === 0) return [];\n    const [min, q1, median, q3, max] = stats;\n    // 1.5倍四分位距法\n    const IQR = q3 - q1;\n    const lower = q1 - 1.5 * IQR;\n    const upper = q3 + 1.5 * IQR;\n    return arr.filter(v => v < lower || v > upper);\n  }\n\n  // 组装 seriesData: 每个系列一个数组，数组顺序与 xData一致\n  let seriesData, outlierData;\n  if (useValue) {\n    // 自动计算五数和异常值\n    seriesData = seriesList.map(ser => {\n      const catMap = groupMap.get(ser) || new Map();\n      return xData.map(cat => calcBoxStats(catMap.get(cat) || []));\n    });\n    // 计算异常值\n    outlierData = seriesList.map(ser => {\n      const catMap = groupMap.get(ser) || new Map();\n      return xData.flatMap((cat, catIdx) => {\n        const arr = catMap.get(cat) || [];\n        const stats = seriesData[seriesList.indexOf(ser)][catIdx];\n        const outliers = calcOutliers(arr, stats);\n        // 返回 [x轴索引, 异常值]，ECharts scatter 需要这种格式\n        return outliers.map(v => [catIdx, v]);\n      });\n    });\n  } else {\n    // 直接读取五数\n    const minRows = min ? getDataRows(fileDataMap, min.file) : null;\n    const q1Rows = q1 ? getDataRows(fileDataMap, q1.file) : null;\n    const medianRows = median ? getDataRows(fileDataMap, median.file) : null;\n    const q3Rows = q3 ? getDataRows(fileDataMap, q3.file) : null;\n    const maxRows = max ? getDataRows(fileDataMap, max.file) : null;\n    seriesData = seriesList.map(ser => {\n      return xData.map((cat, idx) => {\n        let rowIdx = -1;\n        for (let i = 0; i < catRows.length; i++) {\n          const catVal = catRows[i][category.field];\n          const serVal = seriesRows ? seriesRows[i][series.field] : 'default';\n          if (catVal === cat && serVal === ser) {\n            rowIdx = i;\n            break;\n          }\n        }\n        if (rowIdx === -1) return [null, null, null, null, null];\n        return [minRows ? parseFloat(minRows[rowIdx][min.field]) : null, q1Rows ? parseFloat(q1Rows[rowIdx][q1.field]) : null, medianRows ? parseFloat(medianRows[rowIdx][median.field]) : null, q3Rows ? parseFloat(q3Rows[rowIdx][q3.field]) : null, maxRows ? parseFloat(maxRows[rowIdx][max.field]) : null];\n      });\n    });\n    // 无法自动计算异常值\n    outlierData = seriesList.map(() => []);\n  }\n  const boxplotPack = {\n    seriesList: seriesList,\n    seriesData_boxplot: seriesData,\n    outlierData: outlierData\n  };\n  return {\n    xData,\n    yDataArr: [],\n    mergeType: 'boxplot',\n    seriesData: boxplotPack\n  };\n}\n\n/**\n * 关系图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction graphChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options);\n  const {\n    nodeID,\n    nodeName,\n    nodeValue,\n    nodeCategory,\n    edgeSource,\n    edgeTarget,\n    edgeWeight\n  } = config;\n\n  // 必填字段校验\n  if (!nodeID || !nodeID.file || !nodeID.field) throw new Error('nodeID为必填项');\n  if (!edgeSource || !edgeSource.file || !edgeSource.field) throw new Error('edgeSource为必填项');\n  if (!edgeTarget || !edgeTarget.file || !edgeTarget.field) throw new Error('edgeTarget为必填项');\n\n  //获取数据行\n  const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n  const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n  const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n  const nodeCategoryRows = nodeCategory && nodeCategory.file ? getDataRows(fileDataMap, nodeCategory.file) : [];\n  const edgeSourceRows = getDataRows(fileDataMap, edgeSource.file);\n  const edgeTargetRows = getDataRows(fileDataMap, edgeTarget.file);\n  const edgeWeightRows = edgeWeight && edgeWeight.file ? getDataRows(fileDataMap, edgeWeight.file) : [];\n\n  // 节点去重，只保留每个id的第一个节点\n  const nodes = [];\n  const nodeSet = new Set();\n  nodeIDRows.forEach((row, idx) => {\n    const id = row[nodeID.field];\n    if (id !== undefined && id !== null && id !== '' && !nodeSet.has(id)) {\n      const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n      const value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : 1;\n      const category = nodeCategoryRows[idx] && nodeCategory && nodeCategory.field ? nodeCategoryRows[idx][nodeCategory.field] : '';\n      const node = {\n        id\n      };\n      if (name !== undefined) node.name = name;\n      if (value !== undefined) node.value = value;\n      if (category !== undefined) node.category = category;\n      nodes.push(node);\n      nodeSet.add(id);\n    }\n  });\n\n  // 生成边数据，source/target直接用id字符串\n  const edges = [];\n  edgeSourceRows.forEach((row, idx) => {\n    const source = row[edgeSource.field];\n    const target = edgeTargetRows[idx] ? edgeTargetRows[idx][edgeTarget.field] : undefined;\n    const weight = edgeWeightRows[idx] && edgeWeight && edgeWeight.field ? parseFloat(edgeWeightRows[idx][edgeWeight.field]) : 1;\n    if (source !== undefined && source !== null && source !== '' && target !== undefined && target !== null && target !== '') {\n      const edge = {\n        source: String(source),\n        target: String(target)\n      };\n      if (!isNaN(weight)) edge.weight = weight;\n      edges.push(edge);\n    }\n  });\n\n  // 打包\n  const graphPack = {\n    nodes: nodes,\n    edges: edges\n  };\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'graph',\n    seriesData: graphPack\n  };\n}\n\n/**\n * 树图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction treeChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    nodeID,\n    nodeName,\n    parentID,\n    parentName,\n    nodeValue,\n    path\n  } = config;\n  // 合理判定：有 nodeID 和 parentID 字段\n  const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n\n  // 平铺模式处理\n  if (isValid) {\n    const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n    const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n    const parentIDRows = getDataRows(fileDataMap, parentID.file);\n    const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n    const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n    // 构建节点映射\n    const nodeMap = new Map();\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      if (!id) return;\n      const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n      const value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n      nodeMap.set(id, {\n        id,\n        name,\n        value,\n        children: []\n      });\n    });\n\n    // 构建树结构\n    let rootNodes = [];\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n      if (!parentId || !nodeMap.has(parentId)) {\n        // 没有父节点，认为是根节点\n        rootNodes.push(nodeMap.get(id));\n      } else {\n        nodeMap.get(parentId).children.push(nodeMap.get(id));\n      }\n    });\n\n    // 只返回根节点数组\n    return {\n      xData: [],\n      yDataArr: [],\n      mergeType: 'tree',\n      seriesData: rootNodes\n    };\n  }\n\n  // 兜底\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'tree',\n    seriesData: []\n  };\n}\n\n/**\n * 矩形树图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction treemapChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    nodeID,\n    nodeName,\n    parentID,\n    parentName,\n    nodeValue\n  } = config;\n  // 判定数据是否有效\n  const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n  if (isValid) {\n    const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n    const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n    const parentIDRows = getDataRows(fileDataMap, parentID.file);\n    const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n    const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n    // 构建节点映射\n    const nodeMap = new Map();\n    // 先收集所有 parentId，便于后续层级计算\n    const parentIdSet = new Set();\n    parentIDRows.forEach(row => {\n      if (row && parentID && parentID.field) {\n        const pid = row[parentID.field];\n        if (pid) parentIdSet.add(pid);\n      }\n    });\n\n    // 计算每个节点的层级（根节点为1，子节点依次+1）\n    function getLevel(id, cache = {}) {\n      if (cache[id]) return cache[id];\n      let level = 1;\n      let currentId = id;\n      let idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n      while (idx !== -1) {\n        const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n        if (!parentId || !nodeMap.has(parentId)) break;\n        level++;\n        currentId = parentId;\n        idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n      }\n      cache[id] = level;\n      return level;\n    }\n\n    // 统计最大层级\n    let maxLevel = 1;\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      const level = getLevel(id);\n      if (level > maxLevel) maxLevel = level;\n    });\n\n    // 构建节点，value 按层级递减（根节点最大，叶子最小）\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      if (!id) return;\n      const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n      let value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n      // 层级递减赋值，根节点 value = maxLevel，下一层 maxLevel-1，依次类推\n      if (value === undefined || value === null || isNaN(value)) {\n        const level = getLevel(id);\n        value = Math.max(1, maxLevel - level + 1);\n      }\n      nodeMap.set(id, {\n        id,\n        name,\n        value,\n        children: []\n      });\n    });\n\n    // 构建树结构\n    let rootNodes = [];\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n      if (!parentId || !nodeMap.has(parentId)) {\n        // 没有父节点，认为是根节点\n        rootNodes.push(nodeMap.get(id));\n      } else {\n        nodeMap.get(parentId).children.push(nodeMap.get(id));\n      }\n    });\n\n    // 递归获取最大层级\n    function getMaxDepth(nodes, depth) {\n      if (!nodes || nodes.length === 0) return depth;\n      let max = depth;\n      for (let i = 0; i < nodes.length; i++) {\n        max = Math.max(max, getMaxDepth(nodes[i].children, depth + 1));\n      }\n      return max;\n    }\n    const maxDepth = getMaxDepth(rootNodes, 1);\n\n    // 递归分配 value：有原始 value 则保留，无则自动分配\n    function assignValue(nodes) {\n      if (!nodes) return 0;\n      for (let i = 0; i < nodes.length; i++) {\n        if (!nodes[i].children || nodes[i].children.length === 0) {\n          if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n            nodes[i].value = 1;\n          }\n        } else {\n          if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n            nodes[i].value = assignValue(nodes[i].children);\n          } else {\n            // 有 value 时，仍需递归处理子节点\n            assignValue(nodes[i].children);\n          }\n        }\n      }\n      // 返回所有节点 value 之和\n      return nodes.reduce((sum, node) => sum + (node.value || 0), 0);\n    }\n    assignValue(rootNodes);\n\n    // Treemap 要求每个节点有 value, 非叶子节点 value 可为 undefined\n    return {\n      xData: [],\n      yDataArr: [],\n      mergeType: 'treemap',\n      seriesData: rootNodes\n    };\n  }\n\n  // 兜底\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'treemap',\n    seriesData: []\n  };\n}\n\n/**\n * 旭日图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction sunburstChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options)\n  const {\n    nodeID,\n    nodeName,\n    parentID,\n    parentName,\n    nodeValue\n  } = config;\n  // 判定数据是否有效\n  const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n  if (isValid) {\n    const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n    const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n    const parentIDRows = getDataRows(fileDataMap, parentID.file);\n    const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n    const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n    // 构建节点映射\n    const nodeMap = new Map();\n    // 先收集所有 parentId，便于后续层级计算\n    const parentIdSet = new Set();\n    parentIDRows.forEach(row => {\n      if (row && parentID && parentID.field) {\n        const pid = row[parentID.field];\n        if (pid) parentIdSet.add(pid);\n      }\n    });\n\n    // 计算每个节点的层级（根节点为1，子节点依次+1）\n    function getLevel(id, cache = {}) {\n      if (cache[id]) return cache[id];\n      let level = 1;\n      let currentId = id;\n      let idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n      while (idx !== -1) {\n        const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n        if (!parentId || !nodeMap.has(parentId)) break;\n        level++;\n        currentId = parentId;\n        idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n      }\n      cache[id] = level;\n      return level;\n    }\n\n    // 统计最大层级\n    let maxLevel = 1;\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      const level = getLevel(id);\n      if (level > maxLevel) maxLevel = level;\n    });\n\n    // 构建节点，value 按层级递减（根节点最大，叶子最小）\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      if (!id) return;\n      const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n      let value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n      // 层级递减赋值，根节点 value = maxLevel，下一层 maxLevel-1，依次类推\n      if (value === undefined || value === null || isNaN(value)) {\n        const level = getLevel(id);\n        value = Math.max(1, maxLevel - level + 1);\n      }\n      nodeMap.set(id, {\n        id,\n        name,\n        value,\n        children: []\n      });\n    });\n\n    // 构建树结构\n    let rootNodes = [];\n    nodeIDRows.forEach((row, idx) => {\n      const id = row[nodeID.field];\n      const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n      if (!parentId || !nodeMap.has(parentId)) {\n        // 没有父节点，认为是根节点\n        rootNodes.push(nodeMap.get(id));\n      } else {\n        nodeMap.get(parentId).children.push(nodeMap.get(id));\n      }\n    });\n\n    // 递归获取最大层级\n    function getMaxDepth(nodes, depth) {\n      if (!nodes || nodes.length === 0) return depth;\n      let max = depth;\n      for (let i = 0; i < nodes.length; i++) {\n        max = Math.max(max, getMaxDepth(nodes[i].children, depth + 1));\n      }\n      return max;\n    }\n    const maxDepth = getMaxDepth(rootNodes, 1);\n\n    // 递归分配 value：有原始 value 则保留，无则自动分配\n    function assignValue(nodes) {\n      if (!nodes) return 0;\n      for (let i = 0; i < nodes.length; i++) {\n        if (!nodes[i].children || nodes[i].children.length === 0) {\n          if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n            nodes[i].value = 1;\n          }\n        } else {\n          if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n            nodes[i].value = assignValue(nodes[i].children);\n          } else {\n            // 有 value 时，仍需递归处理子节点\n            assignValue(nodes[i].children);\n          }\n        }\n      }\n      // 返回所有节点 value 之和\n      return nodes.reduce((sum, node) => sum + (node.value || 0), 0);\n    }\n    assignValue(rootNodes);\n\n    // Sunburst 要求每个节点有 value, 非叶子节点 value 可为 undefined\n    return {\n      xData: [],\n      yDataArr: [],\n      mergeType: 'sunburst',\n      seriesData: rootNodes\n    };\n  }\n\n  // 兜底\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'sunburst',\n    seriesData: []\n  };\n}\n\n/**\n * 平行坐标系图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction parallelChartHandler(config, fileDataMap, options) {\n  const {\n    dimensions,\n    nameField\n  } = config;\n\n  // 获取数据\n  const dimensionsRows = dimensions.map(dim => getDataRows(fileDataMap, dim.file));\n  const nameRows = nameField ? getDataRows(fileDataMap, nameField.file) : [];\n  const seriesData = {\n    dimensions: dimensionsRows,\n    name: nameRows\n  };\n  return {\n    xData: [],\n    yDataArr: [],\n    mergeType: 'parallel',\n    seriesData\n  };\n}\n\n/**\n * 桑基图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction sankeyChartHandler(config, fileDataMap, options) {\n  // debugInput(config, fileDataMap, options);\n  const {\n    source,\n    target,\n    value\n  } = config;\n\n  // 获取数据\n  const sourceRows = getDataRows(fileDataMap, source.file);\n  const targetRows = getDataRows(fileDataMap, target.file);\n  const valueRows = value ? getDataRows(fileDataMap, value.file) : [];\n  const seriesData = {\n    source: sourceRows.map(row => row[source.field]),\n    target: targetRows.map(row => row[target.field]),\n    value: valueRows.map(row => parseFloat(row[value.field]))\n  };\n  console.log('[sankeyChartHandler] seriesData:', seriesData);\n  return {};\n}\n\n/**\n * 漏斗图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction funnelChartHandler(config, fileDataMap, options) {\n  debugInput(config, fileDataMap, options);\n  return {};\n}\n\n/**\n * 仪表盘图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction gaugeChartHandler(config, fileDataMap, options) {\n  debugInput(config, fileDataMap, options);\n  return {};\n}\n\n/**\n * 象形柱图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction pictorialBarChartHandler(config, fileDataMap, options) {\n  debugInput(config, fileDataMap, options);\n  return {};\n}\n\n/**\n * 主题河流图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction themeRiverChartHandler(config, fileDataMap, options) {\n  debugInput(config, fileDataMap, options);\n  return {};\n}\n\n/**\n * 日历图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction calendarChartHandler(config, fileDataMap, options) {\n  debugInput(config, fileDataMap, options);\n  return {};\n}\n\n// ---------------- 图表类型分发器 ----------------\n\nconst chartTypeHandlers = {\n  Line: xyChartHandler,\n  Bar: xyChartHandler,\n  Pie: pieChartHandler,\n  Scatter: xyChartHandler,\n  Candlestick: candlestickChartHandler,\n  Heatmap: heatmapChartHandler,\n  Radar: radarChartHandler,\n  Boxplot: boxplotChartHandler,\n  Graph: graphChartHandler,\n  Tree: treeChartHandler,\n  Treemap: treemapChartHandler,\n  Sunburst: sunburstChartHandler,\n  Parallel: parallelChartHandler,\n  Sankey: sankeyChartHandler,\n  Funnel: funnelChartHandler,\n  Gauge: gaugeChartHandler,\n  PictorialBar: pictorialBarChartHandler,\n  ThemeRiver: themeRiverChartHandler,\n  Calendar: calendarChartHandler\n  // 其他类型可继续扩展\n};\n\n/**\n * 主入口：合并多文件数据，返回 { xData, yDataArr, mergeType, seriesData }\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {string} [nullHandlingType]\n * @param {Object} [options] - 可选项：filterPlugin, nullHandlingModule\n * @returns {Object}\n */\nexport function mergeChartData(config, fileDataMap, nullHandlingType = 'ignore', options = {}) {\n  validateParams(config, fileDataMap);\n  let chartType = config.type;\n  console.log('[mergeChartData] Inferred chart type:', chartType);\n  const handler = chartTypeHandlers[chartType] || xyChartHandler;\n  console.log('[mergeChartData] Handler:', handler);\n  return handler(config, fileDataMap, {\n    ...options,\n    nullHandlingType\n  });\n}\n\n// applyFiltersToRows 已被插件化，见 defaultFilterPlugin","map":{"version":3,"names":["hasPrimaryKey","xAxis","yAxis","fileDataMap","field","xField","yArr","Array","isArray","every","y","yFileData","file","length","hasOwnProperty","getDataRows","slice","handleNulls","type","arr","nullHandlingModule","handler","ignoreNull","validateParams","config","Error","defaultFilterPlugin","rows","filters","logic","conds","filter","row","results","map","f","val","num","parseFloat","cmp","value","operator","str","String","includes","startsWith","endsWith","boolVal","dateVal","Date","getTime","Boolean","some","BoxplotChartIcon","nullHandling","debugInput","options","console","log","xyChartHandler","source","target","rawData","s","i","nodeSet","Set","forEach","add","nodes","from","name","links","mainData","isAggregate","aggregateFn","filterPlugin","key","undefined","groupMap","Map","has","set","idx","rawVal","parsedVal","Number","isNaN","get","push","xData","keys","defaultAggregate","reduce","a","b","aggFn","yDataArr","mergeType","seriesData","pieChartHandler","catData","category","valData","len","Math","min","result","candlestickChartHandler","nullHandlingType","time","open","close","high","low","sort","o","c","h","l","v","heatmapChartHandler","xRows","yRows","valRows","xSet","ySet","yData","valueMap","x","radarChartHandler","indicator","indicators","item","values","max","ceil","nameRows","RadarPack","seriesData_radar","boxplotChartHandler","series","q1","median","q3","catRows","seriesRows","seriesList","useValue","valArrs","cat","ser","catMap","calcBoxStats","sorted","minV","maxV","medianV","quantile","q1V","q3V","q","pos","base","floor","rest","calcOutliers","stats","IQR","lower","upper","outlierData","flatMap","catIdx","indexOf","outliers","minRows","q1Rows","medianRows","q3Rows","maxRows","rowIdx","catVal","serVal","boxplotPack","seriesData_boxplot","graphChartHandler","nodeID","nodeName","nodeValue","nodeCategory","edgeSource","edgeTarget","edgeWeight","nodeIDRows","nodeNameRows","nodeValueRows","nodeCategoryRows","edgeSourceRows","edgeTargetRows","edgeWeightRows","id","node","edges","weight","edge","graphPack","treeChartHandler","parentID","parentName","path","isValid","parentIDRows","parentNameRows","nodeMap","children","rootNodes","parentId","treemapChartHandler","parentIdSet","pid","getLevel","cache","level","currentId","findIndex","maxLevel","getMaxDepth","depth","maxDepth","assignValue","sum","sunburstChartHandler","parallelChartHandler","dimensions","nameField","dimensionsRows","dim","sankeyChartHandler","sourceRows","targetRows","valueRows","funnelChartHandler","gaugeChartHandler","pictorialBarChartHandler","themeRiverChartHandler","calendarChartHandler","chartTypeHandlers","Line","Bar","Pie","Scatter","Candlestick","Heatmap","Radar","Boxplot","Graph","Tree","Treemap","Sunburst","Parallel","Sankey","Funnel","Gauge","PictorialBar","ThemeRiver","Calendar","mergeChartData","chartType"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/utils/dataMergeUtils.js"],"sourcesContent":["// dataMergeUtils.js\n// 多文件数据合并与主键处理工具函数\n// 根据不同图表类型，主函数分发到对应的处理器进行数据处理，生成能够绘制图表的数据\n\n/*\n关键函数 mergeChartData(config, fileDataMap, nullHandlingType, options)\n    参数校验 validateParams\n    类型\n    图表类型分发器 chartTypeHandlers[type]\n    数据提取 getDataRows\n    过滤器插件 options.filterPlugin 或 defaultFilterPlugin\n    缺失值处理插件 handleNulls (调用 nullHandlingModule 中的具体方法)\n    主键合并 如有多文件/多字段，合并主键\n    组装seriesData 生成最终用于图表的数据结构\n    返回 {xData, yDataArr, mergeType, seriesData}\n*/\n\n/* eslint-disable */\n\n/**\n * @typedef {Object} AxisConfig\n * @property {string} file - 数据文件名\n * @property {string} field - 字段名\n */\n\n/**\n * @typedef {Object} ChartConfig\n * @property {AxisConfig} [xAxis]\n * @property {AxisConfig|AxisConfig[]} [yAxis]\n * @property {AxisConfig} [category]\n * @property {AxisConfig} [value]\n * @property {Object} [filter]\n * @property {string} [type] - 图表类型，如 'pie', 'line', 'bar' 等\n */\n\n/**\n * @typedef {Object.<string, Array<Object>>} FileDataMap\n */\n\n\n/**\n * 判断是否有主键（即所有y轴字段的文件都包含x轴字段）\n * @param {AxisConfig} xAxis\n * @param {AxisConfig|AxisConfig[]} yAxis\n * @param {FileDataMap} fileDataMap\n * @returns {boolean}\n */\nexport function hasPrimaryKey(xAxis, yAxis, fileDataMap) {\n    if (!xAxis || !xAxis.field) return false;\n    const xField = xAxis.field;\n    const yArr = Array.isArray(yAxis) ? yAxis : [yAxis];\n    return yArr.every(y => {\n        const yFileData = fileDataMap[y.file];\n        return yFileData && yFileData.length > 0 && yFileData[0].hasOwnProperty(xField);\n    });\n}\n\n\n// ---------------- 通用数据处理工具函数 ----------------\n\n/**\n * 提取数据并去掉标题行\n * @param {FileDataMap} fileDataMap\n * @param {string} file\n * @returns {Array<Object>}\n */\nfunction getDataRows(fileDataMap, file) {\n    return (fileDataMap[file] || []).slice(1);\n}\n\n/**\n * 通用缺失值处理器分发\n * @param {string} type\n * @param {Array} arr\n * @param {Object} nullHandlingModule\n * @returns {Array}\n */\nfunction handleNulls(type, arr, nullHandlingModule) {\n    if (!type || type === 'ignore') return arr;\n    const handler = nullHandlingModule[type] || nullHandlingModule.ignoreNull;\n    return handler(arr);\n}\n\n/**\n * 参数校验\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n */\nfunction validateParams(config, fileDataMap) {\n    if (!config || typeof config !== 'object') throw new Error('config must be an object');\n    if (!fileDataMap || typeof fileDataMap !== 'object') throw new Error('fileDataMap must be an object');\n}\n\n// ---------------- 过滤器插件化 ----------------\n\n/**\n * 过滤器插件，默认实现\n * @param {Array} rows\n * @param {Object} filters\n * @returns {Array}\n */\nexport function defaultFilterPlugin(rows, filters) {\n    if (!filters || !filters.filters || !Array.isArray(filters.filters) || filters.filters.length === 0) return rows;\n    const logic = filters.logic || 'AND';\n    const conds = filters.filters || [];\n    if (conds.length === 0) return rows;\n    return rows.filter(row => {\n        const results = conds.map(f => {\n            const val = row[f.field];\n            switch (f.type) {\n                case 'integer': {\n                    const num = parseFloat(val);\n                    const cmp = parseFloat(f.value);\n                    if (f.operator === 'eq') return num === cmp;\n                    if (f.operator === 'ne') return num !== cmp;\n                    if (f.operator === 'gt') return num > cmp;\n                    if (f.operator === 'ge') return num >= cmp;\n                    if (f.operator === 'lt') return num < cmp;\n                    if (f.operator === 'le') return num <= cmp;\n                    return true;\n                }\n                case 'string': {\n                    const str = String(val ?? '');\n                    const cmp = String(f.value ?? '');\n                    if (f.operator === 'eq') return str === cmp;\n                    if (f.operator === 'ne') return str !== cmp;\n                    if (f.operator === 'contains') return str.includes(cmp);\n                    if (f.operator === 'notcontains') return !str.includes(cmp);\n                    if (f.operator === 'startsWith') return str.startsWith(cmp);\n                    if (f.operator === 'endsWith') return str.endsWith(cmp);\n                    return true;\n                }\n                case 'category': {\n                    if (f.operator === 'eq') return val === f.value;\n                    if (f.operator === 'ne') return val !== f.value;\n                    if (f.operator === 'in') return Array.isArray(f.value) ? f.value.includes(val) : false;\n                    if (f.operator === 'notin') return Array.isArray(f.value) ? !f.value.includes(val) : false;\n                    return true;\n                }\n                case 'boolean': {\n                    const boolVal = val === true || val === 'true' || val === 1 || val === '1';\n                    const cmp = f.value === true || f.value === 'true' || f.value === 1 || f.value === '1';\n                    if (f.operator === 'eq') return boolVal === cmp;\n                    if (f.operator === 'ne') return boolVal !== cmp;\n                    return true;\n                }\n                case 'date': {\n                    const dateVal = new Date(val).getTime();\n                    const cmp = new Date(f.value).getTime();\n                    if (f.operator === 'eq') return dateVal === cmp;\n                    if (f.operator === 'ne') return dateVal !== cmp;\n                    if (f.operator === 'before') return dateVal < cmp;\n                    if (f.operator === 'after') return dateVal > cmp;\n                    return true;\n                }\n                default:\n                    return true;\n            }\n        });\n        return logic === 'AND' ? results.every(Boolean) : results.some(Boolean);\n    });\n}\n\nimport BoxplotChartIcon from '../../../components/svg/BoxplotChartIcon.vue';\n/**\n * 合并多文件数据，返回 { xData, yDataArr, mergeType, seriesData }\n * @param {Object} config - chartConfig\n * @param {Object} fileDataMap - 文件名到对象数组的映射\n * @returns {Object}\n */\n\nimport * as nullHandling from './nullHandling.js';\n\n// ---------------- 图表类型处理器 ----------------\n\n// 调试输入函数\nfunction debugInput(config, fileDataMap, options) {\n    console.log('[--debugInput {Chart Type Processor}--] config:', config);\n    console.log('[--debugInput {Chart Type Processor}--] fileDataMap:', fileDataMap);\n    console.log('[--debugInput {Chart Type Processor}--] options:', options);\n}\n\n/**\n * 通用 x/y 图表（如折线、柱状等）数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction xyChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options);\n    const { source, target, value } = config;\n\n    // 1. 合并为对象数组\n    const rawData = Array.isArray(source) && Array.isArray(target) && Array.isArray(value)\n        ? source.map((s, i) => ({\n            source: s,\n            target: target[i],\n            value: value[i]\n        }))\n        : [];\n\n    // 2. 收集所有节点\n    const nodeSet = new Set();\n    rawData.forEach(row => {\n        nodeSet.add(row.source);\n        nodeSet.add(row.target);\n    });\n    const nodes = Array.from(nodeSet).map(name => ({ name }));\n\n    // 3. links\n    const links = rawData.map(row => ({\n        source: row.source,\n        target: row.target,\n        value: row.value\n    }));\n\n    return { nodes, links };\n    let mainData = getDataRows(fileDataMap, xAxis.file);\n    const { isAggregate = true, aggregateFn } = options;\n    // 应用过滤\n    if (config.filter && config.filter.filters && config.filter.filters.length) {\n        mainData = filterPlugin(mainData, config.filter);\n    }\n    // 只过滤空行，不去重\n    mainData = mainData.filter(row => {\n        const key = row[xAxis.field];\n        return key !== undefined && key !== null && key !== '';\n    });\n    const yArr = Array.isArray(yAxis) ? yAxis : [yAxis];\n    if (isAggregate) {\n        // 按 name 分组聚合，可自定义聚合方式\n        const groupMap = new Map(); // key: name, value: [ [y1, y2, ...], [y1, y2, ...], ... ]\n        for (const row of mainData) {\n            const key = row[xAxis.field];\n            if (!groupMap.has(key)) {\n                groupMap.set(key, yArr.map(() => []));\n            }\n            yArr.forEach((y, idx) => {\n                const rawVal = row[y.field];\n                const parsedVal = parseFloat(rawVal);\n                if (rawVal !== null && rawVal !== undefined && rawVal !== '' && !Number.isNaN(parsedVal)) {\n                    groupMap.get(key)[idx].push(parsedVal);\n                }\n            });\n        }\n        const xData = Array.from(groupMap.keys());\n        // 默认聚合函数为累加\n        const defaultAggregate = arr => arr.reduce((a, b) => a + b, 0);\n        const aggFn = typeof aggregateFn === 'function' ? aggregateFn : defaultAggregate;\n        const yDataArr = yArr.map((y, idx) => xData.map(name => aggFn(groupMap.get(name)[idx])));\n        return { xData, yDataArr, mergeType: 'groupByName', seriesData: [] };\n    } else {\n        // 返回原始未聚合数据\n        const xData = mainData.map(row => row[xAxis.field]);\n        const yDataArr = yArr.map(y => mainData.map(row => {\n            const rawVal = row[y.field];\n            const parsedVal = parseFloat(rawVal);\n            return (rawVal === null || rawVal === undefined || rawVal === '' || Number.isNaN(parsedVal)) ? null : parsedVal;\n        }));\n        return { xData, yDataArr, mergeType: 'raw', seriesData: [] };\n    }\n}\n\n/**\n * 饼图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction pieChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { filterPlugin = defaultFilterPlugin } = options;\n    let catData = getDataRows(fileDataMap, config.category.file);\n    let valData = getDataRows(fileDataMap, config.value.file);\n    // 应用过滤\n    if (config.filter && config.filter.filters && config.filter.filters.length) {\n        catData = filterPlugin(catData, config.filter);\n        valData = filterPlugin(valData, config.filter);\n    }\n    const len = Math.min(catData.length, valData.length);\n    const result = [];\n    for (let i = 0; i < len; i++) {\n        const name = catData[i][config.category.field];\n        const rawVal = valData[i][config.value.field];\n        const parsedVal = parseFloat(rawVal);\n        const val = (rawVal === null || rawVal === undefined || rawVal === '' || Number.isNaN(parsedVal)) ? null : parsedVal;\n        if (name !== undefined && name !== null && name !== '') {\n            result.push({ name, value: val });\n        }\n    }\n    return { xData: [], yDataArr: [], mergeType: 'pie', seriesData: result };\n}\n\n/**\n * K线图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction candlestickChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { nullHandlingType = 'ignore', nullHandlingModule = nullHandling, filterPlugin = defaultFilterPlugin } = options;\n    const { time, open, close, high, low, filter } = config;\n    // 提取主文件数据\n    let mainData = getDataRows(fileDataMap, time.file);\n    if (filter && filter.filters && filter.filters.length) {\n        mainData = filterPlugin(mainData, filter);\n    }\n    // 按时间字段排序\n    mainData.sort((a, b) => {\n        if (a[time.field] < b[time.field]) return -1;\n        if (a[time.field] > b[time.field]) return 1;\n        return 0;\n    });\n    // 组装 xData 和 seriesData\n    const xData = mainData.map(row => row[time.field]);\n    const seriesData = mainData.map(row => {\n        const o = parseFloat(row[open.field]);\n        const c = parseFloat(row[close.field]);\n        const h = parseFloat(row[high.field]);\n        const l = parseFloat(row[low.field]);\n        // 缺失值处理\n        const arr = [o, c, l, h].map(v => (v === null || v === undefined || v === '' || Number.isNaN(v)) ? null : v);\n        return handleNulls(nullHandlingType, arr, nullHandlingModule);\n    });\n    return { xData, yDataArr: [seriesData], mergeType: 'candlestick', seriesData };\n}\n\n/**\n * 热力图数据处理器（主键合并，一一对应）\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction heatmapChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { xAxis, yAxis, value } = config;\n    // 获取所有数据行\n    const xRows = getDataRows(fileDataMap, xAxis.file);\n    const yRows = getDataRows(fileDataMap, yAxis.file);\n    const valRows = getDataRows(fileDataMap, value.file);\n\n    // 收集所有x、y的取值（类别）\n    const xSet = new Set(xRows.map(row => row[xAxis.field]));\n    const ySet = new Set(yRows.map(row => row[yAxis.field]));\n    const xData = Array.from(xSet);\n    const yData = Array.from(ySet);\n\n    // 构建value映射\n    const valueMap = new Map();\n    valRows.forEach(row => {\n        // 优先用valRows里的x/y字段，否则用xRows/yRows索引补齐\n        const x = row[xAxis.field] !== undefined ? row[xAxis.field] : null;\n        const y = row[yAxis.field] !== undefined ? row[yAxis.field] : null;\n        if (x !== null && y !== null) {\n            const key = `${x}|${y}`;\n            valueMap.set(key, row[value.field]);\n        }\n    });\n\n    // 生成 seriesData，补齐所有 (x, y) 组合\n    const seriesData = [];\n    yData.forEach(y => {\n        xData.forEach(x => {\n            const key = `${x}|${y}`;\n            const v = valueMap.has(key) ? valueMap.get(key) : null;\n            seriesData.push([x, y, v]);\n        });\n    });\n    return { xData, yData, mergeType: 'heatmap', seriesData };\n}\n\n\n/**\n * 雷达图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction radarChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { indicator, value, name } = config;\n\n    // 维度配置\n    const indicators = indicator.map(item => {\n        const rows = getDataRows(fileDataMap, item.file);\n        const values = rows.map(row => row[item.field]).filter(v => v !== undefined && v !== null);\n        const max = Math.ceil(Math.max(...values.map(v => Number(v))) * 1.2); // 乘以安全系数\n        return {\n            name: item.field,\n            max: max || 100\n        };\n    });\n\n    // 系列数据\n    const nameRows = getDataRows(fileDataMap, name.file);\n    const seriesData = nameRows.map(row => {\n        const values = value.map(item => row[item.field]);\n        return {\n            name: row[name.field],\n            value: values\n        };\n    });\n\n    // 先封装传输\n    const RadarPack = {\n        indicator: indicators,\n        seriesData_radar: seriesData,\n    }\n    return { xData: [], yData: [], mergeType: 'radar', seriesData: RadarPack };\n}\n\n/**\n * 箱线图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction boxplotChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    // 解析配置\n    const { category, series, value, min, q1, median, q3, max } = config;\n    // 获取数据行\n    const catRows = getDataRows(fileDataMap, category.file);\n    const seriesRows = series ? getDataRows(fileDataMap, series.file) : null;\n    // 收集所有分组和系列\n    const xData = Array.from(new Set(catRows.map(row => row[category.field])));\n    let seriesList = seriesRows ? Array.from(new Set(seriesRows.map(row => row[series.field]))) : null;\n    if (!seriesList || seriesList.length === 0) seriesList = ['default'];\n\n    let useValue = !!value;\n    let valArrs = [];\n    if (useValue) {\n        if (Array.isArray(value)) {\n            valArrs = value.map(v => getDataRows(fileDataMap, v.file).map(row => parseFloat(row[v.field])));\n        } else {\n            valArrs = [getDataRows(fileDataMap, value.file).map(row => parseFloat(row[value.field]))];\n        }\n    }\n\n    // 构建分组：series -> category -> [values]\n    const groupMap = new Map(); // key: series, value: Map(category, [values])\n    catRows.forEach((row, idx) => {\n        const cat = row[category.field];\n        const ser = (seriesRows && seriesRows[idx] && series.field) ? seriesRows[idx][series.field] : 'default';\n        if (!groupMap.has(ser)) groupMap.set(ser, new Map());\n        const catMap = groupMap.get(ser);\n        if (!catMap.has(cat)) catMap.set(cat, []);\n        if (useValue) {\n            valArrs.forEach(arr => {\n                if (arr[idx] !== undefined && !Number.isNaN(arr[idx])) {\n                    catMap.get(cat).push(arr[idx]);\n                }\n            });\n        }\n    });\n\n    // 计算统计量\n    function calcBoxStats(arr) {\n        if (!arr || arr.length === 0) return [null, null, null, null, null];\n        const sorted = arr.slice().sort((a, b) => a - b);\n        const minV = sorted[0];\n        const maxV = sorted[sorted.length - 1];\n        const medianV = quantile(sorted, 0.5);\n        const q1V = quantile(sorted, 0.25);\n        const q3V = quantile(sorted, 0.75);\n        return [minV, q1V, medianV, q3V, maxV];\n    }\n    function quantile(arr, q) {\n        const pos = (arr.length - 1) * q;\n        const base = Math.floor(pos);\n        const rest = pos - base;\n        if (arr[base + 1] !== undefined) {\n            return arr[base] + rest * (arr[base + 1] - arr[base]);\n        } else {\n            return arr[base];\n        }\n    }\n\n    // 计算异常值（outlier）\n    function calcOutliers(arr, stats) {\n        if (!arr || arr.length === 0) return [];\n        const [min, q1, median, q3, max] = stats;\n        // 1.5倍四分位距法\n        const IQR = q3 - q1;\n        const lower = q1 - 1.5 * IQR;\n        const upper = q3 + 1.5 * IQR;\n        return arr.filter(v => v < lower || v > upper);\n    }\n\n    // 组装 seriesData: 每个系列一个数组，数组顺序与 xData一致\n    let seriesData, outlierData;\n    if (useValue) {\n        // 自动计算五数和异常值\n        seriesData = seriesList.map(ser => {\n            const catMap = groupMap.get(ser) || new Map();\n            return xData.map(cat => calcBoxStats(catMap.get(cat) || []));\n        });\n        // 计算异常值\n        outlierData = seriesList.map(ser => {\n            const catMap = groupMap.get(ser) || new Map();\n            return xData.flatMap((cat, catIdx) => {\n                const arr = catMap.get(cat) || [];\n                const stats = seriesData[seriesList.indexOf(ser)][catIdx];\n                const outliers = calcOutliers(arr, stats);\n                // 返回 [x轴索引, 异常值]，ECharts scatter 需要这种格式\n                return outliers.map(v => [catIdx, v]);\n            });\n        });\n    } else {\n        // 直接读取五数\n        const minRows = min ? getDataRows(fileDataMap, min.file) : null;\n        const q1Rows = q1 ? getDataRows(fileDataMap, q1.file) : null;\n        const medianRows = median ? getDataRows(fileDataMap, median.file) : null;\n        const q3Rows = q3 ? getDataRows(fileDataMap, q3.file) : null;\n        const maxRows = max ? getDataRows(fileDataMap, max.file) : null;\n        seriesData = seriesList.map(ser => {\n            return xData.map((cat, idx) => {\n                let rowIdx = -1;\n                for (let i = 0; i < catRows.length; i++) {\n                    const catVal = catRows[i][category.field];\n                    const serVal = seriesRows ? seriesRows[i][series.field] : 'default';\n                    if (catVal === cat && serVal === ser) {\n                        rowIdx = i;\n                        break;\n                    }\n                }\n                if (rowIdx === -1) return [null, null, null, null, null];\n                return [\n                    minRows ? parseFloat(minRows[rowIdx][min.field]) : null,\n                    q1Rows ? parseFloat(q1Rows[rowIdx][q1.field]) : null,\n                    medianRows ? parseFloat(medianRows[rowIdx][median.field]) : null,\n                    q3Rows ? parseFloat(q3Rows[rowIdx][q3.field]) : null,\n                    maxRows ? parseFloat(maxRows[rowIdx][max.field]) : null\n                ];\n            });\n        });\n        // 无法自动计算异常值\n        outlierData = seriesList.map(() => []);\n    }\n\n    const boxplotPack = {\n        seriesList: seriesList,\n        seriesData_boxplot: seriesData,\n        outlierData: outlierData\n    }\n\n    return {\n        xData,\n        yDataArr: [],\n        mergeType: 'boxplot',\n        seriesData: boxplotPack\n    };\n}\n\n/**\n * 关系图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction graphChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options);\n    const { nodeID, nodeName, nodeValue, nodeCategory, edgeSource, edgeTarget, edgeWeight } = config;\n\n    // 必填字段校验\n    if (!nodeID || !nodeID.file || !nodeID.field) throw new Error('nodeID为必填项');\n    if (!edgeSource || !edgeSource.file || !edgeSource.field) throw new Error('edgeSource为必填项');\n    if (!edgeTarget || !edgeTarget.file || !edgeTarget.field) throw new Error('edgeTarget为必填项');\n\n    //获取数据行\n    const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n    const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n    const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n    const nodeCategoryRows = nodeCategory && nodeCategory.file ? getDataRows(fileDataMap, nodeCategory.file) : [];\n    const edgeSourceRows = getDataRows(fileDataMap, edgeSource.file);\n    const edgeTargetRows = getDataRows(fileDataMap, edgeTarget.file);\n    const edgeWeightRows = edgeWeight && edgeWeight.file ? getDataRows(fileDataMap, edgeWeight.file) : [];\n\n    // 节点去重，只保留每个id的第一个节点\n    const nodes = [];\n    const nodeSet = new Set();\n    nodeIDRows.forEach((row, idx) => {\n        const id = row[nodeID.field];\n        if (id !== undefined && id !== null && id !== '' && !nodeSet.has(id)) {\n            const name = (nodeNameRows[idx] && nodeName && nodeName.field) ? nodeNameRows[idx][nodeName.field] : id;\n            const value = (nodeValueRows[idx] && nodeValue && nodeValue.field) ? parseFloat(nodeValueRows[idx][nodeValue.field]) : 1;\n            const category = (nodeCategoryRows[idx] && nodeCategory && nodeCategory.field) ? nodeCategoryRows[idx][nodeCategory.field] : '';\n            const node = { id };\n            if (name !== undefined) node.name = name;\n            if (value !== undefined) node.value = value;\n            if (category !== undefined) node.category = category;\n            nodes.push(node);\n            nodeSet.add(id);\n        }\n    });\n\n    // 生成边数据，source/target直接用id字符串\n    const edges = [];\n    edgeSourceRows.forEach((row, idx) => {\n        const source = row[edgeSource.field];\n        const target = edgeTargetRows[idx] ? edgeTargetRows[idx][edgeTarget.field] : undefined;\n        const weight = (edgeWeightRows[idx] && edgeWeight && edgeWeight.field) ? parseFloat(edgeWeightRows[idx][edgeWeight.field]) : 1;\n        if (source !== undefined && source !== null && source !== '' &&\n            target !== undefined && target !== null && target !== '') {\n            const edge = { source: String(source), target: String(target) };\n            if (!isNaN(weight)) edge.weight = weight;\n            edges.push(edge);\n        }\n    });\n\n    // 打包\n    const graphPack = {\n        nodes: nodes,\n        edges: edges\n    };\n\n    return {\n        xData: [],\n        yDataArr: [],\n        mergeType: 'graph',\n        seriesData: graphPack,\n    };\n}\n\n/**\n * 树图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction treeChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { nodeID, nodeName, parentID, parentName, nodeValue, path } = config;\n    // 合理判定：有 nodeID 和 parentID 字段\n    const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n\n    // 平铺模式处理\n    if (isValid) {\n        const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n        const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n        const parentIDRows = getDataRows(fileDataMap, parentID.file);\n        const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n        const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n        // 构建节点映射\n        const nodeMap = new Map();\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            if (!id) return;\n            const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n            const value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n            nodeMap.set(id, {\n                id,\n                name,\n                value,\n                children: []\n            });\n        });\n\n        // 构建树结构\n        let rootNodes = [];\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n            if (!parentId || !nodeMap.has(parentId)) {\n                // 没有父节点，认为是根节点\n                rootNodes.push(nodeMap.get(id));\n            } else {\n                nodeMap.get(parentId).children.push(nodeMap.get(id));\n            }\n        });\n\n        // 只返回根节点数组\n        return {\n            xData: [],\n            yDataArr: [],\n            mergeType: 'tree',\n            seriesData: rootNodes\n        };\n    }\n\n    // 兜底\n    return {\n        xData: [],\n        yDataArr: [],\n        mergeType: 'tree',\n        seriesData: []\n    };\n}\n\n/**\n * 矩形树图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction treemapChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { nodeID, nodeName, parentID, parentName, nodeValue } = config;\n    // 判定数据是否有效\n    const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n\n    if (isValid) {\n        const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n        const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n        const parentIDRows = getDataRows(fileDataMap, parentID.file);\n        const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n        const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n        // 构建节点映射\n        const nodeMap = new Map();\n        // 先收集所有 parentId，便于后续层级计算\n        const parentIdSet = new Set();\n        parentIDRows.forEach(row => {\n            if (row && parentID && parentID.field) {\n                const pid = row[parentID.field];\n                if (pid) parentIdSet.add(pid);\n            }\n        });\n\n        // 计算每个节点的层级（根节点为1，子节点依次+1）\n        function getLevel(id, cache = {}) {\n            if (cache[id]) return cache[id];\n            let level = 1;\n            let currentId = id;\n            let idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n            while (idx !== -1) {\n                const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n                if (!parentId || !nodeMap.has(parentId)) break;\n                level++;\n                currentId = parentId;\n                idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n            }\n            cache[id] = level;\n            return level;\n        }\n\n        // 统计最大层级\n        let maxLevel = 1;\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            const level = getLevel(id);\n            if (level > maxLevel) maxLevel = level;\n        });\n\n        // 构建节点，value 按层级递减（根节点最大，叶子最小）\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            if (!id) return;\n            const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n            let value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n            // 层级递减赋值，根节点 value = maxLevel，下一层 maxLevel-1，依次类推\n            if (value === undefined || value === null || isNaN(value)) {\n                const level = getLevel(id);\n                value = Math.max(1, maxLevel - level + 1);\n            }\n            nodeMap.set(id, {\n                id,\n                name,\n                value,\n                children: []\n            });\n        });\n\n        // 构建树结构\n        let rootNodes = [];\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n            if (!parentId || !nodeMap.has(parentId)) {\n                // 没有父节点，认为是根节点\n                rootNodes.push(nodeMap.get(id));\n            } else {\n                nodeMap.get(parentId).children.push(nodeMap.get(id));\n            }\n        });\n\n        // 递归获取最大层级\n        function getMaxDepth(nodes, depth) {\n            if (!nodes || nodes.length === 0) return depth;\n            let max = depth;\n            for (let i = 0; i < nodes.length; i++) {\n                max = Math.max(max, getMaxDepth(nodes[i].children, depth + 1));\n            }\n            return max;\n        }\n        const maxDepth = getMaxDepth(rootNodes, 1);\n\n        // 递归分配 value：有原始 value 则保留，无则自动分配\n        function assignValue(nodes) {\n            if (!nodes) return 0;\n            for (let i = 0; i < nodes.length; i++) {\n                if (!nodes[i].children || nodes[i].children.length === 0) {\n                    if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n                        nodes[i].value = 1;\n                    }\n                } else {\n                    if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n                        nodes[i].value = assignValue(nodes[i].children);\n                    } else {\n                        // 有 value 时，仍需递归处理子节点\n                        assignValue(nodes[i].children);\n                    }\n                }\n            }\n            // 返回所有节点 value 之和\n            return nodes.reduce((sum, node) => sum + (node.value || 0), 0);\n        }\n        assignValue(rootNodes);\n\n        // Treemap 要求每个节点有 value, 非叶子节点 value 可为 undefined\n        return {\n            xData: [],\n            yDataArr: [],\n            mergeType: 'treemap',\n            seriesData: rootNodes\n        };\n    }\n\n    // 兜底\n    return {\n        xData: [],\n        yDataArr: [],\n        mergeType: 'treemap',\n        seriesData: []\n    };\n}\n\n/**\n * 旭日图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction sunburstChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options)\n    const { nodeID, nodeName, parentID, parentName, nodeValue } = config;\n    // 判定数据是否有效\n    const isValid = nodeID && nodeID.file && nodeID.field && parentID && parentID.file && parentID.field;\n\n    if (isValid) {\n        const nodeIDRows = getDataRows(fileDataMap, nodeID.file);\n        const nodeNameRows = nodeName && nodeName.file ? getDataRows(fileDataMap, nodeName.file) : [];\n        const parentIDRows = getDataRows(fileDataMap, parentID.file);\n        const parentNameRows = parentName && parentName.file ? getDataRows(fileDataMap, parentName.file) : [];\n        const nodeValueRows = nodeValue && nodeValue.file ? getDataRows(fileDataMap, nodeValue.file) : [];\n\n        // 构建节点映射\n        const nodeMap = new Map();\n        // 先收集所有 parentId，便于后续层级计算\n        const parentIdSet = new Set();\n        parentIDRows.forEach(row => {\n            if (row && parentID && parentID.field) {\n                const pid = row[parentID.field];\n                if (pid) parentIdSet.add(pid);\n            }\n        });\n\n        // 计算每个节点的层级（根节点为1，子节点依次+1）\n        function getLevel(id, cache = {}) {\n            if (cache[id]) return cache[id];\n            let level = 1;\n            let currentId = id;\n            let idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n            while (idx !== -1) {\n                const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n                if (!parentId || !nodeMap.has(parentId)) break;\n                level++;\n                currentId = parentId;\n                idx = nodeIDRows.findIndex(row => row[nodeID.field] === currentId);\n            }\n            cache[id] = level;\n            return level;\n        }\n\n        // 统计最大层级\n        let maxLevel = 1;\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            const level = getLevel(id);\n            if (level > maxLevel) maxLevel = level;\n        });\n\n        // 构建节点，value 按层级递减（根节点最大，叶子最小）\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            if (!id) return;\n            const name = nodeNameRows[idx] && nodeName && nodeName.field ? nodeNameRows[idx][nodeName.field] : id;\n            let value = nodeValueRows[idx] && nodeValue && nodeValue.field ? parseFloat(nodeValueRows[idx][nodeValue.field]) : undefined;\n            // 层级递减赋值，根节点 value = maxLevel，下一层 maxLevel-1，依次类推\n            if (value === undefined || value === null || isNaN(value)) {\n                const level = getLevel(id);\n                value = Math.max(1, maxLevel - level + 1);\n            }\n            nodeMap.set(id, {\n                id,\n                name,\n                value,\n                children: []\n            });\n        });\n\n        // 构建树结构\n        let rootNodes = [];\n        nodeIDRows.forEach((row, idx) => {\n            const id = row[nodeID.field];\n            const parentId = parentIDRows[idx] ? parentIDRows[idx][parentID.field] : undefined;\n            if (!parentId || !nodeMap.has(parentId)) {\n                // 没有父节点，认为是根节点\n                rootNodes.push(nodeMap.get(id));\n            } else {\n                nodeMap.get(parentId).children.push(nodeMap.get(id));\n            }\n        });\n\n        // 递归获取最大层级\n        function getMaxDepth(nodes, depth) {\n            if (!nodes || nodes.length === 0) return depth;\n            let max = depth;\n            for (let i = 0; i < nodes.length; i++) {\n                max = Math.max(max, getMaxDepth(nodes[i].children, depth + 1));\n            }\n            return max;\n        }\n        const maxDepth = getMaxDepth(rootNodes, 1);\n\n        // 递归分配 value：有原始 value 则保留，无则自动分配\n        function assignValue(nodes) {\n            if (!nodes) return 0;\n            for (let i = 0; i < nodes.length; i++) {\n                if (!nodes[i].children || nodes[i].children.length === 0) {\n                    if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n                        nodes[i].value = 1;\n                    }\n                } else {\n                    if (nodes[i].value === undefined || nodes[i].value === null || isNaN(nodes[i].value)) {\n                        nodes[i].value = assignValue(nodes[i].children);\n                    } else {\n                        // 有 value 时，仍需递归处理子节点\n                        assignValue(nodes[i].children);\n                    }\n                }\n            }\n            // 返回所有节点 value 之和\n            return nodes.reduce((sum, node) => sum + (node.value || 0), 0);\n        }\n        assignValue(rootNodes);\n\n        // Sunburst 要求每个节点有 value, 非叶子节点 value 可为 undefined\n        return {\n            xData: [],\n            yDataArr: [],\n            mergeType: 'sunburst',\n            seriesData: rootNodes\n        };\n    }\n\n    // 兜底\n    return {\n        xData: [],\n        yDataArr: [],\n        mergeType: 'sunburst',\n        seriesData: []\n    };\n}\n\n/**\n * 平行坐标系图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction parallelChartHandler(config, fileDataMap, options) {\n    const { dimensions, nameField } = config;\n\n    // 获取数据\n    const dimensionsRows = dimensions.map(dim => getDataRows(fileDataMap, dim.file));\n    const nameRows = nameField ? getDataRows(fileDataMap, nameField.file) : [];\n\n    const seriesData = {\n        dimensions: dimensionsRows,\n        name: nameRows\n    };\n\n    return {\n        xData: [],\n        yDataArr: [],\n        mergeType: 'parallel',\n        seriesData,\n    };\n}\n\n/**\n * 桑基图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction sankeyChartHandler(config, fileDataMap, options) {\n    // debugInput(config, fileDataMap, options);\n    const { source, target, value } = config;\n\n    // 获取数据\n    const sourceRows = getDataRows(fileDataMap, source.file);\n    const targetRows = getDataRows(fileDataMap, target.file);\n    const valueRows = value ? getDataRows(fileDataMap, value.file) : [];\n\n    const seriesData = {\n        source: sourceRows.map(row => row[source.field]),\n        target: targetRows.map(row => row[target.field]),\n        value: valueRows.map(row => parseFloat(row[value.field])),\n    }\n\n    console.log('[sankeyChartHandler] seriesData:', seriesData);\n\n    return {};\n}\n\n/**\n * 漏斗图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction funnelChartHandler(config, fileDataMap, options) {\n    debugInput(config, fileDataMap, options);\n    return {};\n}\n\n/**\n * 仪表盘图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction gaugeChartHandler(config, fileDataMap, options) {\n    debugInput(config, fileDataMap, options);\n    return {};\n}\n\n/**\n * 象形柱图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction pictorialBarChartHandler(config, fileDataMap, options) {\n    debugInput(config, fileDataMap, options);\n    return {};\n}\n\n/**\n * 主题河流图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction themeRiverChartHandler(config, fileDataMap, options) {\n    debugInput(config, fileDataMap, options);\n    return {};\n}\n\n/**\n * 日历图数据处理器\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {Object} options\n * @returns {Object}\n */\nfunction calendarChartHandler(config, fileDataMap, options) {\n    debugInput(config, fileDataMap, options);\n    return {};\n}\n\n// ---------------- 图表类型分发器 ----------------\n\nconst chartTypeHandlers = {\n    Line: xyChartHandler,\n    Bar: xyChartHandler,\n    Pie: pieChartHandler,\n    Scatter: xyChartHandler,\n    Candlestick: candlestickChartHandler,\n    Heatmap: heatmapChartHandler,\n    Radar: radarChartHandler,\n    Boxplot: boxplotChartHandler,\n    Graph: graphChartHandler,\n    Tree: treeChartHandler,\n    Treemap: treemapChartHandler,\n    Sunburst: sunburstChartHandler,\n    Parallel: parallelChartHandler,\n    Sankey: sankeyChartHandler,\n    Funnel: funnelChartHandler,\n    Gauge: gaugeChartHandler,\n    PictorialBar: pictorialBarChartHandler,\n    ThemeRiver: themeRiverChartHandler,\n    Calendar: calendarChartHandler,\n    // 其他类型可继续扩展\n};\n\n/**\n * 主入口：合并多文件数据，返回 { xData, yDataArr, mergeType, seriesData }\n * @param {ChartConfig} config\n * @param {FileDataMap} fileDataMap\n * @param {string} [nullHandlingType]\n * @param {Object} [options] - 可选项：filterPlugin, nullHandlingModule\n * @returns {Object}\n */\nexport function mergeChartData(config, fileDataMap, nullHandlingType = 'ignore', options = {}) {\n    validateParams(config, fileDataMap);\n    let chartType = config.type;\n\n    console.log('[mergeChartData] Inferred chart type:', chartType);\n\n    const handler = chartTypeHandlers[chartType] || xyChartHandler;\n\n    console.log('[mergeChartData] Handler:', handler);\n\n    return handler(config, fileDataMap, { ...options, nullHandlingType });\n}\n\n// applyFiltersToRows 已被插件化，见 defaultFilterPlugin\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAE;EACrD,IAAI,CAACF,KAAK,IAAI,CAACA,KAAK,CAACG,KAAK,EAAE,OAAO,KAAK;EACxC,MAAMC,MAAM,GAAGJ,KAAK,CAACG,KAAK;EAC1B,MAAME,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;EACnD,OAAOI,IAAI,CAACG,KAAK,CAACC,CAAC,IAAI;IACnB,MAAMC,SAAS,GAAGR,WAAW,CAACO,CAAC,CAACE,IAAI,CAAC;IACrC,OAAOD,SAAS,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC,IAAIF,SAAS,CAAC,CAAC,CAAC,CAACG,cAAc,CAACT,MAAM,CAAC;EACnF,CAAC,CAAC;AACN;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,WAAWA,CAACZ,WAAW,EAAES,IAAI,EAAE;EACpC,OAAO,CAACT,WAAW,CAACS,IAAI,CAAC,IAAI,EAAE,EAAEI,KAAK,CAAC,CAAC,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,IAAI,EAAEC,GAAG,EAAEC,kBAAkB,EAAE;EAChD,IAAI,CAACF,IAAI,IAAIA,IAAI,KAAK,QAAQ,EAAE,OAAOC,GAAG;EAC1C,MAAME,OAAO,GAAGD,kBAAkB,CAACF,IAAI,CAAC,IAAIE,kBAAkB,CAACE,UAAU;EACzE,OAAOD,OAAO,CAACF,GAAG,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASI,cAAcA,CAACC,MAAM,EAAErB,WAAW,EAAE;EACzC,IAAI,CAACqB,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACtF,IAAI,CAACtB,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAIsB,KAAK,CAAC,+BAA+B,CAAC;AACzG;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC/C,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACA,OAAO,IAAI,CAACrB,KAAK,CAACC,OAAO,CAACoB,OAAO,CAACA,OAAO,CAAC,IAAIA,OAAO,CAACA,OAAO,CAACf,MAAM,KAAK,CAAC,EAAE,OAAOc,IAAI;EAChH,MAAME,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,KAAK;EACpC,MAAMC,KAAK,GAAGF,OAAO,CAACA,OAAO,IAAI,EAAE;EACnC,IAAIE,KAAK,CAACjB,MAAM,KAAK,CAAC,EAAE,OAAOc,IAAI;EACnC,OAAOA,IAAI,CAACI,MAAM,CAACC,GAAG,IAAI;IACtB,MAAMC,OAAO,GAAGH,KAAK,CAACI,GAAG,CAACC,CAAC,IAAI;MAC3B,MAAMC,GAAG,GAAGJ,GAAG,CAACG,CAAC,CAAC/B,KAAK,CAAC;MACxB,QAAQ+B,CAAC,CAACjB,IAAI;QACV,KAAK,SAAS;UAAE;YACZ,MAAMmB,GAAG,GAAGC,UAAU,CAACF,GAAG,CAAC;YAC3B,MAAMG,GAAG,GAAGD,UAAU,CAACH,CAAC,CAACK,KAAK,CAAC;YAC/B,IAAIL,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,KAAKE,GAAG;YAC3C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,KAAKE,GAAG;YAC3C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,GAAGE,GAAG;YACzC,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,IAAIE,GAAG;YAC1C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,GAAGE,GAAG;YACzC,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOJ,GAAG,IAAIE,GAAG;YAC1C,OAAO,IAAI;UACf;QACA,KAAK,QAAQ;UAAE;YACX,MAAMG,GAAG,GAAGC,MAAM,CAACP,GAAG,IAAI,EAAE,CAAC;YAC7B,MAAMG,GAAG,GAAGI,MAAM,CAACR,CAAC,CAACK,KAAK,IAAI,EAAE,CAAC;YACjC,IAAIL,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOC,GAAG,KAAKH,GAAG;YAC3C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOC,GAAG,KAAKH,GAAG;YAC3C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,UAAU,EAAE,OAAOC,GAAG,CAACE,QAAQ,CAACL,GAAG,CAAC;YACvD,IAAIJ,CAAC,CAACM,QAAQ,KAAK,aAAa,EAAE,OAAO,CAACC,GAAG,CAACE,QAAQ,CAACL,GAAG,CAAC;YAC3D,IAAIJ,CAAC,CAACM,QAAQ,KAAK,YAAY,EAAE,OAAOC,GAAG,CAACG,UAAU,CAACN,GAAG,CAAC;YAC3D,IAAIJ,CAAC,CAACM,QAAQ,KAAK,UAAU,EAAE,OAAOC,GAAG,CAACI,QAAQ,CAACP,GAAG,CAAC;YACvD,OAAO,IAAI;UACf;QACA,KAAK,UAAU;UAAE;YACb,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOL,GAAG,KAAKD,CAAC,CAACK,KAAK;YAC/C,IAAIL,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOL,GAAG,KAAKD,CAAC,CAACK,KAAK;YAC/C,IAAIL,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOlC,KAAK,CAACC,OAAO,CAAC2B,CAAC,CAACK,KAAK,CAAC,GAAGL,CAAC,CAACK,KAAK,CAACI,QAAQ,CAACR,GAAG,CAAC,GAAG,KAAK;YACtF,IAAID,CAAC,CAACM,QAAQ,KAAK,OAAO,EAAE,OAAOlC,KAAK,CAACC,OAAO,CAAC2B,CAAC,CAACK,KAAK,CAAC,GAAG,CAACL,CAAC,CAACK,KAAK,CAACI,QAAQ,CAACR,GAAG,CAAC,GAAG,KAAK;YAC1F,OAAO,IAAI;UACf;QACA,KAAK,SAAS;UAAE;YACZ,MAAMW,OAAO,GAAGX,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,GAAG;YAC1E,MAAMG,GAAG,GAAGJ,CAAC,CAACK,KAAK,KAAK,IAAI,IAAIL,CAAC,CAACK,KAAK,KAAK,MAAM,IAAIL,CAAC,CAACK,KAAK,KAAK,CAAC,IAAIL,CAAC,CAACK,KAAK,KAAK,GAAG;YACtF,IAAIL,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOM,OAAO,KAAKR,GAAG;YAC/C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOM,OAAO,KAAKR,GAAG;YAC/C,OAAO,IAAI;UACf;QACA,KAAK,MAAM;UAAE;YACT,MAAMS,OAAO,GAAG,IAAIC,IAAI,CAACb,GAAG,CAAC,CAACc,OAAO,CAAC,CAAC;YACvC,MAAMX,GAAG,GAAG,IAAIU,IAAI,CAACd,CAAC,CAACK,KAAK,CAAC,CAACU,OAAO,CAAC,CAAC;YACvC,IAAIf,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOO,OAAO,KAAKT,GAAG;YAC/C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,IAAI,EAAE,OAAOO,OAAO,KAAKT,GAAG;YAC/C,IAAIJ,CAAC,CAACM,QAAQ,KAAK,QAAQ,EAAE,OAAOO,OAAO,GAAGT,GAAG;YACjD,IAAIJ,CAAC,CAACM,QAAQ,KAAK,OAAO,EAAE,OAAOO,OAAO,GAAGT,GAAG;YAChD,OAAO,IAAI;UACf;QACA;UACI,OAAO,IAAI;MACnB;IACJ,CAAC,CAAC;IACF,OAAOV,KAAK,KAAK,KAAK,GAAGI,OAAO,CAACxB,KAAK,CAAC0C,OAAO,CAAC,GAAGlB,OAAO,CAACmB,IAAI,CAACD,OAAO,CAAC;EAC3E,CAAC,CAAC;AACN;AAEA,OAAOE,gBAAgB,MAAM,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKC,YAAY,MAAM,mBAAmB;;AAEjD;;AAEA;AACA,SAASC,UAAUA,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EAC9CC,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAElC,MAAM,CAAC;EACtEiC,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEvD,WAAW,CAAC;EAChFsD,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEF,OAAO,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CAACnC,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EAClD;EACA,MAAM;IAAEI,MAAM;IAAEC,MAAM;IAAErB;EAAM,CAAC,GAAGhB,MAAM;;EAExC;EACA,MAAMsC,OAAO,GAAGvD,KAAK,CAACC,OAAO,CAACoD,MAAM,CAAC,IAAIrD,KAAK,CAACC,OAAO,CAACqD,MAAM,CAAC,IAAItD,KAAK,CAACC,OAAO,CAACgC,KAAK,CAAC,GAChFoB,MAAM,CAAC1B,GAAG,CAAC,CAAC6B,CAAC,EAAEC,CAAC,MAAM;IACpBJ,MAAM,EAAEG,CAAC;IACTF,MAAM,EAAEA,MAAM,CAACG,CAAC,CAAC;IACjBxB,KAAK,EAAEA,KAAK,CAACwB,CAAC;EAClB,CAAC,CAAC,CAAC,GACD,EAAE;;EAER;EACA,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzBJ,OAAO,CAACK,OAAO,CAACnC,GAAG,IAAI;IACnBiC,OAAO,CAACG,GAAG,CAACpC,GAAG,CAAC4B,MAAM,CAAC;IACvBK,OAAO,CAACG,GAAG,CAACpC,GAAG,CAAC6B,MAAM,CAAC;EAC3B,CAAC,CAAC;EACF,MAAMQ,KAAK,GAAG9D,KAAK,CAAC+D,IAAI,CAACL,OAAO,CAAC,CAAC/B,GAAG,CAACqC,IAAI,KAAK;IAAEA;EAAK,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMC,KAAK,GAAGV,OAAO,CAAC5B,GAAG,CAACF,GAAG,KAAK;IAC9B4B,MAAM,EAAE5B,GAAG,CAAC4B,MAAM;IAClBC,MAAM,EAAE7B,GAAG,CAAC6B,MAAM;IAClBrB,KAAK,EAAER,GAAG,CAACQ;EACf,CAAC,CAAC,CAAC;EAEH,OAAO;IAAE6B,KAAK;IAAEG;EAAM,CAAC;EACvB,IAAIC,QAAQ,GAAG1D,WAAW,CAACZ,WAAW,EAAEF,KAAK,CAACW,IAAI,CAAC;EACnD,MAAM;IAAE8D,WAAW,GAAG,IAAI;IAAEC;EAAY,CAAC,GAAGnB,OAAO;EACnD;EACA,IAAIhC,MAAM,CAACO,MAAM,IAAIP,MAAM,CAACO,MAAM,CAACH,OAAO,IAAIJ,MAAM,CAACO,MAAM,CAACH,OAAO,CAACf,MAAM,EAAE;IACxE4D,QAAQ,GAAGG,YAAY,CAACH,QAAQ,EAAEjD,MAAM,CAACO,MAAM,CAAC;EACpD;EACA;EACA0C,QAAQ,GAAGA,QAAQ,CAAC1C,MAAM,CAACC,GAAG,IAAI;IAC9B,MAAM6C,GAAG,GAAG7C,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC;IAC5B,OAAOyE,GAAG,KAAKC,SAAS,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,EAAE;EAC1D,CAAC,CAAC;EACF,MAAMvE,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;EACnD,IAAIwE,WAAW,EAAE;IACb;IACA,MAAMK,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5B,KAAK,MAAMhD,GAAG,IAAIyC,QAAQ,EAAE;MACxB,MAAMI,GAAG,GAAG7C,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC;MAC5B,IAAI,CAAC2E,QAAQ,CAACE,GAAG,CAACJ,GAAG,CAAC,EAAE;QACpBE,QAAQ,CAACG,GAAG,CAACL,GAAG,EAAEvE,IAAI,CAAC4B,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;MACzC;MACA5B,IAAI,CAAC6D,OAAO,CAAC,CAACzD,CAAC,EAAEyE,GAAG,KAAK;QACrB,MAAMC,MAAM,GAAGpD,GAAG,CAACtB,CAAC,CAACN,KAAK,CAAC;QAC3B,MAAMiF,SAAS,GAAG/C,UAAU,CAAC8C,MAAM,CAAC;QACpC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKN,SAAS,IAAIM,MAAM,KAAK,EAAE,IAAI,CAACE,MAAM,CAACC,KAAK,CAACF,SAAS,CAAC,EAAE;UACtFN,QAAQ,CAACS,GAAG,CAACX,GAAG,CAAC,CAACM,GAAG,CAAC,CAACM,IAAI,CAACJ,SAAS,CAAC;QAC1C;MACJ,CAAC,CAAC;IACN;IACA,MAAMK,KAAK,GAAGnF,KAAK,CAAC+D,IAAI,CAACS,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC;IACzC;IACA,MAAMC,gBAAgB,GAAGzE,GAAG,IAAIA,GAAG,CAAC0E,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;IAC9D,MAAMC,KAAK,GAAG,OAAOrB,WAAW,KAAK,UAAU,GAAGA,WAAW,GAAGiB,gBAAgB;IAChF,MAAMK,QAAQ,GAAG3F,IAAI,CAAC4B,GAAG,CAAC,CAACxB,CAAC,EAAEyE,GAAG,KAAKO,KAAK,CAACxD,GAAG,CAACqC,IAAI,IAAIyB,KAAK,CAACjB,QAAQ,CAACS,GAAG,CAACjB,IAAI,CAAC,CAACY,GAAG,CAAC,CAAC,CAAC,CAAC;IACxF,OAAO;MAAEO,KAAK;MAAEO,QAAQ;MAAEC,SAAS,EAAE,aAAa;MAAEC,UAAU,EAAE;IAAG,CAAC;EACxE,CAAC,MAAM;IACH;IACA,MAAMT,KAAK,GAAGjB,QAAQ,CAACvC,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC,CAAC;IACnD,MAAM6F,QAAQ,GAAG3F,IAAI,CAAC4B,GAAG,CAACxB,CAAC,IAAI+D,QAAQ,CAACvC,GAAG,CAACF,GAAG,IAAI;MAC/C,MAAMoD,MAAM,GAAGpD,GAAG,CAACtB,CAAC,CAACN,KAAK,CAAC;MAC3B,MAAMiF,SAAS,GAAG/C,UAAU,CAAC8C,MAAM,CAAC;MACpC,OAAQA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKN,SAAS,IAAIM,MAAM,KAAK,EAAE,IAAIE,MAAM,CAACC,KAAK,CAACF,SAAS,CAAC,GAAI,IAAI,GAAGA,SAAS;IACnH,CAAC,CAAC,CAAC;IACH,OAAO;MAAEK,KAAK;MAAEO,QAAQ;MAAEC,SAAS,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAG,CAAC;EAChE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAAC5E,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACnD;EACA,MAAM;IAAEoB,YAAY,GAAGlD;EAAoB,CAAC,GAAG8B,OAAO;EACtD,IAAI6C,OAAO,GAAGtF,WAAW,CAACZ,WAAW,EAAEqB,MAAM,CAAC8E,QAAQ,CAAC1F,IAAI,CAAC;EAC5D,IAAI2F,OAAO,GAAGxF,WAAW,CAACZ,WAAW,EAAEqB,MAAM,CAACgB,KAAK,CAAC5B,IAAI,CAAC;EACzD;EACA,IAAIY,MAAM,CAACO,MAAM,IAAIP,MAAM,CAACO,MAAM,CAACH,OAAO,IAAIJ,MAAM,CAACO,MAAM,CAACH,OAAO,CAACf,MAAM,EAAE;IACxEwF,OAAO,GAAGzB,YAAY,CAACyB,OAAO,EAAE7E,MAAM,CAACO,MAAM,CAAC;IAC9CwE,OAAO,GAAG3B,YAAY,CAAC2B,OAAO,EAAE/E,MAAM,CAACO,MAAM,CAAC;EAClD;EACA,MAAMyE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACL,OAAO,CAACxF,MAAM,EAAE0F,OAAO,CAAC1F,MAAM,CAAC;EACpD,MAAM8F,MAAM,GAAG,EAAE;EACjB,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,GAAG,EAAExC,CAAC,EAAE,EAAE;IAC1B,MAAMO,IAAI,GAAG8B,OAAO,CAACrC,CAAC,CAAC,CAACxC,MAAM,CAAC8E,QAAQ,CAAClG,KAAK,CAAC;IAC9C,MAAMgF,MAAM,GAAGmB,OAAO,CAACvC,CAAC,CAAC,CAACxC,MAAM,CAACgB,KAAK,CAACpC,KAAK,CAAC;IAC7C,MAAMiF,SAAS,GAAG/C,UAAU,CAAC8C,MAAM,CAAC;IACpC,MAAMhD,GAAG,GAAIgD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKN,SAAS,IAAIM,MAAM,KAAK,EAAE,IAAIE,MAAM,CAACC,KAAK,CAACF,SAAS,CAAC,GAAI,IAAI,GAAGA,SAAS;IACpH,IAAId,IAAI,KAAKO,SAAS,IAAIP,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;MACpDoC,MAAM,CAAClB,IAAI,CAAC;QAAElB,IAAI;QAAE/B,KAAK,EAAEJ;MAAI,CAAC,CAAC;IACrC;EACJ;EACA,OAAO;IAAEsD,KAAK,EAAE,EAAE;IAAEO,QAAQ,EAAE,EAAE;IAAEC,SAAS,EAAE,KAAK;IAAEC,UAAU,EAAEQ;EAAO,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACpF,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EAC3D;EACA,MAAM;IAAEqD,gBAAgB,GAAG,QAAQ;IAAEzF,kBAAkB,GAAGkC,YAAY;IAAEsB,YAAY,GAAGlD;EAAoB,CAAC,GAAG8B,OAAO;EACtH,MAAM;IAAEsD,IAAI;IAAEC,IAAI;IAAEC,KAAK;IAAEC,IAAI;IAAEC,GAAG;IAAEnF;EAAO,CAAC,GAAGP,MAAM;EACvD;EACA,IAAIiD,QAAQ,GAAG1D,WAAW,CAACZ,WAAW,EAAE2G,IAAI,CAAClG,IAAI,CAAC;EAClD,IAAImB,MAAM,IAAIA,MAAM,CAACH,OAAO,IAAIG,MAAM,CAACH,OAAO,CAACf,MAAM,EAAE;IACnD4D,QAAQ,GAAGG,YAAY,CAACH,QAAQ,EAAE1C,MAAM,CAAC;EAC7C;EACA;EACA0C,QAAQ,CAAC0C,IAAI,CAAC,CAACrB,CAAC,EAAEC,CAAC,KAAK;IACpB,IAAID,CAAC,CAACgB,IAAI,CAAC1G,KAAK,CAAC,GAAG2F,CAAC,CAACe,IAAI,CAAC1G,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAC5C,IAAI0F,CAAC,CAACgB,IAAI,CAAC1G,KAAK,CAAC,GAAG2F,CAAC,CAACe,IAAI,CAAC1G,KAAK,CAAC,EAAE,OAAO,CAAC;IAC3C,OAAO,CAAC;EACZ,CAAC,CAAC;EACF;EACA,MAAMsF,KAAK,GAAGjB,QAAQ,CAACvC,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC8E,IAAI,CAAC1G,KAAK,CAAC,CAAC;EAClD,MAAM+F,UAAU,GAAG1B,QAAQ,CAACvC,GAAG,CAACF,GAAG,IAAI;IACnC,MAAMoF,CAAC,GAAG9E,UAAU,CAACN,GAAG,CAAC+E,IAAI,CAAC3G,KAAK,CAAC,CAAC;IACrC,MAAMiH,CAAC,GAAG/E,UAAU,CAACN,GAAG,CAACgF,KAAK,CAAC5G,KAAK,CAAC,CAAC;IACtC,MAAMkH,CAAC,GAAGhF,UAAU,CAACN,GAAG,CAACiF,IAAI,CAAC7G,KAAK,CAAC,CAAC;IACrC,MAAMmH,CAAC,GAAGjF,UAAU,CAACN,GAAG,CAACkF,GAAG,CAAC9G,KAAK,CAAC,CAAC;IACpC;IACA,MAAMe,GAAG,GAAG,CAACiG,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAED,CAAC,CAAC,CAACpF,GAAG,CAACsF,CAAC,IAAKA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK1C,SAAS,IAAI0C,CAAC,KAAK,EAAE,IAAIlC,MAAM,CAACC,KAAK,CAACiC,CAAC,CAAC,GAAI,IAAI,GAAGA,CAAC,CAAC;IAC5G,OAAOvG,WAAW,CAAC4F,gBAAgB,EAAE1F,GAAG,EAAEC,kBAAkB,CAAC;EACjE,CAAC,CAAC;EACF,OAAO;IAAEsE,KAAK;IAAEO,QAAQ,EAAE,CAACE,UAAU,CAAC;IAAED,SAAS,EAAE,aAAa;IAAEC;EAAW,CAAC;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsB,mBAAmBA,CAACjG,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACvD;EACA,MAAM;IAAEvD,KAAK;IAAEC,KAAK;IAAEsC;EAAM,CAAC,GAAGhB,MAAM;EACtC;EACA,MAAMkG,KAAK,GAAG3G,WAAW,CAACZ,WAAW,EAAEF,KAAK,CAACW,IAAI,CAAC;EAClD,MAAM+G,KAAK,GAAG5G,WAAW,CAACZ,WAAW,EAAED,KAAK,CAACU,IAAI,CAAC;EAClD,MAAMgH,OAAO,GAAG7G,WAAW,CAACZ,WAAW,EAAEqC,KAAK,CAAC5B,IAAI,CAAC;;EAEpD;EACA,MAAMiH,IAAI,GAAG,IAAI3D,GAAG,CAACwD,KAAK,CAACxF,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC;EACxD,MAAM0H,IAAI,GAAG,IAAI5D,GAAG,CAACyD,KAAK,CAACzF,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC9B,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;EACxD,MAAMsF,KAAK,GAAGnF,KAAK,CAAC+D,IAAI,CAACuD,IAAI,CAAC;EAC9B,MAAME,KAAK,GAAGxH,KAAK,CAAC+D,IAAI,CAACwD,IAAI,CAAC;;EAE9B;EACA,MAAME,QAAQ,GAAG,IAAIhD,GAAG,CAAC,CAAC;EAC1B4C,OAAO,CAACzD,OAAO,CAACnC,GAAG,IAAI;IACnB;IACA,MAAMiG,CAAC,GAAGjG,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC,KAAK0E,SAAS,GAAG9C,GAAG,CAAC/B,KAAK,CAACG,KAAK,CAAC,GAAG,IAAI;IAClE,MAAMM,CAAC,GAAGsB,GAAG,CAAC9B,KAAK,CAACE,KAAK,CAAC,KAAK0E,SAAS,GAAG9C,GAAG,CAAC9B,KAAK,CAACE,KAAK,CAAC,GAAG,IAAI;IAClE,IAAI6H,CAAC,KAAK,IAAI,IAAIvH,CAAC,KAAK,IAAI,EAAE;MAC1B,MAAMmE,GAAG,GAAG,GAAGoD,CAAC,IAAIvH,CAAC,EAAE;MACvBsH,QAAQ,CAAC9C,GAAG,CAACL,GAAG,EAAE7C,GAAG,CAACQ,KAAK,CAACpC,KAAK,CAAC,CAAC;IACvC;EACJ,CAAC,CAAC;;EAEF;EACA,MAAM+F,UAAU,GAAG,EAAE;EACrB4B,KAAK,CAAC5D,OAAO,CAACzD,CAAC,IAAI;IACfgF,KAAK,CAACvB,OAAO,CAAC8D,CAAC,IAAI;MACf,MAAMpD,GAAG,GAAG,GAAGoD,CAAC,IAAIvH,CAAC,EAAE;MACvB,MAAM8G,CAAC,GAAGQ,QAAQ,CAAC/C,GAAG,CAACJ,GAAG,CAAC,GAAGmD,QAAQ,CAACxC,GAAG,CAACX,GAAG,CAAC,GAAG,IAAI;MACtDsB,UAAU,CAACV,IAAI,CAAC,CAACwC,CAAC,EAAEvH,CAAC,EAAE8G,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAO;IAAE9B,KAAK;IAAEqC,KAAK;IAAE7B,SAAS,EAAE,SAAS;IAAEC;EAAW,CAAC;AAC7D;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+B,iBAAiBA,CAAC1G,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACrD;EACA,MAAM;IAAE2E,SAAS;IAAE3F,KAAK;IAAE+B;EAAK,CAAC,GAAG/C,MAAM;;EAEzC;EACA,MAAM4G,UAAU,GAAGD,SAAS,CAACjG,GAAG,CAACmG,IAAI,IAAI;IACrC,MAAM1G,IAAI,GAAGZ,WAAW,CAACZ,WAAW,EAAEkI,IAAI,CAACzH,IAAI,CAAC;IAChD,MAAM0H,MAAM,GAAG3G,IAAI,CAACO,GAAG,CAACF,GAAG,IAAIA,GAAG,CAACqG,IAAI,CAACjI,KAAK,CAAC,CAAC,CAAC2B,MAAM,CAACyF,CAAC,IAAIA,CAAC,KAAK1C,SAAS,IAAI0C,CAAC,KAAK,IAAI,CAAC;IAC1F,MAAMe,GAAG,GAAG9B,IAAI,CAAC+B,IAAI,CAAC/B,IAAI,CAAC8B,GAAG,CAAC,GAAGD,MAAM,CAACpG,GAAG,CAACsF,CAAC,IAAIlC,MAAM,CAACkC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACtE,OAAO;MACHjD,IAAI,EAAE8D,IAAI,CAACjI,KAAK;MAChBmI,GAAG,EAAEA,GAAG,IAAI;IAChB,CAAC;EACL,CAAC,CAAC;;EAEF;EACA,MAAME,QAAQ,GAAG1H,WAAW,CAACZ,WAAW,EAAEoE,IAAI,CAAC3D,IAAI,CAAC;EACpD,MAAMuF,UAAU,GAAGsC,QAAQ,CAACvG,GAAG,CAACF,GAAG,IAAI;IACnC,MAAMsG,MAAM,GAAG9F,KAAK,CAACN,GAAG,CAACmG,IAAI,IAAIrG,GAAG,CAACqG,IAAI,CAACjI,KAAK,CAAC,CAAC;IACjD,OAAO;MACHmE,IAAI,EAAEvC,GAAG,CAACuC,IAAI,CAACnE,KAAK,CAAC;MACrBoC,KAAK,EAAE8F;IACX,CAAC;EACL,CAAC,CAAC;;EAEF;EACA,MAAMI,SAAS,GAAG;IACdP,SAAS,EAAEC,UAAU;IACrBO,gBAAgB,EAAExC;EACtB,CAAC;EACD,OAAO;IAAET,KAAK,EAAE,EAAE;IAAEqC,KAAK,EAAE,EAAE;IAAE7B,SAAS,EAAE,OAAO;IAAEC,UAAU,EAAEuC;EAAU,CAAC;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAACpH,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACvD;EACA;EACA,MAAM;IAAE8C,QAAQ;IAAEuC,MAAM;IAAErG,KAAK;IAAEkE,GAAG;IAAEoC,EAAE;IAAEC,MAAM;IAAEC,EAAE;IAAET;EAAI,CAAC,GAAG/G,MAAM;EACpE;EACA,MAAMyH,OAAO,GAAGlI,WAAW,CAACZ,WAAW,EAAEmG,QAAQ,CAAC1F,IAAI,CAAC;EACvD,MAAMsI,UAAU,GAAGL,MAAM,GAAG9H,WAAW,CAACZ,WAAW,EAAE0I,MAAM,CAACjI,IAAI,CAAC,GAAG,IAAI;EACxE;EACA,MAAM8E,KAAK,GAAGnF,KAAK,CAAC+D,IAAI,CAAC,IAAIJ,GAAG,CAAC+E,OAAO,CAAC/G,GAAG,CAACF,GAAG,IAAIA,GAAG,CAACsE,QAAQ,CAAClG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1E,IAAI+I,UAAU,GAAGD,UAAU,GAAG3I,KAAK,CAAC+D,IAAI,CAAC,IAAIJ,GAAG,CAACgF,UAAU,CAAChH,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC6G,MAAM,CAACzI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EAClG,IAAI,CAAC+I,UAAU,IAAIA,UAAU,CAACtI,MAAM,KAAK,CAAC,EAAEsI,UAAU,GAAG,CAAC,SAAS,CAAC;EAEpE,IAAIC,QAAQ,GAAG,CAAC,CAAC5G,KAAK;EACtB,IAAI6G,OAAO,GAAG,EAAE;EAChB,IAAID,QAAQ,EAAE;IACV,IAAI7I,KAAK,CAACC,OAAO,CAACgC,KAAK,CAAC,EAAE;MACtB6G,OAAO,GAAG7G,KAAK,CAACN,GAAG,CAACsF,CAAC,IAAIzG,WAAW,CAACZ,WAAW,EAAEqH,CAAC,CAAC5G,IAAI,CAAC,CAACsB,GAAG,CAACF,GAAG,IAAIM,UAAU,CAACN,GAAG,CAACwF,CAAC,CAACpH,KAAK,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC,MAAM;MACHiJ,OAAO,GAAG,CAACtI,WAAW,CAACZ,WAAW,EAAEqC,KAAK,CAAC5B,IAAI,CAAC,CAACsB,GAAG,CAACF,GAAG,IAAIM,UAAU,CAACN,GAAG,CAACQ,KAAK,CAACpC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7F;EACJ;;EAEA;EACA,MAAM2E,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC5BiE,OAAO,CAAC9E,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;IAC1B,MAAMmE,GAAG,GAAGtH,GAAG,CAACsE,QAAQ,CAAClG,KAAK,CAAC;IAC/B,MAAMmJ,GAAG,GAAIL,UAAU,IAAIA,UAAU,CAAC/D,GAAG,CAAC,IAAI0D,MAAM,CAACzI,KAAK,GAAI8I,UAAU,CAAC/D,GAAG,CAAC,CAAC0D,MAAM,CAACzI,KAAK,CAAC,GAAG,SAAS;IACvG,IAAI,CAAC2E,QAAQ,CAACE,GAAG,CAACsE,GAAG,CAAC,EAAExE,QAAQ,CAACG,GAAG,CAACqE,GAAG,EAAE,IAAIvE,GAAG,CAAC,CAAC,CAAC;IACpD,MAAMwE,MAAM,GAAGzE,QAAQ,CAACS,GAAG,CAAC+D,GAAG,CAAC;IAChC,IAAI,CAACC,MAAM,CAACvE,GAAG,CAACqE,GAAG,CAAC,EAAEE,MAAM,CAACtE,GAAG,CAACoE,GAAG,EAAE,EAAE,CAAC;IACzC,IAAIF,QAAQ,EAAE;MACVC,OAAO,CAAClF,OAAO,CAAChD,GAAG,IAAI;QACnB,IAAIA,GAAG,CAACgE,GAAG,CAAC,KAAKL,SAAS,IAAI,CAACQ,MAAM,CAACC,KAAK,CAACpE,GAAG,CAACgE,GAAG,CAAC,CAAC,EAAE;UACnDqE,MAAM,CAAChE,GAAG,CAAC8D,GAAG,CAAC,CAAC7D,IAAI,CAACtE,GAAG,CAACgE,GAAG,CAAC,CAAC;QAClC;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;;EAEF;EACA,SAASsE,YAAYA,CAACtI,GAAG,EAAE;IACvB,IAAI,CAACA,GAAG,IAAIA,GAAG,CAACN,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACnE,MAAM6I,MAAM,GAAGvI,GAAG,CAACH,KAAK,CAAC,CAAC,CAACmG,IAAI,CAAC,CAACrB,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IAChD,MAAM4D,IAAI,GAAGD,MAAM,CAAC,CAAC,CAAC;IACtB,MAAME,IAAI,GAAGF,MAAM,CAACA,MAAM,CAAC7I,MAAM,GAAG,CAAC,CAAC;IACtC,MAAMgJ,OAAO,GAAGC,QAAQ,CAACJ,MAAM,EAAE,GAAG,CAAC;IACrC,MAAMK,GAAG,GAAGD,QAAQ,CAACJ,MAAM,EAAE,IAAI,CAAC;IAClC,MAAMM,GAAG,GAAGF,QAAQ,CAACJ,MAAM,EAAE,IAAI,CAAC;IAClC,OAAO,CAACC,IAAI,EAAEI,GAAG,EAAEF,OAAO,EAAEG,GAAG,EAAEJ,IAAI,CAAC;EAC1C;EACA,SAASE,QAAQA,CAAC3I,GAAG,EAAE8I,CAAC,EAAE;IACtB,MAAMC,GAAG,GAAG,CAAC/I,GAAG,CAACN,MAAM,GAAG,CAAC,IAAIoJ,CAAC;IAChC,MAAME,IAAI,GAAG1D,IAAI,CAAC2D,KAAK,CAACF,GAAG,CAAC;IAC5B,MAAMG,IAAI,GAAGH,GAAG,GAAGC,IAAI;IACvB,IAAIhJ,GAAG,CAACgJ,IAAI,GAAG,CAAC,CAAC,KAAKrF,SAAS,EAAE;MAC7B,OAAO3D,GAAG,CAACgJ,IAAI,CAAC,GAAGE,IAAI,IAAIlJ,GAAG,CAACgJ,IAAI,GAAG,CAAC,CAAC,GAAGhJ,GAAG,CAACgJ,IAAI,CAAC,CAAC;IACzD,CAAC,MAAM;MACH,OAAOhJ,GAAG,CAACgJ,IAAI,CAAC;IACpB;EACJ;;EAEA;EACA,SAASG,YAAYA,CAACnJ,GAAG,EAAEoJ,KAAK,EAAE;IAC9B,IAAI,CAACpJ,GAAG,IAAIA,GAAG,CAACN,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;IACvC,MAAM,CAAC6F,GAAG,EAAEoC,EAAE,EAAEC,MAAM,EAAEC,EAAE,EAAET,GAAG,CAAC,GAAGgC,KAAK;IACxC;IACA,MAAMC,GAAG,GAAGxB,EAAE,GAAGF,EAAE;IACnB,MAAM2B,KAAK,GAAG3B,EAAE,GAAG,GAAG,GAAG0B,GAAG;IAC5B,MAAME,KAAK,GAAG1B,EAAE,GAAG,GAAG,GAAGwB,GAAG;IAC5B,OAAOrJ,GAAG,CAACY,MAAM,CAACyF,CAAC,IAAIA,CAAC,GAAGiD,KAAK,IAAIjD,CAAC,GAAGkD,KAAK,CAAC;EAClD;;EAEA;EACA,IAAIvE,UAAU,EAAEwE,WAAW;EAC3B,IAAIvB,QAAQ,EAAE;IACV;IACAjD,UAAU,GAAGgD,UAAU,CAACjH,GAAG,CAACqH,GAAG,IAAI;MAC/B,MAAMC,MAAM,GAAGzE,QAAQ,CAACS,GAAG,CAAC+D,GAAG,CAAC,IAAI,IAAIvE,GAAG,CAAC,CAAC;MAC7C,OAAOU,KAAK,CAACxD,GAAG,CAACoH,GAAG,IAAIG,YAAY,CAACD,MAAM,CAAChE,GAAG,CAAC8D,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC;IACF;IACAqB,WAAW,GAAGxB,UAAU,CAACjH,GAAG,CAACqH,GAAG,IAAI;MAChC,MAAMC,MAAM,GAAGzE,QAAQ,CAACS,GAAG,CAAC+D,GAAG,CAAC,IAAI,IAAIvE,GAAG,CAAC,CAAC;MAC7C,OAAOU,KAAK,CAACkF,OAAO,CAAC,CAACtB,GAAG,EAAEuB,MAAM,KAAK;QAClC,MAAM1J,GAAG,GAAGqI,MAAM,CAAChE,GAAG,CAAC8D,GAAG,CAAC,IAAI,EAAE;QACjC,MAAMiB,KAAK,GAAGpE,UAAU,CAACgD,UAAU,CAAC2B,OAAO,CAACvB,GAAG,CAAC,CAAC,CAACsB,MAAM,CAAC;QACzD,MAAME,QAAQ,GAAGT,YAAY,CAACnJ,GAAG,EAAEoJ,KAAK,CAAC;QACzC;QACA,OAAOQ,QAAQ,CAAC7I,GAAG,CAACsF,CAAC,IAAI,CAACqD,MAAM,EAAErD,CAAC,CAAC,CAAC;MACzC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,MAAM;IACH;IACA,MAAMwD,OAAO,GAAGtE,GAAG,GAAG3F,WAAW,CAACZ,WAAW,EAAEuG,GAAG,CAAC9F,IAAI,CAAC,GAAG,IAAI;IAC/D,MAAMqK,MAAM,GAAGnC,EAAE,GAAG/H,WAAW,CAACZ,WAAW,EAAE2I,EAAE,CAAClI,IAAI,CAAC,GAAG,IAAI;IAC5D,MAAMsK,UAAU,GAAGnC,MAAM,GAAGhI,WAAW,CAACZ,WAAW,EAAE4I,MAAM,CAACnI,IAAI,CAAC,GAAG,IAAI;IACxE,MAAMuK,MAAM,GAAGnC,EAAE,GAAGjI,WAAW,CAACZ,WAAW,EAAE6I,EAAE,CAACpI,IAAI,CAAC,GAAG,IAAI;IAC5D,MAAMwK,OAAO,GAAG7C,GAAG,GAAGxH,WAAW,CAACZ,WAAW,EAAEoI,GAAG,CAAC3H,IAAI,CAAC,GAAG,IAAI;IAC/DuF,UAAU,GAAGgD,UAAU,CAACjH,GAAG,CAACqH,GAAG,IAAI;MAC/B,OAAO7D,KAAK,CAACxD,GAAG,CAAC,CAACoH,GAAG,EAAEnE,GAAG,KAAK;QAC3B,IAAIkG,MAAM,GAAG,CAAC,CAAC;QACf,KAAK,IAAIrH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiF,OAAO,CAACpI,MAAM,EAAEmD,CAAC,EAAE,EAAE;UACrC,MAAMsH,MAAM,GAAGrC,OAAO,CAACjF,CAAC,CAAC,CAACsC,QAAQ,CAAClG,KAAK,CAAC;UACzC,MAAMmL,MAAM,GAAGrC,UAAU,GAAGA,UAAU,CAAClF,CAAC,CAAC,CAAC6E,MAAM,CAACzI,KAAK,CAAC,GAAG,SAAS;UACnE,IAAIkL,MAAM,KAAKhC,GAAG,IAAIiC,MAAM,KAAKhC,GAAG,EAAE;YAClC8B,MAAM,GAAGrH,CAAC;YACV;UACJ;QACJ;QACA,IAAIqH,MAAM,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QACxD,OAAO,CACHL,OAAO,GAAG1I,UAAU,CAAC0I,OAAO,CAACK,MAAM,CAAC,CAAC3E,GAAG,CAACtG,KAAK,CAAC,CAAC,GAAG,IAAI,EACvD6K,MAAM,GAAG3I,UAAU,CAAC2I,MAAM,CAACI,MAAM,CAAC,CAACvC,EAAE,CAAC1I,KAAK,CAAC,CAAC,GAAG,IAAI,EACpD8K,UAAU,GAAG5I,UAAU,CAAC4I,UAAU,CAACG,MAAM,CAAC,CAACtC,MAAM,CAAC3I,KAAK,CAAC,CAAC,GAAG,IAAI,EAChE+K,MAAM,GAAG7I,UAAU,CAAC6I,MAAM,CAACE,MAAM,CAAC,CAACrC,EAAE,CAAC5I,KAAK,CAAC,CAAC,GAAG,IAAI,EACpDgL,OAAO,GAAG9I,UAAU,CAAC8I,OAAO,CAACC,MAAM,CAAC,CAAC9C,GAAG,CAACnI,KAAK,CAAC,CAAC,GAAG,IAAI,CAC1D;MACL,CAAC,CAAC;IACN,CAAC,CAAC;IACF;IACAuK,WAAW,GAAGxB,UAAU,CAACjH,GAAG,CAAC,MAAM,EAAE,CAAC;EAC1C;EAEA,MAAMsJ,WAAW,GAAG;IAChBrC,UAAU,EAAEA,UAAU;IACtBsC,kBAAkB,EAAEtF,UAAU;IAC9BwE,WAAW,EAAEA;EACjB,CAAC;EAED,OAAO;IACHjF,KAAK;IACLO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,SAAS;IACpBC,UAAU,EAAEqF;EAChB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiBA,CAAClK,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACrD;EACA,MAAM;IAAEmI,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,YAAY;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAW,CAAC,GAAGzK,MAAM;;EAEhG;EACA,IAAI,CAACmK,MAAM,IAAI,CAACA,MAAM,CAAC/K,IAAI,IAAI,CAAC+K,MAAM,CAACvL,KAAK,EAAE,MAAM,IAAIqB,KAAK,CAAC,YAAY,CAAC;EAC3E,IAAI,CAACsK,UAAU,IAAI,CAACA,UAAU,CAACnL,IAAI,IAAI,CAACmL,UAAU,CAAC3L,KAAK,EAAE,MAAM,IAAIqB,KAAK,CAAC,gBAAgB,CAAC;EAC3F,IAAI,CAACuK,UAAU,IAAI,CAACA,UAAU,CAACpL,IAAI,IAAI,CAACoL,UAAU,CAAC5L,KAAK,EAAE,MAAM,IAAIqB,KAAK,CAAC,gBAAgB,CAAC;;EAE3F;EACA,MAAMyK,UAAU,GAAGnL,WAAW,CAACZ,WAAW,EAAEwL,MAAM,CAAC/K,IAAI,CAAC;EACxD,MAAMuL,YAAY,GAAGP,QAAQ,IAAIA,QAAQ,CAAChL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAEyL,QAAQ,CAAChL,IAAI,CAAC,GAAG,EAAE;EAC7F,MAAMwL,aAAa,GAAGP,SAAS,IAAIA,SAAS,CAACjL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE0L,SAAS,CAACjL,IAAI,CAAC,GAAG,EAAE;EACjG,MAAMyL,gBAAgB,GAAGP,YAAY,IAAIA,YAAY,CAAClL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE2L,YAAY,CAAClL,IAAI,CAAC,GAAG,EAAE;EAC7G,MAAM0L,cAAc,GAAGvL,WAAW,CAACZ,WAAW,EAAE4L,UAAU,CAACnL,IAAI,CAAC;EAChE,MAAM2L,cAAc,GAAGxL,WAAW,CAACZ,WAAW,EAAE6L,UAAU,CAACpL,IAAI,CAAC;EAChE,MAAM4L,cAAc,GAAGP,UAAU,IAAIA,UAAU,CAACrL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE8L,UAAU,CAACrL,IAAI,CAAC,GAAG,EAAE;;EAErG;EACA,MAAMyD,KAAK,GAAG,EAAE;EAChB,MAAMJ,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzBgI,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;IAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;IAC5B,IAAIqM,EAAE,KAAK3H,SAAS,IAAI2H,EAAE,KAAK,IAAI,IAAIA,EAAE,KAAK,EAAE,IAAI,CAACxI,OAAO,CAACgB,GAAG,CAACwH,EAAE,CAAC,EAAE;MAClE,MAAMlI,IAAI,GAAI4H,YAAY,CAAChH,GAAG,CAAC,IAAIyG,QAAQ,IAAIA,QAAQ,CAACxL,KAAK,GAAI+L,YAAY,CAAChH,GAAG,CAAC,CAACyG,QAAQ,CAACxL,KAAK,CAAC,GAAGqM,EAAE;MACvG,MAAMjK,KAAK,GAAI4J,aAAa,CAACjH,GAAG,CAAC,IAAI0G,SAAS,IAAIA,SAAS,CAACzL,KAAK,GAAIkC,UAAU,CAAC8J,aAAa,CAACjH,GAAG,CAAC,CAAC0G,SAAS,CAACzL,KAAK,CAAC,CAAC,GAAG,CAAC;MACxH,MAAMkG,QAAQ,GAAI+F,gBAAgB,CAAClH,GAAG,CAAC,IAAI2G,YAAY,IAAIA,YAAY,CAAC1L,KAAK,GAAIiM,gBAAgB,CAAClH,GAAG,CAAC,CAAC2G,YAAY,CAAC1L,KAAK,CAAC,GAAG,EAAE;MAC/H,MAAMsM,IAAI,GAAG;QAAED;MAAG,CAAC;MACnB,IAAIlI,IAAI,KAAKO,SAAS,EAAE4H,IAAI,CAACnI,IAAI,GAAGA,IAAI;MACxC,IAAI/B,KAAK,KAAKsC,SAAS,EAAE4H,IAAI,CAAClK,KAAK,GAAGA,KAAK;MAC3C,IAAI8D,QAAQ,KAAKxB,SAAS,EAAE4H,IAAI,CAACpG,QAAQ,GAAGA,QAAQ;MACpDjC,KAAK,CAACoB,IAAI,CAACiH,IAAI,CAAC;MAChBzI,OAAO,CAACG,GAAG,CAACqI,EAAE,CAAC;IACnB;EACJ,CAAC,CAAC;;EAEF;EACA,MAAME,KAAK,GAAG,EAAE;EAChBL,cAAc,CAACnI,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;IACjC,MAAMvB,MAAM,GAAG5B,GAAG,CAAC+J,UAAU,CAAC3L,KAAK,CAAC;IACpC,MAAMyD,MAAM,GAAG0I,cAAc,CAACpH,GAAG,CAAC,GAAGoH,cAAc,CAACpH,GAAG,CAAC,CAAC6G,UAAU,CAAC5L,KAAK,CAAC,GAAG0E,SAAS;IACtF,MAAM8H,MAAM,GAAIJ,cAAc,CAACrH,GAAG,CAAC,IAAI8G,UAAU,IAAIA,UAAU,CAAC7L,KAAK,GAAIkC,UAAU,CAACkK,cAAc,CAACrH,GAAG,CAAC,CAAC8G,UAAU,CAAC7L,KAAK,CAAC,CAAC,GAAG,CAAC;IAC9H,IAAIwD,MAAM,KAAKkB,SAAS,IAAIlB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,EAAE,IACxDC,MAAM,KAAKiB,SAAS,IAAIjB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,EAAE,EAAE;MAC1D,MAAMgJ,IAAI,GAAG;QAAEjJ,MAAM,EAAEjB,MAAM,CAACiB,MAAM,CAAC;QAAEC,MAAM,EAAElB,MAAM,CAACkB,MAAM;MAAE,CAAC;MAC/D,IAAI,CAAC0B,KAAK,CAACqH,MAAM,CAAC,EAAEC,IAAI,CAACD,MAAM,GAAGA,MAAM;MACxCD,KAAK,CAAClH,IAAI,CAACoH,IAAI,CAAC;IACpB;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAG;IACdzI,KAAK,EAAEA,KAAK;IACZsI,KAAK,EAAEA;EACX,CAAC;EAED,OAAO;IACHjH,KAAK,EAAE,EAAE;IACTO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE2G;EAChB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACvL,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACpD;EACA,MAAM;IAAEmI,MAAM;IAAEC,QAAQ;IAAEoB,QAAQ;IAAEC,UAAU;IAAEpB,SAAS;IAAEqB;EAAK,CAAC,GAAG1L,MAAM;EAC1E;EACA,MAAM2L,OAAO,GAAGxB,MAAM,IAAIA,MAAM,CAAC/K,IAAI,IAAI+K,MAAM,CAACvL,KAAK,IAAI4M,QAAQ,IAAIA,QAAQ,CAACpM,IAAI,IAAIoM,QAAQ,CAAC5M,KAAK;;EAEpG;EACA,IAAI+M,OAAO,EAAE;IACT,MAAMjB,UAAU,GAAGnL,WAAW,CAACZ,WAAW,EAAEwL,MAAM,CAAC/K,IAAI,CAAC;IACxD,MAAMuL,YAAY,GAAGP,QAAQ,IAAIA,QAAQ,CAAChL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAEyL,QAAQ,CAAChL,IAAI,CAAC,GAAG,EAAE;IAC7F,MAAMwM,YAAY,GAAGrM,WAAW,CAACZ,WAAW,EAAE6M,QAAQ,CAACpM,IAAI,CAAC;IAC5D,MAAMyM,cAAc,GAAGJ,UAAU,IAAIA,UAAU,CAACrM,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE8M,UAAU,CAACrM,IAAI,CAAC,GAAG,EAAE;IACrG,MAAMwL,aAAa,GAAGP,SAAS,IAAIA,SAAS,CAACjL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE0L,SAAS,CAACjL,IAAI,CAAC,GAAG,EAAE;;IAEjG;IACA,MAAM0M,OAAO,GAAG,IAAItI,GAAG,CAAC,CAAC;IACzBkH,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,IAAI,CAACqM,EAAE,EAAE;MACT,MAAMlI,IAAI,GAAG4H,YAAY,CAAChH,GAAG,CAAC,IAAIyG,QAAQ,IAAIA,QAAQ,CAACxL,KAAK,GAAG+L,YAAY,CAAChH,GAAG,CAAC,CAACyG,QAAQ,CAACxL,KAAK,CAAC,GAAGqM,EAAE;MACrG,MAAMjK,KAAK,GAAG4J,aAAa,CAACjH,GAAG,CAAC,IAAI0G,SAAS,IAAIA,SAAS,CAACzL,KAAK,GAAGkC,UAAU,CAAC8J,aAAa,CAACjH,GAAG,CAAC,CAAC0G,SAAS,CAACzL,KAAK,CAAC,CAAC,GAAG0E,SAAS;MAC9HwI,OAAO,CAACpI,GAAG,CAACuH,EAAE,EAAE;QACZA,EAAE;QACFlI,IAAI;QACJ/B,KAAK;QACL+K,QAAQ,EAAE;MACd,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAIC,SAAS,GAAG,EAAE;IAClBtB,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,MAAMqN,QAAQ,GAAGL,YAAY,CAACjI,GAAG,CAAC,GAAGiI,YAAY,CAACjI,GAAG,CAAC,CAAC6H,QAAQ,CAAC5M,KAAK,CAAC,GAAG0E,SAAS;MAClF,IAAI,CAAC2I,QAAQ,IAAI,CAACH,OAAO,CAACrI,GAAG,CAACwI,QAAQ,CAAC,EAAE;QACrC;QACAD,SAAS,CAAC/H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACnC,CAAC,MAAM;QACHa,OAAO,CAAC9H,GAAG,CAACiI,QAAQ,CAAC,CAACF,QAAQ,CAAC9H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACxD;IACJ,CAAC,CAAC;;IAEF;IACA,OAAO;MACH/G,KAAK,EAAE,EAAE;MACTO,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,MAAM;MACjBC,UAAU,EAAEqH;IAChB,CAAC;EACL;;EAEA;EACA,OAAO;IACH9H,KAAK,EAAE,EAAE;IACTO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE;EAChB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuH,mBAAmBA,CAAClM,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACvD;EACA,MAAM;IAAEmI,MAAM;IAAEC,QAAQ;IAAEoB,QAAQ;IAAEC,UAAU;IAAEpB;EAAU,CAAC,GAAGrK,MAAM;EACpE;EACA,MAAM2L,OAAO,GAAGxB,MAAM,IAAIA,MAAM,CAAC/K,IAAI,IAAI+K,MAAM,CAACvL,KAAK,IAAI4M,QAAQ,IAAIA,QAAQ,CAACpM,IAAI,IAAIoM,QAAQ,CAAC5M,KAAK;EAEpG,IAAI+M,OAAO,EAAE;IACT,MAAMjB,UAAU,GAAGnL,WAAW,CAACZ,WAAW,EAAEwL,MAAM,CAAC/K,IAAI,CAAC;IACxD,MAAMuL,YAAY,GAAGP,QAAQ,IAAIA,QAAQ,CAAChL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAEyL,QAAQ,CAAChL,IAAI,CAAC,GAAG,EAAE;IAC7F,MAAMwM,YAAY,GAAGrM,WAAW,CAACZ,WAAW,EAAE6M,QAAQ,CAACpM,IAAI,CAAC;IAC5D,MAAMyM,cAAc,GAAGJ,UAAU,IAAIA,UAAU,CAACrM,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE8M,UAAU,CAACrM,IAAI,CAAC,GAAG,EAAE;IACrG,MAAMwL,aAAa,GAAGP,SAAS,IAAIA,SAAS,CAACjL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE0L,SAAS,CAACjL,IAAI,CAAC,GAAG,EAAE;;IAEjG;IACA,MAAM0M,OAAO,GAAG,IAAItI,GAAG,CAAC,CAAC;IACzB;IACA,MAAM2I,WAAW,GAAG,IAAIzJ,GAAG,CAAC,CAAC;IAC7BkJ,YAAY,CAACjJ,OAAO,CAACnC,GAAG,IAAI;MACxB,IAAIA,GAAG,IAAIgL,QAAQ,IAAIA,QAAQ,CAAC5M,KAAK,EAAE;QACnC,MAAMwN,GAAG,GAAG5L,GAAG,CAACgL,QAAQ,CAAC5M,KAAK,CAAC;QAC/B,IAAIwN,GAAG,EAAED,WAAW,CAACvJ,GAAG,CAACwJ,GAAG,CAAC;MACjC;IACJ,CAAC,CAAC;;IAEF;IACA,SAASC,QAAQA,CAACpB,EAAE,EAAEqB,KAAK,GAAG,CAAC,CAAC,EAAE;MAC9B,IAAIA,KAAK,CAACrB,EAAE,CAAC,EAAE,OAAOqB,KAAK,CAACrB,EAAE,CAAC;MAC/B,IAAIsB,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS,GAAGvB,EAAE;MAClB,IAAItH,GAAG,GAAG+G,UAAU,CAAC+B,SAAS,CAACjM,GAAG,IAAIA,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC,KAAK4N,SAAS,CAAC;MACtE,OAAO7I,GAAG,KAAK,CAAC,CAAC,EAAE;QACf,MAAMsI,QAAQ,GAAGL,YAAY,CAACjI,GAAG,CAAC,GAAGiI,YAAY,CAACjI,GAAG,CAAC,CAAC6H,QAAQ,CAAC5M,KAAK,CAAC,GAAG0E,SAAS;QAClF,IAAI,CAAC2I,QAAQ,IAAI,CAACH,OAAO,CAACrI,GAAG,CAACwI,QAAQ,CAAC,EAAE;QACzCM,KAAK,EAAE;QACPC,SAAS,GAAGP,QAAQ;QACpBtI,GAAG,GAAG+G,UAAU,CAAC+B,SAAS,CAACjM,GAAG,IAAIA,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC,KAAK4N,SAAS,CAAC;MACtE;MACAF,KAAK,CAACrB,EAAE,CAAC,GAAGsB,KAAK;MACjB,OAAOA,KAAK;IAChB;;IAEA;IACA,IAAIG,QAAQ,GAAG,CAAC;IAChBhC,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,MAAM2N,KAAK,GAAGF,QAAQ,CAACpB,EAAE,CAAC;MAC1B,IAAIsB,KAAK,GAAGG,QAAQ,EAAEA,QAAQ,GAAGH,KAAK;IAC1C,CAAC,CAAC;;IAEF;IACA7B,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,IAAI,CAACqM,EAAE,EAAE;MACT,MAAMlI,IAAI,GAAG4H,YAAY,CAAChH,GAAG,CAAC,IAAIyG,QAAQ,IAAIA,QAAQ,CAACxL,KAAK,GAAG+L,YAAY,CAAChH,GAAG,CAAC,CAACyG,QAAQ,CAACxL,KAAK,CAAC,GAAGqM,EAAE;MACrG,IAAIjK,KAAK,GAAG4J,aAAa,CAACjH,GAAG,CAAC,IAAI0G,SAAS,IAAIA,SAAS,CAACzL,KAAK,GAAGkC,UAAU,CAAC8J,aAAa,CAACjH,GAAG,CAAC,CAAC0G,SAAS,CAACzL,KAAK,CAAC,CAAC,GAAG0E,SAAS;MAC5H;MACA,IAAItC,KAAK,KAAKsC,SAAS,IAAItC,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAC/C,KAAK,CAAC,EAAE;QACvD,MAAMuL,KAAK,GAAGF,QAAQ,CAACpB,EAAE,CAAC;QAC1BjK,KAAK,GAAGiE,IAAI,CAAC8B,GAAG,CAAC,CAAC,EAAE2F,QAAQ,GAAGH,KAAK,GAAG,CAAC,CAAC;MAC7C;MACAT,OAAO,CAACpI,GAAG,CAACuH,EAAE,EAAE;QACZA,EAAE;QACFlI,IAAI;QACJ/B,KAAK;QACL+K,QAAQ,EAAE;MACd,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAIC,SAAS,GAAG,EAAE;IAClBtB,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,MAAMqN,QAAQ,GAAGL,YAAY,CAACjI,GAAG,CAAC,GAAGiI,YAAY,CAACjI,GAAG,CAAC,CAAC6H,QAAQ,CAAC5M,KAAK,CAAC,GAAG0E,SAAS;MAClF,IAAI,CAAC2I,QAAQ,IAAI,CAACH,OAAO,CAACrI,GAAG,CAACwI,QAAQ,CAAC,EAAE;QACrC;QACAD,SAAS,CAAC/H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACnC,CAAC,MAAM;QACHa,OAAO,CAAC9H,GAAG,CAACiI,QAAQ,CAAC,CAACF,QAAQ,CAAC9H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACxD;IACJ,CAAC,CAAC;;IAEF;IACA,SAAS0B,WAAWA,CAAC9J,KAAK,EAAE+J,KAAK,EAAE;MAC/B,IAAI,CAAC/J,KAAK,IAAIA,KAAK,CAACxD,MAAM,KAAK,CAAC,EAAE,OAAOuN,KAAK;MAC9C,IAAI7F,GAAG,GAAG6F,KAAK;MACf,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACxD,MAAM,EAAEmD,CAAC,EAAE,EAAE;QACnCuE,GAAG,GAAG9B,IAAI,CAAC8B,GAAG,CAACA,GAAG,EAAE4F,WAAW,CAAC9J,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,EAAEa,KAAK,GAAG,CAAC,CAAC,CAAC;MAClE;MACA,OAAO7F,GAAG;IACd;IACA,MAAM8F,QAAQ,GAAGF,WAAW,CAACX,SAAS,EAAE,CAAC,CAAC;;IAE1C;IACA,SAASc,WAAWA,CAACjK,KAAK,EAAE;MACxB,IAAI,CAACA,KAAK,EAAE,OAAO,CAAC;MACpB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACxD,MAAM,EAAEmD,CAAC,EAAE,EAAE;QACnC,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,IAAIlJ,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC1M,MAAM,KAAK,CAAC,EAAE;UACtD,IAAIwD,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAKsC,SAAS,IAAIT,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAClB,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,CAAC,EAAE;YAClF6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,GAAG,CAAC;UACtB;QACJ,CAAC,MAAM;UACH,IAAI6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAKsC,SAAS,IAAIT,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAClB,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,CAAC,EAAE;YAClF6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,GAAG8L,WAAW,CAACjK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC;UACnD,CAAC,MAAM;YACH;YACAe,WAAW,CAACjK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC;UAClC;QACJ;MACJ;MACA;MACA,OAAOlJ,KAAK,CAACwB,MAAM,CAAC,CAAC0I,GAAG,EAAE7B,IAAI,KAAK6B,GAAG,IAAI7B,IAAI,CAAClK,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAClE;IACA8L,WAAW,CAACd,SAAS,CAAC;;IAEtB;IACA,OAAO;MACH9H,KAAK,EAAE,EAAE;MACTO,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,SAAS;MACpBC,UAAU,EAAEqH;IAChB,CAAC;EACL;;EAEA;EACA,OAAO;IACH9H,KAAK,EAAE,EAAE;IACTO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,SAAS;IACpBC,UAAU,EAAE;EAChB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqI,oBAAoBA,CAAChN,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACxD;EACA,MAAM;IAAEmI,MAAM;IAAEC,QAAQ;IAAEoB,QAAQ;IAAEC,UAAU;IAAEpB;EAAU,CAAC,GAAGrK,MAAM;EACpE;EACA,MAAM2L,OAAO,GAAGxB,MAAM,IAAIA,MAAM,CAAC/K,IAAI,IAAI+K,MAAM,CAACvL,KAAK,IAAI4M,QAAQ,IAAIA,QAAQ,CAACpM,IAAI,IAAIoM,QAAQ,CAAC5M,KAAK;EAEpG,IAAI+M,OAAO,EAAE;IACT,MAAMjB,UAAU,GAAGnL,WAAW,CAACZ,WAAW,EAAEwL,MAAM,CAAC/K,IAAI,CAAC;IACxD,MAAMuL,YAAY,GAAGP,QAAQ,IAAIA,QAAQ,CAAChL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAEyL,QAAQ,CAAChL,IAAI,CAAC,GAAG,EAAE;IAC7F,MAAMwM,YAAY,GAAGrM,WAAW,CAACZ,WAAW,EAAE6M,QAAQ,CAACpM,IAAI,CAAC;IAC5D,MAAMyM,cAAc,GAAGJ,UAAU,IAAIA,UAAU,CAACrM,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE8M,UAAU,CAACrM,IAAI,CAAC,GAAG,EAAE;IACrG,MAAMwL,aAAa,GAAGP,SAAS,IAAIA,SAAS,CAACjL,IAAI,GAAGG,WAAW,CAACZ,WAAW,EAAE0L,SAAS,CAACjL,IAAI,CAAC,GAAG,EAAE;;IAEjG;IACA,MAAM0M,OAAO,GAAG,IAAItI,GAAG,CAAC,CAAC;IACzB;IACA,MAAM2I,WAAW,GAAG,IAAIzJ,GAAG,CAAC,CAAC;IAC7BkJ,YAAY,CAACjJ,OAAO,CAACnC,GAAG,IAAI;MACxB,IAAIA,GAAG,IAAIgL,QAAQ,IAAIA,QAAQ,CAAC5M,KAAK,EAAE;QACnC,MAAMwN,GAAG,GAAG5L,GAAG,CAACgL,QAAQ,CAAC5M,KAAK,CAAC;QAC/B,IAAIwN,GAAG,EAAED,WAAW,CAACvJ,GAAG,CAACwJ,GAAG,CAAC;MACjC;IACJ,CAAC,CAAC;;IAEF;IACA,SAASC,QAAQA,CAACpB,EAAE,EAAEqB,KAAK,GAAG,CAAC,CAAC,EAAE;MAC9B,IAAIA,KAAK,CAACrB,EAAE,CAAC,EAAE,OAAOqB,KAAK,CAACrB,EAAE,CAAC;MAC/B,IAAIsB,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS,GAAGvB,EAAE;MAClB,IAAItH,GAAG,GAAG+G,UAAU,CAAC+B,SAAS,CAACjM,GAAG,IAAIA,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC,KAAK4N,SAAS,CAAC;MACtE,OAAO7I,GAAG,KAAK,CAAC,CAAC,EAAE;QACf,MAAMsI,QAAQ,GAAGL,YAAY,CAACjI,GAAG,CAAC,GAAGiI,YAAY,CAACjI,GAAG,CAAC,CAAC6H,QAAQ,CAAC5M,KAAK,CAAC,GAAG0E,SAAS;QAClF,IAAI,CAAC2I,QAAQ,IAAI,CAACH,OAAO,CAACrI,GAAG,CAACwI,QAAQ,CAAC,EAAE;QACzCM,KAAK,EAAE;QACPC,SAAS,GAAGP,QAAQ;QACpBtI,GAAG,GAAG+G,UAAU,CAAC+B,SAAS,CAACjM,GAAG,IAAIA,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC,KAAK4N,SAAS,CAAC;MACtE;MACAF,KAAK,CAACrB,EAAE,CAAC,GAAGsB,KAAK;MACjB,OAAOA,KAAK;IAChB;;IAEA;IACA,IAAIG,QAAQ,GAAG,CAAC;IAChBhC,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,MAAM2N,KAAK,GAAGF,QAAQ,CAACpB,EAAE,CAAC;MAC1B,IAAIsB,KAAK,GAAGG,QAAQ,EAAEA,QAAQ,GAAGH,KAAK;IAC1C,CAAC,CAAC;;IAEF;IACA7B,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,IAAI,CAACqM,EAAE,EAAE;MACT,MAAMlI,IAAI,GAAG4H,YAAY,CAAChH,GAAG,CAAC,IAAIyG,QAAQ,IAAIA,QAAQ,CAACxL,KAAK,GAAG+L,YAAY,CAAChH,GAAG,CAAC,CAACyG,QAAQ,CAACxL,KAAK,CAAC,GAAGqM,EAAE;MACrG,IAAIjK,KAAK,GAAG4J,aAAa,CAACjH,GAAG,CAAC,IAAI0G,SAAS,IAAIA,SAAS,CAACzL,KAAK,GAAGkC,UAAU,CAAC8J,aAAa,CAACjH,GAAG,CAAC,CAAC0G,SAAS,CAACzL,KAAK,CAAC,CAAC,GAAG0E,SAAS;MAC5H;MACA,IAAItC,KAAK,KAAKsC,SAAS,IAAItC,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAC/C,KAAK,CAAC,EAAE;QACvD,MAAMuL,KAAK,GAAGF,QAAQ,CAACpB,EAAE,CAAC;QAC1BjK,KAAK,GAAGiE,IAAI,CAAC8B,GAAG,CAAC,CAAC,EAAE2F,QAAQ,GAAGH,KAAK,GAAG,CAAC,CAAC;MAC7C;MACAT,OAAO,CAACpI,GAAG,CAACuH,EAAE,EAAE;QACZA,EAAE;QACFlI,IAAI;QACJ/B,KAAK;QACL+K,QAAQ,EAAE;MACd,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAIC,SAAS,GAAG,EAAE;IAClBtB,UAAU,CAAC/H,OAAO,CAAC,CAACnC,GAAG,EAAEmD,GAAG,KAAK;MAC7B,MAAMsH,EAAE,GAAGzK,GAAG,CAAC2J,MAAM,CAACvL,KAAK,CAAC;MAC5B,MAAMqN,QAAQ,GAAGL,YAAY,CAACjI,GAAG,CAAC,GAAGiI,YAAY,CAACjI,GAAG,CAAC,CAAC6H,QAAQ,CAAC5M,KAAK,CAAC,GAAG0E,SAAS;MAClF,IAAI,CAAC2I,QAAQ,IAAI,CAACH,OAAO,CAACrI,GAAG,CAACwI,QAAQ,CAAC,EAAE;QACrC;QACAD,SAAS,CAAC/H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACnC,CAAC,MAAM;QACHa,OAAO,CAAC9H,GAAG,CAACiI,QAAQ,CAAC,CAACF,QAAQ,CAAC9H,IAAI,CAAC6H,OAAO,CAAC9H,GAAG,CAACiH,EAAE,CAAC,CAAC;MACxD;IACJ,CAAC,CAAC;;IAEF;IACA,SAAS0B,WAAWA,CAAC9J,KAAK,EAAE+J,KAAK,EAAE;MAC/B,IAAI,CAAC/J,KAAK,IAAIA,KAAK,CAACxD,MAAM,KAAK,CAAC,EAAE,OAAOuN,KAAK;MAC9C,IAAI7F,GAAG,GAAG6F,KAAK;MACf,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACxD,MAAM,EAAEmD,CAAC,EAAE,EAAE;QACnCuE,GAAG,GAAG9B,IAAI,CAAC8B,GAAG,CAACA,GAAG,EAAE4F,WAAW,CAAC9J,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,EAAEa,KAAK,GAAG,CAAC,CAAC,CAAC;MAClE;MACA,OAAO7F,GAAG;IACd;IACA,MAAM8F,QAAQ,GAAGF,WAAW,CAACX,SAAS,EAAE,CAAC,CAAC;;IAE1C;IACA,SAASc,WAAWA,CAACjK,KAAK,EAAE;MACxB,IAAI,CAACA,KAAK,EAAE,OAAO,CAAC;MACpB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACxD,MAAM,EAAEmD,CAAC,EAAE,EAAE;QACnC,IAAI,CAACK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,IAAIlJ,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC1M,MAAM,KAAK,CAAC,EAAE;UACtD,IAAIwD,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAKsC,SAAS,IAAIT,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAClB,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,CAAC,EAAE;YAClF6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,GAAG,CAAC;UACtB;QACJ,CAAC,MAAM;UACH,IAAI6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAKsC,SAAS,IAAIT,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,KAAK,IAAI,IAAI+C,KAAK,CAAClB,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,CAAC,EAAE;YAClF6B,KAAK,CAACL,CAAC,CAAC,CAACxB,KAAK,GAAG8L,WAAW,CAACjK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC;UACnD,CAAC,MAAM;YACH;YACAe,WAAW,CAACjK,KAAK,CAACL,CAAC,CAAC,CAACuJ,QAAQ,CAAC;UAClC;QACJ;MACJ;MACA;MACA,OAAOlJ,KAAK,CAACwB,MAAM,CAAC,CAAC0I,GAAG,EAAE7B,IAAI,KAAK6B,GAAG,IAAI7B,IAAI,CAAClK,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAClE;IACA8L,WAAW,CAACd,SAAS,CAAC;;IAEtB;IACA,OAAO;MACH9H,KAAK,EAAE,EAAE;MACTO,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,UAAU;MACrBC,UAAU,EAAEqH;IAChB,CAAC;EACL;;EAEA;EACA,OAAO;IACH9H,KAAK,EAAE,EAAE;IACTO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,UAAU;IACrBC,UAAU,EAAE;EAChB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsI,oBAAoBA,CAACjN,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACxD,MAAM;IAAEkL,UAAU;IAAEC;EAAU,CAAC,GAAGnN,MAAM;;EAExC;EACA,MAAMoN,cAAc,GAAGF,UAAU,CAACxM,GAAG,CAAC2M,GAAG,IAAI9N,WAAW,CAACZ,WAAW,EAAE0O,GAAG,CAACjO,IAAI,CAAC,CAAC;EAChF,MAAM6H,QAAQ,GAAGkG,SAAS,GAAG5N,WAAW,CAACZ,WAAW,EAAEwO,SAAS,CAAC/N,IAAI,CAAC,GAAG,EAAE;EAE1E,MAAMuF,UAAU,GAAG;IACfuI,UAAU,EAAEE,cAAc;IAC1BrK,IAAI,EAAEkE;EACV,CAAC;EAED,OAAO;IACH/C,KAAK,EAAE,EAAE;IACTO,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,UAAU;IACrBC;EACJ,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2I,kBAAkBA,CAACtN,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACtD;EACA,MAAM;IAAEI,MAAM;IAAEC,MAAM;IAAErB;EAAM,CAAC,GAAGhB,MAAM;;EAExC;EACA,MAAMuN,UAAU,GAAGhO,WAAW,CAACZ,WAAW,EAAEyD,MAAM,CAAChD,IAAI,CAAC;EACxD,MAAMoO,UAAU,GAAGjO,WAAW,CAACZ,WAAW,EAAE0D,MAAM,CAACjD,IAAI,CAAC;EACxD,MAAMqO,SAAS,GAAGzM,KAAK,GAAGzB,WAAW,CAACZ,WAAW,EAAEqC,KAAK,CAAC5B,IAAI,CAAC,GAAG,EAAE;EAEnE,MAAMuF,UAAU,GAAG;IACfvC,MAAM,EAAEmL,UAAU,CAAC7M,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC4B,MAAM,CAACxD,KAAK,CAAC,CAAC;IAChDyD,MAAM,EAAEmL,UAAU,CAAC9M,GAAG,CAACF,GAAG,IAAIA,GAAG,CAAC6B,MAAM,CAACzD,KAAK,CAAC,CAAC;IAChDoC,KAAK,EAAEyM,SAAS,CAAC/M,GAAG,CAACF,GAAG,IAAIM,UAAU,CAACN,GAAG,CAACQ,KAAK,CAACpC,KAAK,CAAC,CAAC;EAC5D,CAAC;EAEDqD,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEyC,UAAU,CAAC;EAE3D,OAAO,CAAC,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+I,kBAAkBA,CAAC1N,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACtDD,UAAU,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2L,iBAAiBA,CAAC3N,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACrDD,UAAU,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4L,wBAAwBA,CAAC5N,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EAC5DD,UAAU,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6L,sBAAsBA,CAAC7N,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EAC1DD,UAAU,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8L,oBAAoBA,CAAC9N,MAAM,EAAErB,WAAW,EAAEqD,OAAO,EAAE;EACxDD,UAAU,CAAC/B,MAAM,EAAErB,WAAW,EAAEqD,OAAO,CAAC;EACxC,OAAO,CAAC,CAAC;AACb;;AAEA;;AAEA,MAAM+L,iBAAiB,GAAG;EACtBC,IAAI,EAAE7L,cAAc;EACpB8L,GAAG,EAAE9L,cAAc;EACnB+L,GAAG,EAAEtJ,eAAe;EACpBuJ,OAAO,EAAEhM,cAAc;EACvBiM,WAAW,EAAEhJ,uBAAuB;EACpCiJ,OAAO,EAAEpI,mBAAmB;EAC5BqI,KAAK,EAAE5H,iBAAiB;EACxB6H,OAAO,EAAEnH,mBAAmB;EAC5BoH,KAAK,EAAEtE,iBAAiB;EACxBuE,IAAI,EAAElD,gBAAgB;EACtBmD,OAAO,EAAExC,mBAAmB;EAC5ByC,QAAQ,EAAE3B,oBAAoB;EAC9B4B,QAAQ,EAAE3B,oBAAoB;EAC9B4B,MAAM,EAAEvB,kBAAkB;EAC1BwB,MAAM,EAAEpB,kBAAkB;EAC1BqB,KAAK,EAAEpB,iBAAiB;EACxBqB,YAAY,EAAEpB,wBAAwB;EACtCqB,UAAU,EAAEpB,sBAAsB;EAClCqB,QAAQ,EAAEpB;EACV;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqB,cAAcA,CAACnP,MAAM,EAAErB,WAAW,EAAE0G,gBAAgB,GAAG,QAAQ,EAAErD,OAAO,GAAG,CAAC,CAAC,EAAE;EAC3FjC,cAAc,CAACC,MAAM,EAAErB,WAAW,CAAC;EACnC,IAAIyQ,SAAS,GAAGpP,MAAM,CAACN,IAAI;EAE3BuC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEkN,SAAS,CAAC;EAE/D,MAAMvP,OAAO,GAAGkO,iBAAiB,CAACqB,SAAS,CAAC,IAAIjN,cAAc;EAE9DF,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAErC,OAAO,CAAC;EAEjD,OAAOA,OAAO,CAACG,MAAM,EAAErB,WAAW,EAAE;IAAE,GAAGqD,OAAO;IAAEqD;EAAiB,CAAC,CAAC;AACzE;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}