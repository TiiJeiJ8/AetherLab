{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-config-panel\"\n};\nconst _hoisted_2 = {\n  class: \"panel-header-CCP\",\n  style: {\n    \"position\": \"relative\",\n    \"display\": \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"space-between\"\n  }\n};\nconst _hoisted_3 = [\"innerHTML\"];\nconst _hoisted_4 = {\n  class: \"chart-type-name\"\n};\nconst _hoisted_5 = {\n  class: \"mapping-section-toggle-wrapper\"\n};\nconst _hoisted_6 = {\n  class: \"action-section\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  key: 1,\n  class: \"error-message\"\n};\nconst _hoisted_9 = {\n  class: \"error-text\"\n};\nconst _hoisted_10 = {\n  class: \"tooltip-header\"\n};\nconst _hoisted_11 = {\n  class: \"tooltip-title\"\n};\nconst _hoisted_12 = {\n  class: \"tooltip-description\"\n};\nconst _hoisted_13 = {\n  class: \"tooltip-section\"\n};\nconst _hoisted_14 = {\n  class: \"tooltip-tags\"\n};\nconst _hoisted_15 = {\n  class: \"tooltip-section\"\n};\nconst _hoisted_16 = {\n  class: \"tooltip-tags\"\n};\nexport function render(_ctx, _cache) {\n  const _component_AutoRenderToggle = _resolveComponent(\"AutoRenderToggle\");\n  const _component_ChartMappingConfig = _resolveComponent(\"ChartMappingConfig\");\n  const _component_ChartBasicConfig = _resolveComponent(\"ChartBasicConfig\");\n  const _component_ChartFilterConfig = _resolveComponent(\"ChartFilterConfig\");\n  const _component_ChartAdvancedConfig = _resolveComponent(\"ChartAdvancedConfig\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 右侧边栏总标题 \"), _createElementVNode(\"div\", _hoisted_2, [_cache[9] || (_cache[9] = _createElementVNode(\"h3\", {\n    style: {\n      \"margin\": \"0\"\n    }\n  }, \" Chart Configuration \", -1 /* HOISTED */)), _createCommentVNode(\" 图表类型及相关提示 \"), _createElementVNode(\"div\", {\n    class: \"chart-type-tag\",\n    onMouseenter: _cache[0] || (_cache[0] = $event => _ctx.showTooltip($event, _ctx.props.selectedChartType)),\n    onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.hideTooltip && _ctx.hideTooltip(...args)),\n    style: {\n      \"position\": \"relative\",\n      \"max-width\": \"50%\",\n      \"white-space\": \"normal\",\n      \"word-break\": \"break-all\",\n      \"text-align\": \"right\",\n      \"right\": \"0\",\n      \"margin-right\": \"3%\"\n    }\n  }, [_createElementVNode(\"span\", {\n    class: \"chart-type-icon\",\n    innerHTML: _ctx.getChartIcon(_ctx.selectedChartType)\n  }, null, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"span\", _hoisted_4, _toDisplayString(_ctx.selectedChartType), 1 /* TEXT */)], 32 /* NEED_HYDRATION */)]), _createCommentVNode(\" 动态数据映射配置区域 \"), _createElementVNode(\"div\", _hoisted_5, [_ctx.mappingConfig && _ctx.mappingConfig.length ? (_openBlock(), _createBlock(_component_ChartMappingConfig, {\n    key: 0,\n    mappingConfig: _ctx.mappingConfig,\n    modelValue: _ctx.chartConfig,\n    \"onUpdate:modelValue\": _ctx.onMappingModelUpdate\n  }, {\n    \"title-append\": _withCtx(() => [_createCommentVNode(\" 自动渲染开关 \"), _createVNode(_component_AutoRenderToggle, {\n      modelValue: _ctx.autoRender,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.autoRender = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"mappingConfig\", \"modelValue\", \"onUpdate:modelValue\"])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 基础配置区域：所有图表通用配置 \"), _createVNode(_component_ChartBasicConfig, {\n    modelValue: _ctx.chartConfig,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.chartConfig = $event),\n    \"show-null-handling\": _ctx.showNullHandling,\n    \"chart-data\": _ctx.chartData,\n    \"chart-type\": _ctx.selectedChartType\n  }, null, 8 /* PROPS */, [\"modelValue\", \"show-null-handling\", \"chart-data\", \"chart-type\"]), _createCommentVNode(\" 动态数据过滤配置区域 \"), _createVNode(_component_ChartFilterConfig, {\n    modelValue: _ctx.chartConfig,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.chartConfig = $event),\n    rawData: _ctx.mainRawData\n  }, null, 8 /* PROPS */, [\"modelValue\", \"rawData\"]), _createCommentVNode(\" 动态高级配置区域 \"), _ctx.currentTypeConfig.advanced && _ctx.currentTypeConfig.advanced.length ? (_openBlock(), _createBlock(_component_ChartAdvancedConfig, {\n    key: 0,\n    advancedConfig: _ctx.currentTypeConfig.advanced,\n    modelValue: _ctx.chartConfig,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.chartConfig = $event)\n  }, null, 8 /* PROPS */, [\"advancedConfig\", \"modelValue\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 操作按钮 \"), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 应用配置按钮 \"), _createElementVNode(\"button\", {\n    class: \"apply-btn\",\n    disabled: _ctx.autoRender || !_ctx.isConfigValid,\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.generateChart && _ctx.generateChart(...args))\n  }, \" Apply Configuration \", 8 /* PROPS */, _hoisted_7), _createCommentVNode(\" 重置配置按钮 \"), _createElementVNode(\"button\", {\n    class: \"reset-btn\",\n    onClick: _cache[7] || (_cache[7] = (...args) => _ctx.resetConfig && _ctx.resetConfig(...args))\n  }, \" Reset Configuration \")]), _createCommentVNode(\" 保存至图表历史区按钮 \"), _createElementVNode(\"button\", {\n    class: \"save-history-btn\",\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.saveToHistory && _ctx.saveToHistory(...args))\n  }, \" Save to History \"), _createCommentVNode(\" 错误提示 \"), _ctx.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, _toDisplayString(_ctx.errorMessage), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 提示框 \"), _ctx.tooltip.visible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 2,\n    class: \"chart-tooltip\",\n    style: _normalizeStyle(_ctx.tooltip.style),\n    ref: \"tooltipRef\"\n  }, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"span\", _hoisted_11, _toDisplayString(_ctx.tooltip.type), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_12, _toDisplayString(_ctx.tooltip.description), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_13, [_cache[10] || (_cache[10] = _createElementVNode(\"h4\", null, \"Data Requirements\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tooltip.dataRequirements, requirement => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: requirement,\n      class: \"tooltip-tag data-tag\"\n    }, _toDisplayString(requirement), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_15, [_cache[11] || (_cache[11] = _createElementVNode(\"h4\", null, \"Use Cases\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tooltip.useCases, useCase => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: useCase,\n      class: \"tooltip-tag use-case-tag\"\n    }, _toDisplayString(useCase), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onMouseenter","_cache","$event","_ctx","showTooltip","props","selectedChartType","onMouseleave","args","hideTooltip","innerHTML","getChartIcon","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","mappingConfig","length","_createBlock","_component_ChartMappingConfig","modelValue","chartConfig","onMappingModelUpdate","_withCtx","_createVNode","_component_AutoRenderToggle","autoRender","_","_component_ChartBasicConfig","showNullHandling","chartData","_component_ChartFilterConfig","rawData","mainRawData","currentTypeConfig","advanced","_component_ChartAdvancedConfig","advancedConfig","_hoisted_6","disabled","isConfigValid","onClick","generateChart","_hoisted_7","resetConfig","saveToHistory","errorMessage","_hoisted_8","_hoisted_9","tooltip","visible","_normalizeStyle","ref","_hoisted_10","_hoisted_11","type","_hoisted_12","description","_hoisted_13","_hoisted_14","_Fragment","_renderList","dataRequirements","requirement","_hoisted_15","_hoisted_16","useCases","useCase"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\frontend\\src\\components\\Chart\\ChartConfigPanel.vue"],"sourcesContent":["<template>\n<div class=\"chart-config-panel\">\n    <!-- 右侧边栏总标题 -->\n    <div class=\"panel-header-CCP\" style=\"position: relative; display: flex; align-items: center; justify-content: space-between;\">\n        <h3 style=\"margin: 0;\">\n            Chart Configuration\n        </h3>\n        <!-- 图表类型及相关提示 -->\n        <div\n            class=\"chart-type-tag\"\n            @mouseenter=\"showTooltip($event, props.selectedChartType)\"\n            @mouseleave=\"hideTooltip\"\n            style=\"position: relative; max-width: 50%; white-space: normal; word-break: break-all; text-align: right; right: 0; margin-right: 3%;\"\n        >\n            <span class=\"chart-type-icon\" v-html=\"getChartIcon(selectedChartType)\"></span>\n            <span class=\"chart-type-name\">{{ selectedChartType }}</span>\n        </div>\n    </div>\n\n    <!-- 动态数据映射配置区域 -->\n    <div class=\"mapping-section-toggle-wrapper\">\n        <ChartMappingConfig\n            v-if=\"mappingConfig && mappingConfig.length\"\n            :mappingConfig=\"mappingConfig\"\n            :modelValue=\"chartConfig\"\n            @update:modelValue=\"onMappingModelUpdate\"\n        >\n            <template #title-append>\n            <!-- 自动渲染开关 -->\n            <AutoRenderToggle v-model=\"autoRender\" />\n            </template>\n        </ChartMappingConfig>\n    </div>\n\n    <!-- 基础配置区域：所有图表通用配置 -->\n    <ChartBasicConfig\n        v-model=\"chartConfig\"\n        :show-null-handling=\"showNullHandling\"\n        :chart-data=\"chartData\"\n        :chart-type=\"selectedChartType\"\n    />\n\n    <!-- 动态数据过滤配置区域 -->\n    <ChartFilterConfig\n        v-model=\"chartConfig\"\n        :rawData=\"mainRawData\"\n    />\n\n    <!-- 动态高级配置区域 -->\n    <ChartAdvancedConfig\n        v-if=\"currentTypeConfig.advanced && currentTypeConfig.advanced.length\"\n        :advancedConfig=\"currentTypeConfig.advanced\"\n        v-model=\"chartConfig\"\n    />\n\n    <!-- 操作按钮 -->\n    <div class=\"action-section\">\n        <!-- 应用配置按钮 -->\n        <button\n            class=\"apply-btn\"\n            :disabled=\"autoRender || !isConfigValid\"\n            @click=\"generateChart\"\n        >\n        Apply Configuration\n        </button>\n        <!-- 重置配置按钮 -->\n        <button class=\"reset-btn\" @click=\"resetConfig\">\n        Reset Configuration\n        </button>\n    </div>\n\n    <!-- 保存至图表历史区按钮 -->\n    <button\n        class=\"save-history-btn\"\n        @click=\"saveToHistory\"\n    >\n        Save to History\n    </button>\n\n    <!-- 错误提示 -->\n    <div v-if=\"errorMessage\" class=\"error-message\">\n        <div class=\"error-text\">{{ errorMessage }}</div>\n    </div>\n\n    <!-- 提示框 -->\n    <div\n        v-if=\"tooltip.visible\"\n        class=\"chart-tooltip\"\n        :style=\"tooltip.style\"\n        ref=\"tooltipRef\"\n    >\n        <div class=\"tooltip-header\">\n            <span class=\"tooltip-title\">{{ tooltip.type }}</span>\n            <span class=\"tooltip-description\">{{ tooltip.description }}</span>\n        </div>\n        <div class=\"tooltip-section\">\n            <h4>Data Requirements</h4>\n            <div class=\"tooltip-tags\">\n                <span\n                    v-for=\"requirement in tooltip.dataRequirements\"\n                    :key=\"requirement\"\n                    class=\"tooltip-tag data-tag\"\n                >\n                    {{ requirement }}\n                </span>\n            </div>\n        </div>\n        <div class=\"tooltip-section\">\n            <h4>Use Cases</h4>\n            <div class=\"tooltip-tags\">\n                <span\n                    v-for=\"useCase in tooltip.useCases\"\n                    :key=\"useCase\"\n                    class=\"tooltip-tag use-case-tag\"\n                >\n                    {{ useCase }}\n                </span>\n            </div>\n        </div>\n    </div>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, computed, watch, reactive, nextTick } from 'vue'\nimport { chartIcons } from '../../assets/JS/SVG/chartIcons.js'\nimport { chartsTooltipConfig } from '../../assets/JS/Config/ChartsTooltipConfig.js'\nimport { chartTypeConfig } from '../../assets/JS/Config/ChartTypeConfig.js'\nimport AutoRenderToggle from '../Common/AutoRenderToggle.vue'\nimport ChartBasicConfig from './ChartBasicConfig.vue'\nimport ChartMappingConfig from './ChartMappingConfig.vue'\nimport ChartFilterConfig from './ChartFilterConfig.vue'\nimport ChartAdvancedConfig from './ChartAdvancedConfig.vue'\n\n// 当前类型的配置\nconst currentTypeConfig = computed(() => {\n    // 兼容首字母大写/小写\n    return chartTypeConfig[props.selectedChartType] || chartTypeConfig[props.selectedChartType.charAt(0).toUpperCase() + props.selectedChartType.slice(1)] || {}\n})\n\n// Props\nconst props = defineProps({\n    selectedChartType: {\n        type: String,\n        default: 'line'\n    },\n    currentFile: {\n        type: Object,\n        default: null\n    },\n})\n\n// Emits\nconst emit = defineEmits(['config-change', 'generate-chart', 'save-history'])\n// 保存到历史区\nfunction saveToHistory() {\n    // 触发保存事件，传递当前配置\n    emit('save-history', {\n        config: { ...chartConfig.value },\n        colorTheme: chartConfig.value.colorScheme || 'default',\n    })\n}\n\n// 响应式数据\nconst showDataFilter = ref(false)\nconst showAdvancedConfig = ref(false)\nconst errorMessage = ref('')\nconst tooltipRef = ref(null)\n\n// 自动渲染开关，默认手动渲染\nconst autoRender = ref(false)\n\n// 提示框状态\nconst tooltip = reactive({\n    visible: false,\n    type: '',\n    description: '',\n    dataRequirements: [],\n    useCases: [],\n    style: {}\n})\n\nlet tooltipTimeout = null\n\n// 拖拽状态\nconst isDragOver = ref({\n    xAxis: false,\n    yAxis: false,\n    series: false\n})\n\nconst dragError = ref({\n    xAxis: false,\n    yAxis: false,\n    series: false\n})\n\n// 图表配置\nconst chartConfig = ref({\n    xAxis: {\n        field: '',\n        type: ''\n    },\n    yAxis: {\n        field: '',\n        type: ''\n    },\n    series: [],\n    title: '',\n    titlePosition: 'center',\n    colorScheme: 'default',\n    animation: true,\n    legendVisible: true,\n    isAggregate: false,\n    dataRange: 'all',\n    nullHandling: 'ignoreNull',\n    // 默认seriesType: map（仅Geo_Map类型有效）\n    seriesType: 'map',\n})\n\n// 合并mapping字段，保留其它字段\nfunction onMappingModelUpdate(mapping) {\n    // 只合并mappingConfig中定义的key，其它字段保留\n    const mappingKeys = (currentTypeConfig.value.mapping || []).map(item => item.key)\n    const newConfig = { ...chartConfig.value }\n    mappingKeys.forEach(key => {\n        newConfig[key] = mapping[key]\n    })\n    chartConfig.value = newConfig\n    emit('config-change', chartConfig.value)\n}\n\n// 需要显示 Null Handling 的图表类型\nconst showNullHandlingTypes = [\n    'Unknown', 'Line', 'Bar', 'Scatter', 'Candlestick', 'Parallel', 'PictorialBar'\n]\n// 判断当前类型是否需要显示 Null Handling\nconst showNullHandling = computed(() => {\n    const type = props.selectedChartType\n    if (!type) return false\n    // 兼容首字母大写/小写\n    const normalized = type.charAt(0).toUpperCase() + type.slice(1).toLowerCase()\n    return showNullHandlingTypes.includes(normalized)\n})\n\n// chartData自动获取当前用于绘图的数据来判断是否具有缺失值\nconst chartData = computed(() => props.chartData || [])\n\n// 计算属性\nconst isConfigValid = computed(() => {\n    const type = (props.selectedChartType || '').toLowerCase();\n    const cfg = chartConfig.value;\n    console.log('Current chart type:', type, 'with config:', JSON.parse(JSON.stringify(cfg)));\n    if (['line', 'bar', 'scatter'].includes(type)) {\n        const xValid = cfg.xAxis && cfg.xAxis.field;\n        const y = cfg.yAxis;\n        const yValid = Array.isArray(y) ? y.length > 0 : (y && y.field);\n        return xValid && yValid;\n    }\n    if (['pie'].includes(type)) {\n        // category/value 结构\n        const cat = cfg.category;\n        const val = cfg.value;\n        return cat && cat.field && val && val.field;\n    }\n    if () {\n        \n    },\n    if (['candlestick'].includes(type)) {\n        return  cfg.time && cfg.time.field &&\n            cfg.open && cfg.open.field &&\n            cfg.close && cfg.close.field &&\n            cfg.high && cfg.high.field &&\n            cfg.low && cfg.low.field;\n    }\n    if (['heatmap'].includes(type)) {\n        return cfg.xAxis && cfg.xAxis.field &&\n            cfg.yAxis && cfg.yAxis.field &&\n            cfg.value && cfg.value.field;\n    }\n    if (['radar'].includes(type)) {\n        return Array.isArray(cfg.indicator) && cfg.indicator.length > 0 &&\n        Array.isArray(cfg.value) && cfg.value.length > 0;\n    }\n    if (['boxplot'].includes(type)) {\n        return cfg.category && cfg.category.field\n    }\n    if (['graph'].includes(type)) {\n        return cfg.nodeID && cfg.nodeID.field &&\n            cfg.edgeSource && cfg.edgeSource.field &&\n            cfg.edgeTarget && cfg.edgeTarget.field;\n    }\n    if (['tree'].includes(type)) {\n        return ( cfg.nodeID && cfg.nodeID.field && cfg.parentID && cfg.parentID.field )\n    }\n    if (['treemap', 'sunburst'].includes(type)) {\n        return ( cfg.nodeID && cfg.nodeID.field &&\n            cfg.parentID && cfg.parentID.field )\n    }\n    if (['parallel'].includes(type)) {\n        return Array.isArray(cfg.dimensions) && cfg.dimensions.length > 0 &&\n            cfg.dimensions.every(dim => dim.field);\n    }\n    if (['sankey'].includes(type)) {\n        return cfg.source && cfg.source.field &&\n            cfg.target && cfg.target.field &&\n            cfg.value && cfg.value.field;\n    }\n    if (['funnel'].includes(type)) {\n        return cfg.stage && cfg.stage.field &&\n            cfg.value && cfg.value.field;\n    }\n    if (['gauge'].includes(type)) {\n        return cfg.value && cfg.value.field;\n    }\n    if (['pictorialbar'].includes(type)) {\n        return cfg.category && cfg.category.field &&\n            cfg.value && cfg.value.field;\n    }\n    if (['themeriver'].includes(type)) {\n        return cfg.date && cfg.date.field &&\n            cfg.value && cfg.value.field;\n    }\n    if (['calendar'].includes(type)) {\n        return cfg.date && cfg.date.field;\n    }\n});\n\n// 监听 chartConfig 变化，自动渲染\nwatch(chartConfig, (val) => {\n    if (autoRender.value && isConfigValid.value) {\n        emit('generate-chart', chartConfig.value)\n    }\n    console.log('Current chartConfig:', JSON.parse(JSON.stringify(val)))\n}, { deep: true })\n\n// 监听自动渲染开关变化，切换为实时时立即渲染\nwatch(autoRender, (val) => {\n    if (val && isConfigValid.value) {\n        emit('generate-chart', chartConfig.value)\n    }\n})\n\nfunction getChartIcon (type) {\n    // 直接使用传入的类型，chartIcons.js 中的键是首字母大写格式\n    return chartIcons[type] || ''\n}\n\nfunction toggleDataFilter() {\n    showDataFilter.value = !showDataFilter.value\n}\n\nfunction toggleAdvancedConfig() {\n    showAdvancedConfig.value = !showAdvancedConfig.value\n}\n\n// 显示提示框\nfunction showTooltip(event, type) {\n    // 清除之前的定时器\n    if (tooltipTimeout) {\n        clearTimeout(tooltipTimeout)\n    }\n    \n    // 设置1.2秒延迟\n    tooltipTimeout = setTimeout(() => {\n        const config = chartsTooltipConfig[type]\n        if (config) {\n            tooltip.type = type\n            tooltip.description = config.description\n            tooltip.dataRequirements = config.dataRequirements\n            tooltip.useCases = config.useCases\n            tooltip.visible = true\n            \n            // 在下一个tick中计算位置，确保DOM已更新\n            nextTick(() => {\n                positionTooltip(event)\n            })\n        }\n    }, 1200) // 1.2秒延迟\n}\n\n// 隐藏提示框\nfunction hideTooltip() {\n    if (tooltipTimeout) {\n        clearTimeout(tooltipTimeout)\n        tooltipTimeout = null\n    }\n    tooltip.visible = false\n}\n\n// 计算提示框位置，确保不超出屏幕\nfunction positionTooltip(event) {\n    if (!tooltipRef.value) return\n    \n    const tooltipEl = tooltipRef.value\n    const rect = tooltipEl.getBoundingClientRect()\n    const viewportWidth = window.innerWidth\n    const viewportHeight = window.innerHeight\n    \n    let left = event.pageX + 10\n    let top = event.pageY + 10\n    \n    // 防止右边超出屏幕\n    if (left + rect.width > viewportWidth) {\n        left = event.pageX - rect.width - 10\n    }\n    \n    // 防止底部超出屏幕\n    if (top + rect.height > viewportHeight) {\n        top = event.pageY - rect.height - 10\n    }\n    \n    // 防止左边超出屏幕\n    if (left < 0) {\n        left = 10\n    }\n    \n    // 防止顶部超出屏幕\n    if (top < 0) {\n        top = 10\n    }\n    \n    tooltip.style = {\n        left: `${left}px`,\n        top: `${top}px`,\n        position: 'fixed',\n        zIndex: 1000\n    }\n}\n\n// 拖拽处理\nfunction handleDragEnter (target) {\n    isDragOver.value[target] = true\n    dragError.value[target] = false\n    }\n\nfunction handleDragLeave (target) {\n    isDragOver.value[target] = false\n}\n\nfunction handleDragOver (event, target) {\n    event.preventDefault()\n    isDragOver.value[target] = true\n}\n\nfunction handleDrop (event, target) {\n    event.preventDefault()\n    isDragOver.value[target] = false\n\n    try {\n        const dragData = JSON.parse(event.dataTransfer.getData('text/plain'))\n\n        if (dragData.type === 'column') {\n        const column = dragData.column\n\n        // 验证数据类型是否适合目标区域\n        if (validateColumnForTarget(column, target)) {\n            mapColumnToTarget(column, target)\n            errorMessage.value = ''\n        } else {\n            dragError.value[target] = true\n            errorMessage.value = `Column \"${column.name}\" data type is not suitable for ${getTargetName(target)}`\n            setTimeout(() => {\n            dragError.value[target] = false\n            errorMessage.value = ''\n            }, 3000)\n        }\n        }\n    } catch (error) {\n        console.error('Drop failed:', error)\n        errorMessage.value = 'Drag and drop failed, please try again'\n    }\n}\n\nfunction validateColumnForTarget (column, target) {\n    const columnType = column.type\n\n    switch (target) {\n        case 'xAxis':\n        // X轴通常接受类别型数据\n        return ['string', 'category', 'date'].includes(columnType)\n        case 'yAxis':\n        // Y轴通常接受数值型数据\n        return ['number', 'integer'].includes(columnType)\n        case 'series':\n        // 系列数据通常接受数值型数据\n        return ['number', 'integer'].includes(columnType)\n        default:\n        return true\n    }\n}\n\nfunction mapColumnToTarget (column, target) {\n    switch (target) {\n        case 'xAxis':\n        chartConfig.value.xAxis = {\n            field: column.name,\n            type: column.type\n        }\n        break\n        case 'yAxis':\n        chartConfig.value.yAxis = {\n            field: column.name,\n            type: column.type\n        }\n        break\n        case 'series':\n        // 系列可以有多个，但这里简化为单个\n        chartConfig.value.series = [{\n            field: column.name,\n            type: column.type\n        }]\n        break\n    }\n\n    emit('config-change', chartConfig.value)\n}\n\nfunction removeMapping (target) {\n    switch (target) {\n        case 'xAxis':\n        chartConfig.value.xAxis = { field: '', type: '' }\n        break\n        case 'yAxis':\n        chartConfig.value.yAxis = { field: '', type: '' }\n        break\n        case 'series':\n        chartConfig.value.series = []\n        break\n    }\n\n    emit('config-change', chartConfig.value)\n}\n\nfunction removeSeriesMapping (index) {\n    chartConfig.value.series.splice(index, 1)\n    emit('config-change', chartConfig.value)\n}\n\nfunction getTargetName (target) {\n    const names = {\n        xAxis: 'X Axis',\n        yAxis: 'Y Axis',\n        series: 'Data Series'\n    }\n    return names[target] || target\n}\n\nfunction generateChart () {\n    if (!isConfigValid.value) {\n        errorMessage.value = 'Please complete the required data mapping configuration'\n        return\n    }\n    emit('generate-chart', chartConfig.value)\n}\n\nfunction resetConfig () {\n    chartConfig.value = {\n        xAxis: { field: '', type: '' },\n        yAxis: { field: '', type: '' },\n        series: [],\n        title: '',\n        colorScheme: 'default',\n        animation: chartConfig.value.animation,\n        isAggregate: false,\n        titlePosition: 'center',\n        legendVisible: true,\n        legendPosition: 'bottom',\n        dataRange: 'all',\n        nullHandling: 'ignoreNull'\n    }\n\n    errorMessage.value = ''\n    emit('config-change', chartConfig.value)\n}\n\nimport { fileDataMap } from '@/assets/JS/utils/dataStructureOptimize.js'\n\nconst mainRawData = computed(() => {\n    // 以当前结构文件为主\n    if (props.currentFile && props.currentFile.name && fileDataMap.value[props.currentFile.name]) {\n        return fileDataMap.value[props.currentFile.name]\n    }\n    return []\n})\n\n// 动态生成 mappingConfig，支持 Geo_Map 多类型\nconst mappingConfig = computed(() => {\n    // 普通图表类型直接返回\n    if (props.selectedChartType !== 'Geo_Map') {\n        return currentTypeConfig.value.mapping || [];\n    }\n    // 地图类型根据 seriesType 动态返回\n    const baseMapping = currentTypeConfig.value.mapping || [];\n    const seriesType = chartConfig.value.seriesType;\n    if (seriesType === 'map' || seriesType === 'bar') {\n        return [\n            baseMapping.find(f => f.key === 'nameField'),\n            baseMapping.find(f => f.key === 'value'),\n        ].filter(Boolean);\n    } else if (seriesType === 'scatter' || seriesType === 'heatmap') {\n        return [\n            baseMapping.find(f => f.key === 'lngField'),\n            baseMapping.find(f => f.key === 'latField'),\n            baseMapping.find(f => f.key === 'value'),\n            baseMapping.find(f => f.key === 'name'),\n        ].filter(Boolean);\n    } else if (seriesType === 'lines') {\n        return [\n            baseMapping.find(f => f.key === 'fromLngField'),\n            baseMapping.find(f => f.key === 'fromLatField'),\n            baseMapping.find(f => f.key === 'toLngField'),\n            baseMapping.find(f => f.key === 'toLatField'),\n            baseMapping.find(f => f.key === 'fromName'),\n            baseMapping.find(f => f.key === 'toName'),\n            baseMapping.find(f => f.key === 'value'),\n        ].filter(Boolean);\n    } else if (seriesType === 'pie') {\n        const valueField = baseMapping.find(f => f.key === 'value');\n        return [\n            baseMapping.find(f => f.key === 'nameField'),\n            valueField ? { ...valueField, multiple: true } : undefined,\n        ].filter(Boolean);\n    }\n    // 默认\n    return baseMapping;\n});\n\n// 监听图表类型变化\nwatch(() => props.selectedChartType, (newType) => {\n    // 根据图表类型调整配置\n    if (newType === 'Pie' || newType === 'pie') {\n        // 饼图不需要Y轴\n        chartConfig.value.yAxis = { field: '', type: '' }\n    }\n    // 自动渲染开启时，切换类型后立即触发渲染\n    if (autoRender.value && isConfigValid.value) {\n        emit('generate-chart', chartConfig.value)\n    }\n})\n</script>\n\n<style scoped>\n\n@import '../../assets/CSS/ChartConfigPanel.css';\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}