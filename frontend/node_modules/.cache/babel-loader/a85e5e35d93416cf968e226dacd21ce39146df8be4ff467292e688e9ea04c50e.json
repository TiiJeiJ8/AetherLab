{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-display\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"empty-tip\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  ref: \"chartRef\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$setup.hasSeries ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"No Charts data. Please \")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */))]);\n}","map":{"version":3,"names":["class","key","ref","style","_createElementBlock","_hoisted_1","$setup","hasSeries","_hoisted_2","_hoisted_3"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\newArchitecture\\frontend_vue_design\\src\\components\\ChartDisplay.vue"],"sourcesContent":["<template>\n    <div class=\"chart-display\">\n        <div v-if=\"!hasSeries\" class=\"empty-tip\">No Charts data. Please </div>\n        <div v-else ref=\"chartRef\" style=\"width:100%;height:100%\"></div>\n    </div>\n</template>\n\n<script setup>\n/* eslint-disable */\n    import { ref, watch, onMounted, onBeforeUnmount, computed } from 'vue'\n    import * as echarts from 'echarts'\n\n    const props = defineProps({\n        option: { type: Object, required: true }\n    })\n\n    const chartRef = ref(null)\n    let chartInstance = null\n\n    const hasSeries = computed(() => {\n        return props.option && Array.isArray(props.option.series) && props.option.series.length > 0\n    })\n\n    function renderChart() {\n        if (!hasSeries.value) return\n        if (!chartInstance && chartRef.value) {\n            chartInstance = echarts.init(chartRef.value)\n        }\n        if (chartInstance && props.option) {\n            chartInstance.setOption(props.option, true)\n        }\n    }\n\n    watch(() => props.option, renderChart, { deep: true })\n    onMounted(renderChart)\n    onBeforeUnmount(() => {\n        if (chartInstance) chartInstance.dispose()\n    })\n</script>\n\n<style scoped>\n    .chart-display {\n        width: 100%;\n        height: 100%;\n        min-height: 400px;\n        background: var(--bg-color, #fff);\n        border-radius: 12px;\n        box-shadow: 0 0px 1px var(--text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .empty-tip {\n        color: #aaa;\n        font-size: 1.2em;\n        text-align: center;\n        letter-spacing: 1px;\n    }\n</style>\n"],"mappings":";;EACSA,KAAK,EAAC;AAAe;;EAD9BC,GAAA;EAE+BD,KAAK,EAAC;;;EAFrCC,GAAA;EAGoBC,GAAG,EAAC,UAAU;EAACC,KAA8B,EAA9B;IAAA;IAAA;EAAA;;;uBAF/BC,mBAAA,CAGM,OAHNC,UAGM,G,CAFUC,MAAA,CAAAC,SAAS,I,cAArBH,mBAAA,CAAsE,OAAtEI,UAAsE,EAA7B,yBAAuB,M,cAChEJ,mBAAA,CAAgE,OAAhEK,UAAgE,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}