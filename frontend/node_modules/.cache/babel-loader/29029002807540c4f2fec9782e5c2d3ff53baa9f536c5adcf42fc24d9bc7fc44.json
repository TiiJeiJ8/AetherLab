{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createBlock as _createBlock, vShow as _vShow, withDirectives as _withDirectives, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"advanced-section\"\n};\nconst _hoisted_2 = {\n  class: \"adv-content\"\n};\nconst _hoisted_3 = [\"min\", \"max\", \"value\", \"onInput\"];\nconst _hoisted_4 = [\"checked\", \"onChange\"];\nconst _hoisted_5 = [\"value\", \"onInput\"];\nconst _hoisted_6 = [\"value\", \"onChange\"];\nconst _hoisted_7 = [\"value\"];\nimport { ref, watch, computed } from 'vue';\nimport LineSeriesStylePanel from './LineSeriesStylePanel.vue';\nexport default {\n  __name: 'ChartAdvancedConfig',\n  props: {\n    advancedConfig: Array,\n    modelValue: Object,\n    xData: Array,\n    yDataArr: Array\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    /* no-undef */\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const localConfig = ref({\n      ...props.modelValue\n    });\n    const isCollapsed = ref(true);\n    const seriesCount = computed(() => props.yDataArr ? props.yDataArr.length : 0);\n    watch(() => props.modelValue, val => {\n      localConfig.value = {\n        ...val\n      };\n    });\n    function updateField(key, value) {\n      localConfig.value[key] = value;\n      emit('update:modelValue', {\n        ...localConfig.value\n      });\n    }\n    function toggleCollapse() {\n      isCollapsed.value = !isCollapsed.value;\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n        class: \"section-header adv-header\",\n        onClick: toggleCollapse\n      }, [_cache[0] || (_cache[0] = _createElementVNode(\"h4\", null, \"Advanced Settings\", -1)), _createElementVNode(\"span\", {\n        class: _normalizeClass([\"collapse-icon\", {\n          collapsed: isCollapsed.value\n        }])\n      }, \"▼\", 2)]), _createVNode(_Transition, {\n        name: \"collapse\"\n      }, {\n        default: _withCtx(() => [_withDirectives(_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.advancedConfig, item => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: item.key,\n            class: \"config-item\"\n          }, [_createElementVNode(\"label\", null, _toDisplayString(item.label), 1), item.type === 'number' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 0,\n            type: \"number\",\n            min: item.min,\n            max: item.max,\n            value: localConfig.value[item.key],\n            onInput: $event => updateField(item.key, $event.target.valueAsNumber)\n          }, null, 40, _hoisted_3)) : _createCommentVNode(\"\", true), item.type === 'checkbox' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 1,\n            type: \"checkbox\",\n            checked: localConfig.value[item.key],\n            onChange: $event => updateField(item.key, $event.target.checked)\n          }, null, 40, _hoisted_4)) : _createCommentVNode(\"\", true), item.type === 'text' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 2,\n            type: \"text\",\n            value: localConfig.value[item.key],\n            onInput: $event => updateField(item.key, $event.target.value)\n          }, null, 40, _hoisted_5)) : _createCommentVNode(\"\", true), item.type === 'select' ? (_openBlock(), _createElementBlock(\"select\", {\n            key: 3,\n            value: localConfig.value[item.key],\n            onChange: $event => updateField(item.key, $event.target.value)\n          }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.options, option => {\n            return _openBlock(), _createElementBlock(\"option\", {\n              key: option.value,\n              value: option.value\n            }, _toDisplayString(option.label), 9, _hoisted_7);\n          }), 128))], 40, _hoisted_6)) : _createCommentVNode(\"\", true), item.type === 'lineSeriesStylePanel' ? (_openBlock(), _createBlock(LineSeriesStylePanel, {\n            key: 4,\n            \"series-count\": seriesCount.value,\n            value: localConfig.value[item.key],\n            \"x-data\": props.xData,\n            \"y-data-arr\": props.yDataArr,\n            onUpdate: val => updateField(item.key, val)\n          }, null, 8, [\"series-count\", \"value\", \"x-data\", \"y-data-arr\", \"onUpdate\"])) : _createCommentVNode(\"\", true)]);\n        }), 128))], 512), [[_vShow, !isCollapsed.value]])]),\n        _: 1\n      })]);\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","computed","LineSeriesStylePanel","props","__props","emit","__emit","localConfig","modelValue","isCollapsed","seriesCount","yDataArr","length","val","value","updateField","key","toggleCollapse"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/ChartAdvancedConfig.vue"],"sourcesContent":["<template>\n<div class=\"advanced-section\">\n    <div class=\"section-header adv-header\" @click=\"toggleCollapse\">\n        <h4>Advanced Settings</h4>\n        <span class=\"collapse-icon\" :class=\"{ collapsed: isCollapsed }\">&#9660;</span>\n    </div>\n    <transition name=\"collapse\">\n        <div v-show=\"!isCollapsed\" class=\"adv-content\">\n            <div v-for=\"item in advancedConfig\" :key=\"item.key\" class=\"config-item\">\n                <!-- 组件标题 -->\n                <label>{{ item.label }}</label>\n\n                <!-- 输入number,显示数字输入框 -->\n                <input v-if=\"item.type === 'number'\" type=\"number\"\n                :min=\"item.min\" :max=\"item.max\"\n                :value=\"localConfig[item.key]\"\n                @input=\"updateField(item.key, $event.target.valueAsNumber)\" />\n\n                <!-- 输入checkbox,显示复选框 -->\n                <input v-if=\"item.type === 'checkbox'\" type=\"checkbox\"\n                :checked=\"localConfig[item.key]\"\n                @change=\"updateField(item.key, $event.target.checked)\" />\n\n                <!-- 输入text，显示文本输入框 -->\n                <input v-if=\"item.type === 'text'\" type=\"text\"\n                :value=\"localConfig[item.key]\"\n                @input=\"updateField(item.key, $event.target.value)\" />\n\n                <!-- 输入select，显示下拉选择框 -->\n                <select v-if=\"item.type === 'select'\" :value=\"localConfig[item.key]\" @change=\"updateField(item.key, $event.target.value)\">\n                    <option v-for=\"option in item.options\" :key=\"option.value\" :value=\"option.value\">{{ option.label }}</option>\n                </select>\n\n                <!-- 折线样式与数据点样式自定义面板 -->\n                <LineSeriesStylePanel\n                  v-if=\"item.type === 'lineSeriesStylePanel'\"\n                  :series-count=\"seriesCount\"\n                  :value=\"localConfig[item.key]\"\n                  :x-data=\"props.xData\"\n                  :y-data-arr=\"props.yDataArr\"\n                  @update=\"val => updateField(item.key, val)\"\n                />\n                <!-- 其他类型可扩展 -->\n            </div>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script setup>\n/* no-undef */\n/* eslint-disable */\nimport { ref, watch, computed } from 'vue'\nimport LineSeriesStylePanel from './LineSeriesStylePanel.vue'\nconst props = defineProps({\n    advancedConfig: Array,\n    modelValue: Object,\n    xData: Array,\n    yDataArr: Array\n})\nconst emit = defineEmits(['update:modelValue'])\n\nconst localConfig = ref({ ...props.modelValue })\nconst isCollapsed = ref(true)\n\nconst seriesCount = computed(() => props.yDataArr ? props.yDataArr.length : 0)\n\nwatch(() => props.modelValue, (val) => {\n    localConfig.value = { ...val }\n})\n\nfunction updateField(key, value) {\n    localConfig.value[key] = value\n    emit('update:modelValue', { ...localConfig.value })\n}\n\nfunction toggleCollapse() {\n    isCollapsed.value = !isCollapsed.value\n}\n</script>\n\n<style scoped>\n.advanced-section {\n    margin-bottom: 16px;\n    border-radius: 8px;\n    background: var(--bg-secondary);\n    box-shadow: 0 1px 2px rgba(0,0,0,0.03);\n}\n.adv-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 8px 12px;\n    user-select: none;\n}\n.collapse-icon {\n    font-size: 16px;\n    margin-left: 8px;\n    transition: transform 0.2s;\n}\n.collapse-icon.collapsed {\n    transform: rotate(-90deg);\n}\n.adv-content {\n    padding: 8px 16px 12px 16px;\n}\n.config-item {\n    margin-bottom: 12px;\n}\n.collapse-enter-active, .collapse-leave-active {\n    transition: max-height 0.25s cubic-bezier(.4,0,.2,1), opacity 0.2s;\n}\n.collapse-enter-from, .collapse-leave-to {\n    max-height: 0;\n    opacity: 0;\n    overflow: hidden;\n}\n.collapse-enter-to, .collapse-leave-from {\n    max-height: 300px;\n    opacity: 1;\n}\ninput[type=\"number\"], input[type=\"text\"] {\n    background: var(--bg-secondary);\n    color: var(--text-main);\n    border: 1px solid var(--text-secondary);\n    border-radius: 6px;\n    padding: 2px 8px;\n    font-size: 14px;\n    outline: none;\n    transition: border-color 0.2s;\n}\ninput[type=\"checkbox\"] {\n    accent-color: #3b82f6;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;AAoDA,SAASA,GAAG,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,KAAI;AACzC,OAAOC,oBAAoB,MAAM,4BAA2B;;;;;;;;;;;;;IAH5D;IACA;IAGA,MAAMC,KAAK,GAAGC,OAAA;IAMd,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,WAAW,GAAGR,GAAG,CAAC;MAAE,GAAGI,KAAK,CAACK;IAAW,CAAC;IAC/C,MAAMC,WAAW,GAAGV,GAAG,CAAC,IAAI;IAE5B,MAAMW,WAAW,GAAGT,QAAQ,CAAC,MAAME,KAAK,CAACQ,QAAQ,GAAGR,KAAK,CAACQ,QAAQ,CAACC,MAAM,GAAG,CAAC;IAE7EZ,KAAK,CAAC,MAAMG,KAAK,CAACK,UAAU,EAAGK,GAAG,IAAK;MACnCN,WAAW,CAACO,KAAK,GAAG;QAAE,GAAGD;MAAI;IACjC,CAAC;IAED,SAASE,WAAWA,CAACC,GAAG,EAAEF,KAAK,EAAE;MAC7BP,WAAW,CAACO,KAAK,CAACE,GAAG,CAAC,GAAGF,KAAI;MAC7BT,IAAI,CAAC,mBAAmB,EAAE;QAAE,GAAGE,WAAW,CAACO;MAAM,CAAC;IACtD;IAEA,SAASG,cAAcA,CAAA,EAAG;MACtBR,WAAW,CAACK,KAAK,GAAG,CAACL,WAAW,CAACK,KAAI;IACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}