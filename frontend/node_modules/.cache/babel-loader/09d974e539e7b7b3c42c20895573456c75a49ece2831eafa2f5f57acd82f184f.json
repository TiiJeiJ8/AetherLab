{"ast":null,"code":"import { ref, nextTick } from 'vue';\nimport { getThemeIcon } from '@/assets/JS/SVG/icons.js';\nexport default {\n  __name: 'AutoRenderToggle',\n  props: {\n    modelValue: Boolean\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const toggleTooltip = ref({\n      visible: false,\n      text: '',\n      style: {}\n    });\n    function showToggleTooltip(event, type) {\n      toggleTooltip.value.text = type === 'Auto' ? 'Real-time Render' : 'Manual Render';\n      toggleTooltip.value.visible = true;\n      nextTick(() => {\n        // 兼容 span 嵌套，确保定位到 block-toggle-option\n        let el = event.currentTarget || event.target;\n        if (el && el.classList && !el.classList.contains('block-toggle-option')) {\n          el = el.closest('.block-toggle-option');\n        }\n        if (el) {\n          const rect = el.getBoundingClientRect();\n          toggleTooltip.value.style = {\n            left: `${rect.left + rect.width / 2 - 50}px`,\n            top: `${rect.bottom + 6}px`,\n            position: 'fixed',\n            zIndex: 2000,\n            minWidth: '100px',\n            textAlign: 'center'\n          };\n        }\n      });\n    }\n    function hideToggleTooltip() {\n      toggleTooltip.value.visible = false;\n    }\n    const __returned__ = {\n      props,\n      emit,\n      toggleTooltip,\n      showToggleTooltip,\n      hideToggleTooltip,\n      ref,\n      nextTick,\n      get getThemeIcon() {\n        return getThemeIcon;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","nextTick","getThemeIcon","props","__props","emit","__emit","toggleTooltip","visible","text","style","showToggleTooltip","event","type","value","el","currentTarget","target","classList","contains","closest","rect","getBoundingClientRect","left","width","top","bottom","position","zIndex","minWidth","textAlign","hideToggleTooltip"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Common/AutoRenderToggle.vue"],"sourcesContent":["<template>\n<div class=\"block-toggle-group\" style=\"position: relative;\">\n    <div class=\"block-toggle\" :class=\"{ 'checked': modelValue }\">\n        <div class=\"block-toggle-slider\" :class=\"{ 'right': !modelValue }\"></div>\n        <div class=\"block-toggle-option left\" :class=\"{ active: modelValue }\"\n            @mouseover=\"showToggleTooltip($event, 'Auto')\" @mouseout=\"hideToggleTooltip\"\n            @focus=\"showToggleTooltip($event, 'Auto')\" @blur=\"hideToggleTooltip\"\n            @click=\"() => emit('update:modelValue', true)\"\n            tabindex=\"0\"\n        >\n            <span v-html=\"getThemeIcon('refresh')\"></span>\n        </div>\n        <div class=\"block-toggle-option right\" :class=\"{ active: !modelValue }\"\n            @mouseover=\"showToggleTooltip($event, 'Manual')\" @mouseout=\"hideToggleTooltip\"\n            @focus=\"showToggleTooltip($event, 'Manual')\" @blur=\"hideToggleTooltip\"\n            @click=\"() => emit('update:modelValue', false)\"\n            tabindex=\"0\"\n        >\n            <span v-html=\"getThemeIcon('eye')\"></span>\n        </div>\n    </div>\n    <div v-if=\"toggleTooltip.visible\" class=\"toggle-tooltip\" :style=\"toggleTooltip.style\">\n        {{ toggleTooltip.text }}\n    </div>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, nextTick, defineProps, defineEmits } from 'vue'\nimport { getThemeIcon } from '@/assets/JS/SVG/icons.js'\n\nconst props = defineProps({\n    modelValue: Boolean\n})\nconst emit = defineEmits(['update:modelValue'])\n\n\n\nconst toggleTooltip = ref({ visible: false, text: '', style: {} })\nfunction showToggleTooltip (event, type) {\n    toggleTooltip.value.text = type === 'Auto' ? 'Real-time Render' : 'Manual Render'\n    toggleTooltip.value.visible = true\n    nextTick(() => {\n        // 兼容 span 嵌套，确保定位到 block-toggle-option\n        let el = event.currentTarget || event.target\n        if (el && el.classList && !el.classList.contains('block-toggle-option')) {\n            el = el.closest('.block-toggle-option')\n        }\n        if (el) {\n            const rect = el.getBoundingClientRect()\n            toggleTooltip.value.style = {\n                left: `${rect.left + rect.width / 2 - 50}px`,\n                top: `${rect.bottom + 6}px`,\n                position: 'fixed',\n                zIndex: 2000,\n                minWidth: '100px',\n                textAlign: 'center'\n            }\n        }\n    })\n}\nfunction hideToggleTooltip () {\n    toggleTooltip.value.visible = false\n}\n</script>\n\n<style scoped>\n\n.block-toggle-group {\n    display: flex;\n    align-items: center;\n    margin-right: 18px;\n    position: relative;\n}\n.block-toggle {\n    position: relative;\n    width: 74px;\n    height: 26px;\n    background: #f5f5f5;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.04);\n    transition: background 0.2s;\n    user-select: none;\n    border: 1px solid #e0e0e0;\n}\n.block-toggle-option {\n    flex: 1;\n    text-align: center;\n    z-index: 2;\n    font-size: 0.93em;\n    font-weight: 500;\n    color: #888;\n    transition: color 0.2s, font-weight 0.2s;\n    padding: 0 1px;\n    line-height: 26px;\n    border-radius: 6px;\n    position: relative;\n    letter-spacing: 0.01em;\n}\n.block-toggle-option.active {\n    color: #222;\n    font-weight: 700;\n    background: #e0e0e0;\n}\n.block-toggle-slider {\n    position: absolute;\n    top: 1.5px;\n    left: 2px;\n    width: 32px;\n    height: 21px;\n    background: #e0e0e0;\n    border-radius: 5px;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.06);\n    transition: left 0.18s cubic-bezier(.4,2,.6,1), background 0.2s;\n    z-index: 1;\n}\n.block-toggle-slider.right {\n    left: 40px;\n    background: #e0e0e0;\n}\n.toggle-tooltip {\n    position: fixed;\n    background: #222;\n    color: #fff;\n    border-radius: 5px;\n    padding: 4px 12px;\n    font-size: 0.93em;\n    pointer-events: none;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.13);\n    white-space: nowrap;\n    opacity: 0.97;\n    transition: opacity 0.18s;\n}\n\n/* 深色模式适配 */\n[data-theme=\"dark\"] .block-toggle {\n    background: #23272e;\n    border-color: #444c5a;\n    box-shadow: 0 1px 4px rgba(0,0,0,0.18);\n}\n[data-theme=\"dark\"] .block-toggle-option {\n    color: #aaa;\n}\n[data-theme=\"dark\"] .block-toggle-option.active {\n    color: #fff;\n    background: #3a4251;\n}\n[data-theme=\"dark\"] .block-toggle-slider,\n[data-theme=\"dark\"] .block-toggle-slider.right {\n    background: #3a4251;\n}\n[data-theme=\"dark\"] .toggle-tooltip {\n    background: #222b3a;\n    color: #e0e6f0;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.33);\n}\n</style>\n"],"mappings":"AA6BA,SAASA,GAAG,EAAEC,QAAkC,QAAQ,KAAI;AAC5D,SAASC,YAAY,QAAQ,0BAAyB;;;;;;;;;;;;;IAFtD;IAIA,MAAMC,KAAK,GAAGC,OAAA;IAGd,MAAMC,IAAI,GAAGC,MAAA;IAIb,MAAMC,aAAa,GAAGP,GAAG,CAAC;MAAEQ,OAAO,EAAE,KAAK;MAAEC,IAAI,EAAE,EAAE;MAAEC,KAAK,EAAE,CAAC;IAAE,CAAC;IACjE,SAASC,iBAAiBA,CAAEC,KAAK,EAAEC,IAAI,EAAE;MACrCN,aAAa,CAACO,KAAK,CAACL,IAAI,GAAGI,IAAI,KAAK,MAAM,GAAG,kBAAkB,GAAG,eAAc;MAChFN,aAAa,CAACO,KAAK,CAACN,OAAO,GAAG,IAAG;MACjCP,QAAQ,CAAC,MAAM;QACX;QACA,IAAIc,EAAE,GAAGH,KAAK,CAACI,aAAa,IAAIJ,KAAK,CAACK,MAAK;QAC3C,IAAIF,EAAE,IAAIA,EAAE,CAACG,SAAS,IAAI,CAACH,EAAE,CAACG,SAAS,CAACC,QAAQ,CAAC,qBAAqB,CAAC,EAAE;UACrEJ,EAAE,GAAGA,EAAE,CAACK,OAAO,CAAC,sBAAsB;QAC1C;QACA,IAAIL,EAAE,EAAE;UACJ,MAAMM,IAAI,GAAGN,EAAE,CAACO,qBAAqB,CAAC;UACtCf,aAAa,CAACO,KAAK,CAACJ,KAAK,GAAG;YACxBa,IAAI,EAAE,GAAGF,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI;YAC5CC,GAAG,EAAE,GAAGJ,IAAI,CAACK,MAAM,GAAG,CAAC,IAAI;YAC3BC,QAAQ,EAAE,OAAO;YACjBC,MAAM,EAAE,IAAI;YACZC,QAAQ,EAAE,OAAO;YACjBC,SAAS,EAAE;UACf;QACJ;MACJ,CAAC;IACL;IACA,SAASC,iBAAiBA,CAAA,EAAI;MAC1BxB,aAAa,CAACO,KAAK,CAACN,OAAO,GAAG,KAAI;IACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}