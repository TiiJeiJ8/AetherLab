{"ast":null,"code":"import { computed, ref, onMounted, nextTick } from 'vue';\nimport VirtualList from './VirtualList.vue';\n// 虚拟列表高度、宽度自适应内容区，支持自定义\n\nexport default {\n  __name: 'DataPreviewModal',\n  props: {\n    show: Boolean,\n    currentFile: Object,\n    previewData: {\n      type: Array,\n      default: () => []\n    },\n    isSidePreview: {\n      type: Boolean,\n      default: false\n    },\n    virtualListHeight: {\n      type: Number,\n      default: 730\n    }\n  },\n  emits: ['close'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const virtualListHeight = ref(600);\n    const virtualListWidth = ref(0);\n    onMounted(() => {\n      nextTick(() => {\n        const container = document.querySelector('.table-container');\n        if (container) {\n          if (props.virtualListHeight > 0) {\n            virtualListHeight.value = props.virtualListHeight;\n          } else {\n            virtualListHeight.value = container.clientHeight;\n          }\n          virtualListWidth.value = container.clientWidth;\n        }\n      });\n    });\n    const emit = __emit;\n\n    // 表头计算 - 修复数据类型处理逻辑\n    const tableHeaders = computed(() => {\n      if (!props.previewData.length) return [];\n\n      // 获取第一行数据作为表头\n      const firstRow = props.previewData[0];\n      if (Array.isArray(firstRow)) {\n        // 如果是数组格式，直接使用数组元素作为标题\n        return firstRow;\n      } else if (typeof firstRow === 'object' && firstRow !== null) {\n        // 如果是对象格式，使用对象的键名作为标题\n        return Object.keys(firstRow);\n      }\n      return [];\n    });\n\n    // 实际数据行（根据数据类型决定是否排除标题行）\n    const dataRows = computed(() => {\n      if (!props.previewData.length) return [];\n      const firstRow = props.previewData[0];\n      if (Array.isArray(firstRow)) {\n        // 数组格式：第一行是表头，跳过它\n        return props.previewData.slice(1);\n      } else if (typeof firstRow === 'object' && firstRow !== null) {\n        // 对象格式：所有行都是数据行\n        return props.previewData;\n      }\n      return props.previewData;\n    });\n\n    // 获取单元格值的方法\n    function getCellValue(row, header, index) {\n      if (Array.isArray(row)) {\n        return row[index] || '';\n      } else if (typeof row === 'object' && row !== null) {\n        // 对于对象，优先使用表头作为键来获取值\n        return row[header] !== undefined ? row[header] : '';\n      }\n      return row || '';\n    }\n\n    // 格式化文件大小\n    function formatFileSize(bytes) {\n      if (!bytes) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    function onClose() {\n      emit('close');\n    }\n    const __returned__ = {\n      props,\n      virtualListHeight,\n      virtualListWidth,\n      emit,\n      tableHeaders,\n      dataRows,\n      getCellValue,\n      formatFileSize,\n      onClose,\n      computed,\n      ref,\n      onMounted,\n      nextTick,\n      VirtualList\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","onMounted","nextTick","VirtualList","props","__props","virtualListHeight","virtualListWidth","container","document","querySelector","value","clientHeight","clientWidth","emit","__emit","tableHeaders","previewData","length","firstRow","Array","isArray","Object","keys","dataRows","slice","getCellValue","row","header","index","undefined","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","onClose"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Common/DataPreviewModal.vue"],"sourcesContent":["<template>\n<transition name=\"modal-fade\">\n    <div v-if=\"show\"\n        class=\"preview-modal\"\n        @click.self=\"onClose\">\n        <transition name=\"modal-slide\" appear>\n            <div class=\"preview-content\" v-if=\"show\">\n                <!-- 头部 -->\n                <div class=\"preview-header\">\n                    <div class=\"header-info\">\n                        <h3>{{ currentFile?.name || 'Data Preview' }}</h3>\n                        <span class=\"file-info\" v-if=\"currentFile\">\n                            {{ formatFileSize(currentFile.size) }} |\n                            {{ currentFile.rows || 0 }} row × {{ currentFile.columns || 0 }} column (Only first 100 rows shown)\n                        </span>\n                    </div>\n                    <button class=\"close-btn\" @click=\"onClose\">×</button>\n                </div>\n\n                <!-- 数据表格预览 -->\n                <div class=\"preview-table-wrapper\">\n                  <div v-if=\"dataRows.length\" class=\"table-container\" style=\"overflow:auto;\">\n                    <table class=\"preview-table\">\n                      <thead>\n                        <tr>\n                          <th class=\"row-number\">#</th>\n                          <th v-for=\"(header, idx) in tableHeaders\"\n                              :key=\"idx\"\n                              :title=\"String(header).length > 12 ? String(header) : ''\"\n                              class=\"column-header\">{{ String(header) }}</th>\n                        </tr>\n                      </thead>\n                    </table>\n                    <VirtualList\n                      :data=\"dataRows\"\n                      :itemHeight=\"36\"\n                      :height=\"virtualListHeight\"\n                      :width=\"virtualListWidth\"\n                      v-slot=\"{ item: row, index: idx }\"\n                    >\n                      <table class=\"preview-table\" :style=\"`table-layout:fixed;width:${virtualListWidth}px;position:absolute;top:0;left:0;`\">\n                        <tbody>\n                          <tr>\n                            <td class=\"row-number\">{{ idx + 1 }}</td>\n                            <td v-for=\"(header, headerIdx) in tableHeaders\"\n                                :key=\"headerIdx\"\n                                :title=\"getCellValue(row, header, headerIdx)\">\n                              {{ getCellValue(row, header, headerIdx) }}\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </VirtualList>\n                  </div>\n                  <div v-else class=\"empty-tip\">\n                    <div class=\"empty-icon\">📊</div>\n                    <p>No data available...</p>\n                  </div>\n                </div>\n            </div>\n        </transition>\n    </div>\n</transition>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { computed, ref, onMounted, nextTick } from 'vue'\nimport VirtualList from './VirtualList.vue'\n// 虚拟列表高度、宽度自适应内容区，支持自定义\nconst props = defineProps({\n    show: Boolean,\n    currentFile: Object,\n    previewData: {\n        type: Array,\n        default: () => []\n    },\n    isSidePreview: {\n        type: Boolean,\n        default: false\n    },\n    virtualListHeight: {\n        type: Number,\n        default: 730\n    }\n})\nconst virtualListHeight = ref(600)\nconst virtualListWidth = ref(0)\nonMounted(() => {\n    nextTick(() => {\n        const container = document.querySelector('.table-container')\n        if (container) {\n            if (props.virtualListHeight > 0) {\n                virtualListHeight.value = props.virtualListHeight\n            } else {\n                virtualListHeight.value = container.clientHeight\n            }\n            virtualListWidth.value = container.clientWidth\n        }\n    })\n})\n\nconst emit = defineEmits(['close'])\n\n// 表头计算 - 修复数据类型处理逻辑\nconst tableHeaders = computed(() => {\n    if (!props.previewData.length) return []\n    \n    // 获取第一行数据作为表头\n    const firstRow = props.previewData[0]\n    if (Array.isArray(firstRow)) {\n        // 如果是数组格式，直接使用数组元素作为标题\n        return firstRow\n    } else if (typeof firstRow === 'object' && firstRow !== null) {\n        // 如果是对象格式，使用对象的键名作为标题\n        return Object.keys(firstRow)\n    }\n    return []\n})\n\n// 实际数据行（根据数据类型决定是否排除标题行）\nconst dataRows = computed(() => {\n    if (!props.previewData.length) return []\n    \n    const firstRow = props.previewData[0]\n    if (Array.isArray(firstRow)) {\n        // 数组格式：第一行是表头，跳过它\n        return props.previewData.slice(1)\n    } else if (typeof firstRow === 'object' && firstRow !== null) {\n        // 对象格式：所有行都是数据行\n        return props.previewData\n    }\n    return props.previewData\n})\n\n// 获取单元格值的方法\nfunction getCellValue(row, header, index) {\n    if (Array.isArray(row)) {\n        return row[index] || ''\n    } else if (typeof row === 'object' && row !== null) {\n        // 对于对象，优先使用表头作为键来获取值\n        return row[header] !== undefined ? row[header] : ''\n    }\n    return row || ''\n}\n\n// 格式化文件大小\nfunction formatFileSize(bytes) {\n    if (!bytes) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\nfunction onClose() {\n    emit('close')\n}\n</script>\n\n<style scoped>\n@import '../../assets/CSS/DataPreviewModal.css';\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}