{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\n/* eslint-disable */\n/**\n * 文件缓存管理服务\n * 使用 localStorage + IndexedDB 双重缓存机制\n */\n\nimport * as XLSX from 'xlsx';\nclass FileCacheService {\n  constructor() {\n    this.dbName = 'FileCache';\n    this.storeName = 'files';\n    this.maxCacheSize = 100 * 1024 * 1024; // 100MB 限制\n    this.db = null;\n    this.initDB();\n  }\n\n  // 初始化 IndexedDB\n  async initDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 1);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, {\n            keyPath: 'id'\n          });\n          store.createIndex('name', 'name', {\n            unique: false\n          });\n          store.createIndex('status', 'status', {\n            unique: false\n          });\n        }\n      };\n    });\n  }\n\n  // 生成唯一文件ID\n  generateFileId() {\n    return `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // 计算文件大小\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // 保存文件到缓存\n  async saveFile(file, options = {}) {\n    try {\n      await this.initDB();\n      const fileId = this.generateFileId();\n      const fileBuffer = await file.arrayBuffer();\n      const fileData = {\n        id: fileId,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        lastModified: file.lastModified,\n        buffer: fileBuffer,\n        status: 'local',\n        createdAt: new Date().toISOString(),\n        metadata: {\n          ...options,\n          originalName: file.name,\n          extension: file.name.split('.').pop().toLowerCase()\n        }\n      };\n\n      // 检查缓存大小限制\n      const currentSize = await this.getCacheSize();\n      if (currentSize + file.size > this.maxCacheSize) {\n        throw new Error('Cache size limit exceeded');\n      }\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.add(fileData);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => {\n          this.updateLocalStorage();\n          resolve(fileData);\n        };\n      });\n    } catch (error) {\n      console.error('保存文件失败:', error);\n      throw error;\n    }\n  }\n\n  // 获取所有缓存文件\n  async getAllFiles() {\n    try {\n      await this.initDB();\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.getAll();\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve(request.result);\n      });\n    } catch (error) {\n      console.error('获取文件列表失败:', error);\n      return [];\n    }\n  }\n\n  // 获取单个文件\n  async getFile(fileId) {\n    try {\n      await this.initDB();\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction([this.storeName], 'readonly');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.get(fileId);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => resolve(request.result);\n      });\n    } catch (error) {\n      console.error('获取文件失败:', error);\n      throw error;\n    }\n  }\n\n  // 删除文件\n  async deleteFile(fileId) {\n    try {\n      await this.initDB();\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.delete(fileId);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => {\n          this.updateLocalStorage();\n          resolve(true);\n        };\n      });\n    } catch (error) {\n      console.error('删除文件失败:', error);\n      throw error;\n    }\n  }\n\n  // 更新文件状态\n  async updateFileStatus(fileId, status, metadata = {}) {\n    try {\n      await this.initDB();\n      const file = await this.getFile(fileId);\n      if (file) {\n        file.status = status;\n        file.metadata = {\n          ...file.metadata,\n          ...metadata\n        };\n        file.updatedAt = new Date().toISOString();\n        return new Promise((resolve, reject) => {\n          const transaction = this.db.transaction([this.storeName], 'readwrite');\n          const store = transaction.objectStore(this.storeName);\n          const request = store.put(file);\n          request.onerror = () => reject(request.error);\n          request.onsuccess = () => {\n            this.updateLocalStorage();\n            resolve(file);\n          };\n        });\n      }\n    } catch (error) {\n      console.error('更新文件状态失败:', error);\n      throw error;\n    }\n  }\n\n  // 重命名文件\n  async renameFile(fileId, newName) {\n    try {\n      await this.initDB();\n      const file = await this.getFile(fileId);\n      if (file) {\n        file.name = newName;\n        file.metadata.originalName = newName;\n        file.updatedAt = new Date().toISOString();\n        return new Promise((resolve, reject) => {\n          const transaction = this.db.transaction([this.storeName], 'readwrite');\n          const store = transaction.objectStore(this.storeName);\n          const request = store.put(file);\n          request.onerror = () => reject(request.error);\n          request.onsuccess = () => {\n            this.updateLocalStorage();\n            resolve(file);\n          };\n        });\n      }\n    } catch (error) {\n      console.error('重命名文件失败:', error);\n      throw error;\n    }\n  }\n\n  // 解析文件数据（CSV/Excel）\n  async parseFileData(fileId, maxRows = 200) {\n    try {\n      const file = await this.getFile(fileId);\n      if (!file) throw new Error('文件不存在');\n      const extension = file.metadata.extension;\n      let data = [];\n      if (extension === 'csv') {\n        data = await this.parseCSV(file.buffer, maxRows);\n      } else if (['xlsx', 'xls'].includes(extension)) {\n        data = await this.parseExcel(file.buffer, maxRows);\n      } else {\n        throw new Error('不支持的文件格式');\n      }\n      return {\n        data,\n        totalRows: data.length,\n        headers: data.length > 0 ? Object.keys(data[0]) : [],\n        fileInfo: {\n          name: file.name,\n          size: this.formatFileSize(file.size),\n          type: file.type,\n          extension: extension,\n          createdAt: file.createdAt\n        }\n      };\n    } catch (error) {\n      console.error('解析文件数据失败:', error);\n      throw error;\n    }\n  }\n\n  // 解析 CSV 文件\n  async parseCSV(buffer, maxRows) {\n    return new Promise((resolve, reject) => {\n      try {\n        const text = new TextDecoder('utf-8').decode(buffer);\n        const lines = text.split('\\n').filter(line => line.trim());\n        if (lines.length === 0) {\n          resolve([]);\n          return;\n        }\n        const headers = this.parseCSVLine(lines[0]);\n        const data = [];\n        for (let i = 1; i < Math.min(lines.length, maxRows + 1); i++) {\n          const values = this.parseCSVLine(lines[i]);\n          if (values.length > 0) {\n            const row = {};\n            headers.forEach((header, index) => {\n              row[header] = values[index] || '';\n            });\n            data.push(row);\n          }\n        }\n        resolve(data);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // 解析 CSV 行（处理引号和逗号）\n  parseCSVLine(line) {\n    const result = [];\n    let current = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    result.push(current.trim());\n    return result;\n  }\n\n  // 解析 Excel 文件\n  async parseExcel(buffer, maxRows) {\n    return new Promise((resolve, reject) => {\n      try {\n        const workbook = XLSX.read(buffer, {\n          type: 'buffer'\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1,\n          range: maxRows ? `A1:ZZ${maxRows + 1}` : undefined\n        });\n        if (jsonData.length === 0) {\n          resolve([]);\n          return;\n        }\n        const headers = jsonData[0];\n        const data = [];\n        for (let i = 1; i < jsonData.length; i++) {\n          const row = {};\n          headers.forEach((header, index) => {\n            row[header] = jsonData[i][index] || '';\n          });\n          data.push(row);\n        }\n        resolve(data);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // 获取缓存统计信息\n  async getCacheStats() {\n    try {\n      const files = await this.getAllFiles();\n      const totalSize = files.reduce((sum, file) => sum + file.size, 0);\n      const statusCounts = files.reduce((counts, file) => {\n        counts[file.status] = (counts[file.status] || 0) + 1;\n        return counts;\n      }, {});\n      return {\n        totalFiles: files.length,\n        totalSize: totalSize,\n        formattedSize: this.formatFileSize(totalSize),\n        maxSize: this.maxCacheSize,\n        formattedMaxSize: this.formatFileSize(this.maxCacheSize),\n        usagePercent: Math.round(totalSize / this.maxCacheSize * 100),\n        statusCounts\n      };\n    } catch (error) {\n      console.error('获取缓存统计失败:', error);\n      return {\n        totalFiles: 0,\n        totalSize: 0,\n        formattedSize: '0 Bytes',\n        maxSize: this.maxCacheSize,\n        formattedMaxSize: this.formatFileSize(this.maxCacheSize),\n        usagePercent: 0,\n        statusCounts: {}\n      };\n    }\n  }\n\n  // 获取缓存大小\n  async getCacheSize() {\n    try {\n      const files = await this.getAllFiles();\n      return files.reduce((sum, file) => sum + file.size, 0);\n    } catch (error) {\n      console.error('获取缓存大小失败:', error);\n      return 0;\n    }\n  }\n\n  // 清理缓存\n  async clearCache() {\n    try {\n      await this.initDB();\n      return new Promise((resolve, reject) => {\n        const transaction = this.db.transaction([this.storeName], 'readwrite');\n        const store = transaction.objectStore(this.storeName);\n        const request = store.clear();\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => {\n          this.updateLocalStorage();\n          resolve(true);\n        };\n      });\n    } catch (error) {\n      console.error('清理缓存失败:', error);\n      throw error;\n    }\n  }\n\n  // 更新 localStorage 统计信息\n  async updateLocalStorage() {\n    try {\n      const stats = await this.getCacheStats();\n      localStorage.setItem('fileCacheStats', JSON.stringify(stats));\n    } catch (error) {\n      console.error('更新localStorage失败:', error);\n    }\n  }\n\n  // 从 localStorage 获取统计信息\n  getCachedStats() {\n    try {\n      const stats = localStorage.getItem('fileCacheStats');\n      return stats ? JSON.parse(stats) : null;\n    } catch (error) {\n      console.error('获取缓存统计失败:', error);\n      return null;\n    }\n  }\n}\n\n// 创建单例实例\nconst fileCacheService = new FileCacheService();\nexport default fileCacheService;","map":{"version":3,"names":["XLSX","FileCacheService","constructor","dbName","storeName","maxCacheSize","db","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","store","createObjectStore","keyPath","createIndex","unique","generateFileId","Date","now","Math","random","toString","substr","formatFileSize","bytes","k","sizes","i","floor","log","parseFloat","pow","toFixed","saveFile","file","options","fileId","fileBuffer","arrayBuffer","fileData","id","name","size","type","lastModified","buffer","status","createdAt","toISOString","metadata","originalName","extension","split","pop","toLowerCase","currentSize","getCacheSize","Error","transaction","objectStore","add","updateLocalStorage","console","getAllFiles","getAll","getFile","get","deleteFile","delete","updateFileStatus","updatedAt","put","renameFile","newName","parseFileData","maxRows","data","parseCSV","includes","parseExcel","totalRows","length","headers","Object","keys","fileInfo","text","TextDecoder","decode","lines","filter","line","trim","parseCSVLine","min","values","row","forEach","header","index","push","current","inQuotes","char","workbook","read","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","range","undefined","getCacheStats","files","totalSize","reduce","sum","statusCounts","counts","totalFiles","formattedSize","maxSize","formattedMaxSize","usagePercent","round","clearCache","clear","stats","localStorage","setItem","JSON","stringify","getCachedStats","getItem","parse","fileCacheService"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileCacheService.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件缓存管理服务\n * 使用 localStorage + IndexedDB 双重缓存机制\n */\n\nimport * as XLSX from 'xlsx'\n\nclass FileCacheService {\n    constructor() {\n        this.dbName = 'FileCache'\n        this.storeName = 'files'\n        this.maxCacheSize = 100 * 1024 * 1024 // 100MB 限制\n        this.db = null\n        this.initDB()\n    }\n\n    // 初始化 IndexedDB\n    async initDB() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, 1)\n            \n            request.onerror = () => reject(request.error)\n            request.onsuccess = () => {\n                this.db = request.result\n                resolve(this.db)\n            }\n            \n            request.onupgradeneeded = (event) => {\n                const db = event.target.result\n                if (!db.objectStoreNames.contains(this.storeName)) {\n                    const store = db.createObjectStore(this.storeName, { keyPath: 'id' })\n                    store.createIndex('name', 'name', { unique: false })\n                    store.createIndex('status', 'status', { unique: false })\n                }\n            }\n        })\n    }\n\n    // 生成唯一文件ID\n    generateFileId() {\n        return `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    }\n\n    // 计算文件大小\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes'\n        const k = 1024\n        const sizes = ['Bytes', 'KB', 'MB', 'GB']\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n    }\n\n    // 保存文件到缓存\n    async saveFile(file, options = {}) {\n        try {\n            await this.initDB()\n            \n            const fileId = this.generateFileId()\n            const fileBuffer = await file.arrayBuffer()\n            \n            const fileData = {\n                id: fileId,\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified,\n                buffer: fileBuffer,\n                status: 'local',\n                createdAt: new Date().toISOString(),\n                metadata: {\n                    ...options,\n                    originalName: file.name,\n                    extension: file.name.split('.').pop().toLowerCase()\n                }\n            }\n\n            // 检查缓存大小限制\n            const currentSize = await this.getCacheSize()\n            if (currentSize + file.size > this.maxCacheSize) {\n                throw new Error('Cache size limit exceeded')\n            }\n\n            return new Promise((resolve, reject) => {\n                const transaction = this.db.transaction([this.storeName], 'readwrite')\n                const store = transaction.objectStore(this.storeName)\n                const request = store.add(fileData)\n                \n                request.onerror = () => reject(request.error)\n                request.onsuccess = () => {\n                    this.updateLocalStorage()\n                    resolve(fileData)\n                }\n            })\n        } catch (error) {\n            console.error('保存文件失败:', error)\n            throw error\n        }\n    }\n\n    // 获取所有缓存文件\n    async getAllFiles() {\n        try {\n            await this.initDB()\n            \n            return new Promise((resolve, reject) => {\n                const transaction = this.db.transaction([this.storeName], 'readonly')\n                const store = transaction.objectStore(this.storeName)\n                const request = store.getAll()\n                \n                request.onerror = () => reject(request.error)\n                request.onsuccess = () => resolve(request.result)\n            })\n        } catch (error) {\n            console.error('获取文件列表失败:', error)\n            return []\n        }\n    }\n\n    // 获取单个文件\n    async getFile(fileId) {\n        try {\n            await this.initDB()\n            \n            return new Promise((resolve, reject) => {\n                const transaction = this.db.transaction([this.storeName], 'readonly')\n                const store = transaction.objectStore(this.storeName)\n                const request = store.get(fileId)\n                \n                request.onerror = () => reject(request.error)\n                request.onsuccess = () => resolve(request.result)\n            })\n        } catch (error) {\n            console.error('获取文件失败:', error)\n            throw error\n        }\n    }\n\n    // 删除文件\n    async deleteFile(fileId) {\n        try {\n            await this.initDB()\n            \n            return new Promise((resolve, reject) => {\n                const transaction = this.db.transaction([this.storeName], 'readwrite')\n                const store = transaction.objectStore(this.storeName)\n                const request = store.delete(fileId)\n                \n                request.onerror = () => reject(request.error)\n                request.onsuccess = () => {\n                    this.updateLocalStorage()\n                    resolve(true)\n                }\n            })\n        } catch (error) {\n            console.error('删除文件失败:', error)\n            throw error\n        }\n    }\n\n    // 更新文件状态\n    async updateFileStatus(fileId, status, metadata = {}) {\n        try {\n            await this.initDB()\n            \n            const file = await this.getFile(fileId)\n            if (file) {\n                file.status = status\n                file.metadata = { ...file.metadata, ...metadata }\n                file.updatedAt = new Date().toISOString()\n                \n                return new Promise((resolve, reject) => {\n                    const transaction = this.db.transaction([this.storeName], 'readwrite')\n                    const store = transaction.objectStore(this.storeName)\n                    const request = store.put(file)\n                    \n                    request.onerror = () => reject(request.error)\n                    request.onsuccess = () => {\n                        this.updateLocalStorage()\n                        resolve(file)\n                    }\n                })\n            }\n        } catch (error) {\n            console.error('更新文件状态失败:', error)\n            throw error\n        }\n    }\n\n    // 重命名文件\n    async renameFile(fileId, newName) {\n        try {\n            await this.initDB()\n            \n            const file = await this.getFile(fileId)\n            if (file) {\n                file.name = newName\n                file.metadata.originalName = newName\n                file.updatedAt = new Date().toISOString()\n                \n                return new Promise((resolve, reject) => {\n                    const transaction = this.db.transaction([this.storeName], 'readwrite')\n                    const store = transaction.objectStore(this.storeName)\n                    const request = store.put(file)\n                    \n                    request.onerror = () => reject(request.error)\n                    request.onsuccess = () => {\n                        this.updateLocalStorage()\n                        resolve(file)\n                    }\n                })\n            }\n        } catch (error) {\n            console.error('重命名文件失败:', error)\n            throw error\n        }\n    }\n\n    // 解析文件数据（CSV/Excel）\n    async parseFileData(fileId, maxRows = 200) {\n        try {\n            const file = await this.getFile(fileId)\n            if (!file) throw new Error('文件不存在')\n            \n            const extension = file.metadata.extension\n            let data = []\n            \n            if (extension === 'csv') {\n                data = await this.parseCSV(file.buffer, maxRows)\n            } else if (['xlsx', 'xls'].includes(extension)) {\n                data = await this.parseExcel(file.buffer, maxRows)\n            } else {\n                throw new Error('不支持的文件格式')\n            }\n            \n            return {\n                data,\n                totalRows: data.length,\n                headers: data.length > 0 ? Object.keys(data[0]) : [],\n                fileInfo: {\n                    name: file.name,\n                    size: this.formatFileSize(file.size),\n                    type: file.type,\n                    extension: extension,\n                    createdAt: file.createdAt\n                }\n            }\n        } catch (error) {\n            console.error('解析文件数据失败:', error)\n            throw error\n        }\n    }\n\n    // 解析 CSV 文件\n    async parseCSV(buffer, maxRows) {\n        return new Promise((resolve, reject) => {\n            try {\n                const text = new TextDecoder('utf-8').decode(buffer)\n                const lines = text.split('\\n').filter(line => line.trim())\n                \n                if (lines.length === 0) {\n                    resolve([])\n                    return\n                }\n                \n                const headers = this.parseCSVLine(lines[0])\n                const data = []\n                \n                for (let i = 1; i < Math.min(lines.length, maxRows + 1); i++) {\n                    const values = this.parseCSVLine(lines[i])\n                    if (values.length > 0) {\n                        const row = {}\n                        headers.forEach((header, index) => {\n                            row[header] = values[index] || ''\n                        })\n                        data.push(row)\n                    }\n                }\n                \n                resolve(data)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }\n\n    // 解析 CSV 行（处理引号和逗号）\n    parseCSVLine(line) {\n        const result = []\n        let current = ''\n        let inQuotes = false\n        \n        for (let i = 0; i < line.length; i++) {\n            const char = line[i]\n            \n            if (char === '\"') {\n                inQuotes = !inQuotes\n            } else if (char === ',' && !inQuotes) {\n                result.push(current.trim())\n                current = ''\n            } else {\n                current += char\n            }\n        }\n        \n        result.push(current.trim())\n        return result\n    }\n\n    // 解析 Excel 文件\n    async parseExcel(buffer, maxRows) {\n        return new Promise((resolve, reject) => {\n            try {\n                const workbook = XLSX.read(buffer, { type: 'buffer' })\n                const firstSheetName = workbook.SheetNames[0]\n                const worksheet = workbook.Sheets[firstSheetName]\n                \n                const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                    header: 1,\n                    range: maxRows ? `A1:ZZ${maxRows + 1}` : undefined\n                })\n                \n                if (jsonData.length === 0) {\n                    resolve([])\n                    return\n                }\n                \n                const headers = jsonData[0]\n                const data = []\n                \n                for (let i = 1; i < jsonData.length; i++) {\n                    const row = {}\n                    headers.forEach((header, index) => {\n                        row[header] = jsonData[i][index] || ''\n                    })\n                    data.push(row)\n                }\n                \n                resolve(data)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }\n\n    // 获取缓存统计信息\n    async getCacheStats() {\n        try {\n            const files = await this.getAllFiles()\n            const totalSize = files.reduce((sum, file) => sum + file.size, 0)\n            const statusCounts = files.reduce((counts, file) => {\n                counts[file.status] = (counts[file.status] || 0) + 1\n                return counts\n            }, {})\n            \n            return {\n                totalFiles: files.length,\n                totalSize: totalSize,\n                formattedSize: this.formatFileSize(totalSize),\n                maxSize: this.maxCacheSize,\n                formattedMaxSize: this.formatFileSize(this.maxCacheSize),\n                usagePercent: Math.round((totalSize / this.maxCacheSize) * 100),\n                statusCounts\n            }\n        } catch (error) {\n            console.error('获取缓存统计失败:', error)\n            return {\n                totalFiles: 0,\n                totalSize: 0,\n                formattedSize: '0 Bytes',\n                maxSize: this.maxCacheSize,\n                formattedMaxSize: this.formatFileSize(this.maxCacheSize),\n                usagePercent: 0,\n                statusCounts: {}\n            }\n        }\n    }\n\n    // 获取缓存大小\n    async getCacheSize() {\n        try {\n            const files = await this.getAllFiles()\n            return files.reduce((sum, file) => sum + file.size, 0)\n        } catch (error) {\n            console.error('获取缓存大小失败:', error)\n            return 0\n        }\n    }\n\n    // 清理缓存\n    async clearCache() {\n        try {\n            await this.initDB()\n            \n            return new Promise((resolve, reject) => {\n                const transaction = this.db.transaction([this.storeName], 'readwrite')\n                const store = transaction.objectStore(this.storeName)\n                const request = store.clear()\n                \n                request.onerror = () => reject(request.error)\n                request.onsuccess = () => {\n                    this.updateLocalStorage()\n                    resolve(true)\n                }\n            })\n        } catch (error) {\n            console.error('清理缓存失败:', error)\n            throw error\n        }\n    }\n\n    // 更新 localStorage 统计信息\n    async updateLocalStorage() {\n        try {\n            const stats = await this.getCacheStats()\n            localStorage.setItem('fileCacheStats', JSON.stringify(stats))\n        } catch (error) {\n            console.error('更新localStorage失败:', error)\n        }\n    }\n\n    // 从 localStorage 获取统计信息\n    getCachedStats() {\n        try {\n            const stats = localStorage.getItem('fileCacheStats')\n            return stats ? JSON.parse(stats) : null\n        } catch (error) {\n            console.error('获取缓存统计失败:', error)\n            return null\n        }\n    }\n}\n\n// 创建单例实例\nconst fileCacheService = new FileCacheService()\n\nexport default fileCacheService\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}