{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// 列类型推断、统计等工具函数，便于复用和单元测试\n\n/**\n * 推断数据类型\n * @param {Array} columnData\n * @returns {string}\n */\nexport function inferDataType(columnData) {\n  if (!Array.isArray(columnData) || columnData.length === 0) return 'unknown';\n  const sample = columnData.slice(0, Math.min(20, columnData.length));\n  const uniqueValues = [...new Set(sample)];\n  const uniqueCount = uniqueValues.length;\n  // 检查布尔\n  const isTrueFalseBool = sample.every(val => {\n    const str = String(val).toLowerCase();\n    return str === 'true' || str === 'false' || val === true || val === false;\n  });\n  if (isTrueFalseBool && uniqueCount <= 2) return 'boolean';\n  // 检查数字\n  const isNumeric = sample.every(val => !isNaN(val) && !isNaN(parseFloat(val)));\n  if (isNumeric) {\n    const isInteger = sample.every(val => Number.isInteger(parseFloat(val)));\n    if (isInteger) {\n      if (uniqueCount === 2 && uniqueValues.every(val => val === 0 || val === 1 || val === '0' || val === '1')) {\n        return 'boolean';\n      } else if (uniqueCount <= 10 && uniqueCount < sample.length * 0.5) {\n        return 'category';\n      } else {\n        return 'integer';\n      }\n    } else {\n      return 'number';\n    }\n  }\n  // 检查日期\n  const isDate = sample.some(val => !isNaN(Date.parse(val)));\n  if (isDate) return 'date';\n  // 类别值\n  if (uniqueCount <= 10 && uniqueCount < sample.length * 0.5) return 'category';\n  return 'string';\n}\n\n/**\n * 计算列统计信息\n * @param {Array} columnData\n * @param {number} totalRows\n * @returns {Object}\n */\nexport function calculateColumnStats(columnData, totalRows) {\n  const nonEmptyCount = columnData.length;\n  const nullCount = totalRows - nonEmptyCount;\n  const uniqueCount = new Set(columnData).size;\n  return {\n    nullCount,\n    uniqueCount,\n    fillRate: Math.round(nonEmptyCount / totalRows * 100)\n  };\n}\n\n/**\n * 获取列类型样式类\n * @param {string} type\n * @returns {string}\n */\nexport function getColumnTypeClass(type) {\n  const typeClasses = {\n    'string': 'type-string',\n    'number': 'type-number',\n    'integer': 'type-integer',\n    'date': 'type-date',\n    'boolean': 'type-boolean',\n    'category': 'type-category',\n    'unknown': 'type-unknown'\n  };\n  return typeClasses[type] || 'type-unknown';\n}","map":{"version":3,"names":["inferDataType","columnData","Array","isArray","length","sample","slice","Math","min","uniqueValues","Set","uniqueCount","isTrueFalseBool","every","val","str","String","toLowerCase","isNumeric","isNaN","parseFloat","isInteger","Number","isDate","some","Date","parse","calculateColumnStats","totalRows","nonEmptyCount","nullCount","size","fillRate","round","getColumnTypeClass","type","typeClasses"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/utils/columnAnalyzeUtils.js"],"sourcesContent":["// 列类型推断、统计等工具函数，便于复用和单元测试\n\n/**\n * 推断数据类型\n * @param {Array} columnData\n * @returns {string}\n */\nexport function inferDataType(columnData) {\n  if (!Array.isArray(columnData) || columnData.length === 0) return 'unknown';\n  const sample = columnData.slice(0, Math.min(20, columnData.length));\n  const uniqueValues = [...new Set(sample)];\n  const uniqueCount = uniqueValues.length;\n  // 检查布尔\n  const isTrueFalseBool = sample.every(val => {\n    const str = String(val).toLowerCase();\n    return str === 'true' || str === 'false' || val === true || val === false;\n  });\n  if (isTrueFalseBool && uniqueCount <= 2) return 'boolean';\n  // 检查数字\n  const isNumeric = sample.every(val => !isNaN(val) && !isNaN(parseFloat(val)));\n  if (isNumeric) {\n    const isInteger = sample.every(val => Number.isInteger(parseFloat(val)));\n    if (isInteger) {\n      if (uniqueCount === 2 && uniqueValues.every(val => val === 0 || val === 1 || val === '0' || val === '1')) {\n        return 'boolean';\n      } else if (uniqueCount <= 10 && uniqueCount < sample.length * 0.5) {\n        return 'category';\n      } else {\n        return 'integer';\n      }\n    } else {\n      return 'number';\n    }\n  }\n  // 检查日期\n  const isDate = sample.some(val => !isNaN(Date.parse(val)));\n  if (isDate) return 'date';\n  // 类别值\n  if (uniqueCount <= 10 && uniqueCount < sample.length * 0.5) return 'category';\n  return 'string';\n}\n\n/**\n * 计算列统计信息\n * @param {Array} columnData\n * @param {number} totalRows\n * @returns {Object}\n */\nexport function calculateColumnStats(columnData, totalRows) {\n  const nonEmptyCount = columnData.length;\n  const nullCount = totalRows - nonEmptyCount;\n  const uniqueCount = new Set(columnData).size;\n  return {\n    nullCount,\n    uniqueCount,\n    fillRate: Math.round((nonEmptyCount / totalRows) * 100)\n  };\n}\n\n/**\n * 获取列类型样式类\n * @param {string} type\n * @returns {string}\n */\nexport function getColumnTypeClass(type) {\n  const typeClasses = {\n    'string': 'type-string',\n    'number': 'type-number',\n    'integer': 'type-integer',\n    'date': 'type-date',\n    'boolean': 'type-boolean',\n    'category': 'type-category',\n    'unknown': 'type-unknown'\n  };\n  return typeClasses[type] || 'type-unknown';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}