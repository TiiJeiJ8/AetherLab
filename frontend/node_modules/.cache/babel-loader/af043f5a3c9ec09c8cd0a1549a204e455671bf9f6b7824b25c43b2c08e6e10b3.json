{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * 图表配置的主入口文件\n * 整合所有配置模块，提供统一的配置接口\n */\n\nimport { CHART_TYPES, CHART_CATEGORIES, getChartMetadata } from './chartTypes.js';\nimport { DATA_TYPES, FIELD_ROLES, inferDataType } from './dataTypes.js';\nimport { getFieldMapping, validateFieldMapping, validateRequiredFields, getFieldSuggestions } from './fieldMappings.js';\nimport { getChartConfigOptions, getChartConfigByCategory, getDefaultConfig, validateConfigValue, checkCondition } from './configOptions.js';\n\n// 重新导出所有类型和常量\nexport { CHART_TYPES, CHART_CATEGORIES, DATA_TYPES, FIELD_ROLES };\n\n// 完整的图表配置类\nexport class ChartConfig {\n  constructor(chartType) {\n    this.chartType = chartType;\n    this.metadata = getChartMetadata(chartType);\n    this.fieldMapping = getFieldMapping(chartType);\n    this.configOptions = getChartConfigOptions(chartType);\n    this.defaultConfig = getDefaultConfig(chartType);\n  }\n\n  // 获取图表元数据\n  getMetadata() {\n    return this.metadata;\n  }\n\n  // 获取字段映射配置\n  getFieldMapping() {\n    return this.fieldMapping;\n  }\n\n  // 获取配置选项\n  getConfigOptions() {\n    return this.configOptions;\n  }\n\n  // 获取按分类组织的配置选项\n  getConfigByCategory() {\n    return getChartConfigByCategory(this.chartType);\n  }\n\n  // 获取默认配置\n  getDefaultConfig() {\n    return this.defaultConfig;\n  }\n\n  // 验证字段映射\n  validateFieldMapping(fieldName, dataType) {\n    return validateFieldMapping(this.chartType, fieldName, dataType);\n  }\n\n  // 验证必需字段\n  validateRequiredFields(fieldMappings) {\n    return validateRequiredFields(this.chartType, fieldMappings);\n  }\n\n  // 获取字段建议\n  getFieldSuggestions(availableColumns) {\n    return getFieldSuggestions(this.chartType, availableColumns);\n  }\n\n  // 验证配置值\n  validateConfig(config) {\n    const errors = [];\n    Object.entries(config).forEach(([key, value]) => {\n      const configDef = this.configOptions[key];\n      if (configDef) {\n        // 检查条件依赖\n        if (!checkCondition(configDef.condition, config)) {\n          return;\n        }\n        const fieldErrors = validateConfigValue(key, value, configDef);\n        errors.push(...fieldErrors);\n      }\n    });\n    return errors;\n  }\n\n  // 构建完整的图表配置\n  buildFullConfig(fieldMappings, customConfig = {}) {\n    const fullConfig = {\n      chartType: this.chartType,\n      metadata: this.metadata,\n      fieldMappings: fieldMappings,\n      options: {\n        ...this.defaultConfig,\n        ...customConfig\n      }\n    };\n\n    // 验证配置\n    const fieldValidation = this.validateRequiredFields(fieldMappings);\n    const configValidation = this.validateConfig(fullConfig.options);\n    fullConfig.validation = {\n      fieldMapping: fieldValidation,\n      config: configValidation,\n      isValid: fieldValidation.valid && configValidation.length === 0\n    };\n    return fullConfig;\n  }\n}\n\n// 便利函数：获取图表配置实例\nexport function getChartConfig(chartType) {\n  return new ChartConfig(chartType);\n}\n\n// 便利函数：获取所有支持的图表类型\nexport function getAllChartTypes() {\n  return Object.values(CHART_TYPES);\n}\n\n// 便利函数：根据分类获取图表类型\nexport function getChartsByCategory(category) {\n  return Object.entries(CHART_TYPES).filter(([_, type]) => {\n    const metadata = getChartMetadata(type);\n    return metadata.category === category;\n  }).map(([_, type]) => type);\n}\n\n// 便利函数：智能推荐图表类型\nexport function recommendChartType(columns) {\n  const recommendations = [];\n\n  // 分析数据列的类型分布\n  const columnTypes = columns.map(col => ({\n    name: col.name,\n    dataType: inferDataType(col.values || [])\n  }));\n  const numericColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.NUMERIC);\n  const categoryColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.CATEGORY);\n  const temporalColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.TEMPORAL);\n\n  // 基于数据特征推荐图表类型\n  if (temporalColumns.length > 0 && numericColumns.length > 0) {\n    recommendations.push({\n      type: CHART_TYPES.LINE,\n      confidence: 0.9,\n      reason: '包含时间序列数据，适合显示趋势'\n    });\n  }\n  if (categoryColumns.length > 0 && numericColumns.length > 0) {\n    recommendations.push({\n      type: CHART_TYPES.BAR,\n      confidence: 0.8,\n      reason: '包含分类和数值数据，适合比较分析'\n    });\n  }\n  if (categoryColumns.length === 1 && numericColumns.length === 1) {\n    recommendations.push({\n      type: CHART_TYPES.PIE,\n      confidence: 0.7,\n      reason: '单一分类和数值，适合显示占比'\n    });\n  }\n  if (numericColumns.length >= 2) {\n    recommendations.push({\n      type: CHART_TYPES.SCATTER,\n      confidence: 0.6,\n      reason: '多个数值字段，适合相关性分析'\n    });\n  }\n\n  // 排序推荐结果\n  recommendations.sort((a, b) => b.confidence - a.confidence);\n  return recommendations;\n}\n\n// 数据处理相关函数\nexport function processChartData(data, fieldMappings, chartType) {\n  // 根据字段映射转换数据\n  const processedData = data.map(row => {\n    const processedRow = {};\n    Object.entries(fieldMappings).forEach(([fieldName, mapping]) => {\n      if (mapping && mapping.field) {\n        processedRow[fieldName] = row[mapping.field];\n      }\n    });\n    return processedRow;\n  });\n  return processedData;\n}\n\n// 配置验证函数\nexport function validateChartConfiguration(chartType, fieldMappings, config) {\n  const chartConfig = getChartConfig(chartType);\n\n  // 验证字段映射\n  const fieldValidation = chartConfig.validateRequiredFields(fieldMappings);\n\n  // 验证配置选项\n  const configValidation = chartConfig.validateConfig(config);\n  return {\n    fieldMapping: fieldValidation,\n    config: configValidation,\n    isValid: fieldValidation.valid && configValidation.length === 0,\n    errors: [...(fieldValidation.missingFields || []), ...configValidation]\n  };\n}","map":{"version":3,"names":["CHART_TYPES","CHART_CATEGORIES","getChartMetadata","DATA_TYPES","FIELD_ROLES","inferDataType","getFieldMapping","validateFieldMapping","validateRequiredFields","getFieldSuggestions","getChartConfigOptions","getChartConfigByCategory","getDefaultConfig","validateConfigValue","checkCondition","ChartConfig","constructor","chartType","metadata","fieldMapping","configOptions","defaultConfig","getMetadata","getConfigOptions","getConfigByCategory","fieldName","dataType","fieldMappings","availableColumns","validateConfig","config","errors","Object","entries","forEach","key","value","configDef","condition","fieldErrors","push","buildFullConfig","customConfig","fullConfig","options","fieldValidation","configValidation","validation","isValid","valid","length","getChartConfig","getAllChartTypes","values","getChartsByCategory","category","filter","_","type","map","recommendChartType","columns","recommendations","columnTypes","col","name","numericColumns","NUMERIC","categoryColumns","CATEGORY","temporalColumns","TEMPORAL","LINE","confidence","reason","BAR","PIE","SCATTER","sort","a","b","processChartData","data","processedData","row","processedRow","mapping","field","validateChartConfiguration","chartConfig","missingFields"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/configs/chartConfigs.js"],"sourcesContent":["/**\n * 图表配置的主入口文件\n * 整合所有配置模块，提供统一的配置接口\n */\n\nimport { CHART_TYPES, CHART_CATEGORIES, getChartMetadata } from './chartTypes.js'\nimport { DATA_TYPES, FIELD_ROLES, inferDataType } from './dataTypes.js'\nimport { getFieldMapping, validateFieldMapping, validateRequiredFields, getFieldSuggestions } from './fieldMappings.js'\nimport { getChartConfigOptions, getChartConfigByCategory, getDefaultConfig, validateConfigValue, checkCondition } from './configOptions.js'\n\n// 重新导出所有类型和常量\nexport { CHART_TYPES, CHART_CATEGORIES, DATA_TYPES, FIELD_ROLES }\n\n// 完整的图表配置类\nexport class ChartConfig {\n  constructor (chartType) {\n    this.chartType = chartType\n    this.metadata = getChartMetadata(chartType)\n    this.fieldMapping = getFieldMapping(chartType)\n    this.configOptions = getChartConfigOptions(chartType)\n    this.defaultConfig = getDefaultConfig(chartType)\n  }\n\n  // 获取图表元数据\n  getMetadata () {\n    return this.metadata\n  }\n\n  // 获取字段映射配置\n  getFieldMapping () {\n    return this.fieldMapping\n  }\n\n  // 获取配置选项\n  getConfigOptions () {\n    return this.configOptions\n  }\n\n  // 获取按分类组织的配置选项\n  getConfigByCategory () {\n    return getChartConfigByCategory(this.chartType)\n  }\n\n  // 获取默认配置\n  getDefaultConfig () {\n    return this.defaultConfig\n  }\n\n  // 验证字段映射\n  validateFieldMapping (fieldName, dataType) {\n    return validateFieldMapping(this.chartType, fieldName, dataType)\n  }\n\n  // 验证必需字段\n  validateRequiredFields (fieldMappings) {\n    return validateRequiredFields(this.chartType, fieldMappings)\n  }\n\n  // 获取字段建议\n  getFieldSuggestions (availableColumns) {\n    return getFieldSuggestions(this.chartType, availableColumns)\n  }\n\n  // 验证配置值\n  validateConfig (config) {\n    const errors = []\n\n    Object.entries(config).forEach(([key, value]) => {\n      const configDef = this.configOptions[key]\n      if (configDef) {\n        // 检查条件依赖\n        if (!checkCondition(configDef.condition, config)) {\n          return\n        }\n\n        const fieldErrors = validateConfigValue(key, value, configDef)\n        errors.push(...fieldErrors)\n      }\n    })\n\n    return errors\n  }\n\n  // 构建完整的图表配置\n  buildFullConfig (fieldMappings, customConfig = {}) {\n    const fullConfig = {\n      chartType: this.chartType,\n      metadata: this.metadata,\n      fieldMappings: fieldMappings,\n      options: {\n        ...this.defaultConfig,\n        ...customConfig\n      }\n    }\n\n    // 验证配置\n    const fieldValidation = this.validateRequiredFields(fieldMappings)\n    const configValidation = this.validateConfig(fullConfig.options)\n\n    fullConfig.validation = {\n      fieldMapping: fieldValidation,\n      config: configValidation,\n      isValid: fieldValidation.valid && configValidation.length === 0\n    }\n\n    return fullConfig\n  }\n}\n\n// 便利函数：获取图表配置实例\nexport function getChartConfig (chartType) {\n  return new ChartConfig(chartType)\n}\n\n// 便利函数：获取所有支持的图表类型\nexport function getAllChartTypes () {\n  return Object.values(CHART_TYPES)\n}\n\n// 便利函数：根据分类获取图表类型\nexport function getChartsByCategory (category) {\n  return Object.entries(CHART_TYPES).filter(([_, type]) => {\n    const metadata = getChartMetadata(type)\n    return metadata.category === category\n  }).map(([_, type]) => type)\n}\n\n// 便利函数：智能推荐图表类型\nexport function recommendChartType (columns) {\n  const recommendations = []\n\n  // 分析数据列的类型分布\n  const columnTypes = columns.map(col => ({\n    name: col.name,\n    dataType: inferDataType(col.values || [])\n  }))\n\n  const numericColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.NUMERIC)\n  const categoryColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.CATEGORY)\n  const temporalColumns = columnTypes.filter(col => col.dataType === DATA_TYPES.TEMPORAL)\n\n  // 基于数据特征推荐图表类型\n  if (temporalColumns.length > 0 && numericColumns.length > 0) {\n    recommendations.push({\n      type: CHART_TYPES.LINE,\n      confidence: 0.9,\n      reason: '包含时间序列数据，适合显示趋势'\n    })\n  }\n\n  if (categoryColumns.length > 0 && numericColumns.length > 0) {\n    recommendations.push({\n      type: CHART_TYPES.BAR,\n      confidence: 0.8,\n      reason: '包含分类和数值数据，适合比较分析'\n    })\n  }\n\n  if (categoryColumns.length === 1 && numericColumns.length === 1) {\n    recommendations.push({\n      type: CHART_TYPES.PIE,\n      confidence: 0.7,\n      reason: '单一分类和数值，适合显示占比'\n    })\n  }\n\n  if (numericColumns.length >= 2) {\n    recommendations.push({\n      type: CHART_TYPES.SCATTER,\n      confidence: 0.6,\n      reason: '多个数值字段，适合相关性分析'\n    })\n  }\n\n  // 排序推荐结果\n  recommendations.sort((a, b) => b.confidence - a.confidence)\n\n  return recommendations\n}\n\n// 数据处理相关函数\nexport function processChartData (data, fieldMappings, chartType) {\n  // 根据字段映射转换数据\n  const processedData = data.map(row => {\n    const processedRow = {}\n\n    Object.entries(fieldMappings).forEach(([fieldName, mapping]) => {\n      if (mapping && mapping.field) {\n        processedRow[fieldName] = row[mapping.field]\n      }\n    })\n\n    return processedRow\n  })\n\n  return processedData\n}\n\n// 配置验证函数\nexport function validateChartConfiguration (chartType, fieldMappings, config) {\n  const chartConfig = getChartConfig(chartType)\n\n  // 验证字段映射\n  const fieldValidation = chartConfig.validateRequiredFields(fieldMappings)\n\n  // 验证配置选项\n  const configValidation = chartConfig.validateConfig(config)\n\n  return {\n    fieldMapping: fieldValidation,\n    config: configValidation,\n    isValid: fieldValidation.valid && configValidation.length === 0,\n    errors: [...(fieldValidation.missingFields || []), ...configValidation]\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}