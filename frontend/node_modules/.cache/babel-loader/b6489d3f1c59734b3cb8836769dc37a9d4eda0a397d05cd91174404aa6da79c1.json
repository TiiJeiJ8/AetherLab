{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed } from 'vue';\nexport function useDataFiltering() {\n  const filterType = ref('all');\n  const rangeStart = ref(1);\n  const rangeEnd = ref(100);\n  const conditionColumn = ref('');\n  const conditionOperator = ref('>');\n  const conditionValue = ref('');\n  const rawData = ref([]);\n\n  // 过滤后的数据\n  const filteredData = computed(() => {\n    if (!rawData.value.length) return [];\n    switch (filterType.value) {\n      case 'all':\n        return rawData.value;\n      case 'range':\n        {\n          const start = Math.max(0, rangeStart.value - 1);\n          const end = Math.min(rawData.value.length, rangeEnd.value);\n          return rawData.value.slice(start, end);\n        }\n      case 'condition':\n        return applyConditionFilter();\n      default:\n        return rawData.value;\n    }\n  });\n\n  // 应用条件过滤\n  function applyConditionFilter() {\n    if (!conditionColumn.value || !conditionOperator.value || conditionValue.value === '') {\n      return rawData.value;\n    }\n    const [, columnName] = conditionColumn.value.split('_');\n    return rawData.value.filter(row => {\n      const cellValue = row[columnName];\n      const filterValue = conditionValue.value;\n\n      // 根据操作符进行比较\n      switch (conditionOperator.value) {\n        case '>':\n          return parseFloat(cellValue) > parseFloat(filterValue);\n        case '<':\n          return parseFloat(cellValue) < parseFloat(filterValue);\n        case '=':\n          return String(cellValue).toLowerCase() === String(filterValue).toLowerCase();\n        case '!=':\n          return String(cellValue).toLowerCase() !== String(filterValue).toLowerCase();\n        case 'contains':\n          return String(cellValue).toLowerCase().includes(String(filterValue).toLowerCase());\n        default:\n          return true;\n      }\n    });\n  }\n\n  // 设置原始数据\n  function setRawData(data) {\n    rawData.value = data;\n  }\n\n  // 更新过滤器\n  function updateFilter() {\n    // 触发计算属性重新计算\n    // 这个函数主要用于UI事件绑定\n  }\n\n  // 重置过滤器\n  function resetFilter() {\n    filterType.value = 'all';\n    rangeStart.value = 1;\n    rangeEnd.value = 100;\n    conditionColumn.value = '';\n    conditionOperator.value = '>';\n    conditionValue.value = '';\n  }\n\n  // 获取过滤统计信息\n  const filterStats = computed(() => {\n    const total = rawData.value.length;\n    const filtered = filteredData.value.length;\n    const percentage = total > 0 ? Math.round(filtered / total * 100) : 0;\n    return {\n      total,\n      filtered,\n      percentage,\n      excluded: total - filtered\n    };\n  });\n  return {\n    filterType,\n    rangeStart,\n    rangeEnd,\n    conditionColumn,\n    conditionOperator,\n    conditionValue,\n    filteredData,\n    filterStats,\n    setRawData,\n    updateFilter,\n    resetFilter\n  };\n}","map":{"version":3,"names":["ref","computed","useDataFiltering","filterType","rangeStart","rangeEnd","conditionColumn","conditionOperator","conditionValue","rawData","filteredData","value","length","start","Math","max","end","min","slice","applyConditionFilter","columnName","split","filter","row","cellValue","filterValue","parseFloat","String","toLowerCase","includes","setRawData","data","updateFilter","resetFilter","filterStats","total","filtered","percentage","round","excluded"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/composables/useDataFiltering.js"],"sourcesContent":["import { ref, computed } from 'vue'\n\nexport function useDataFiltering () {\n  const filterType = ref('all')\n  const rangeStart = ref(1)\n  const rangeEnd = ref(100)\n  const conditionColumn = ref('')\n  const conditionOperator = ref('>')\n  const conditionValue = ref('')\n  const rawData = ref([])\n\n  // 过滤后的数据\n  const filteredData = computed(() => {\n    if (!rawData.value.length) return []\n\n    switch (filterType.value) {\n      case 'all':\n        return rawData.value\n\n      case 'range': {\n        const start = Math.max(0, rangeStart.value - 1)\n        const end = Math.min(rawData.value.length, rangeEnd.value)\n        return rawData.value.slice(start, end)\n      }\n\n      case 'condition':\n        return applyConditionFilter()\n\n      default:\n        return rawData.value\n    }\n  })\n\n  // 应用条件过滤\n  function applyConditionFilter () {\n    if (!conditionColumn.value || !conditionOperator.value || conditionValue.value === '') {\n      return rawData.value\n    }\n\n    const [, columnName] = conditionColumn.value.split('_')\n\n    return rawData.value.filter(row => {\n      const cellValue = row[columnName]\n      const filterValue = conditionValue.value\n\n      // 根据操作符进行比较\n      switch (conditionOperator.value) {\n        case '>':\n          return parseFloat(cellValue) > parseFloat(filterValue)\n\n        case '<':\n          return parseFloat(cellValue) < parseFloat(filterValue)\n\n        case '=':\n          return String(cellValue).toLowerCase() === String(filterValue).toLowerCase()\n\n        case '!=':\n          return String(cellValue).toLowerCase() !== String(filterValue).toLowerCase()\n\n        case 'contains':\n          return String(cellValue).toLowerCase().includes(String(filterValue).toLowerCase())\n\n        default:\n          return true\n      }\n    })\n  }\n\n  // 设置原始数据\n  function setRawData (data) {\n    rawData.value = data\n  }\n\n  // 更新过滤器\n  function updateFilter () {\n    // 触发计算属性重新计算\n    // 这个函数主要用于UI事件绑定\n  }\n\n  // 重置过滤器\n  function resetFilter () {\n    filterType.value = 'all'\n    rangeStart.value = 1\n    rangeEnd.value = 100\n    conditionColumn.value = ''\n    conditionOperator.value = '>'\n    conditionValue.value = ''\n  }\n\n  // 获取过滤统计信息\n  const filterStats = computed(() => {\n    const total = rawData.value.length\n    const filtered = filteredData.value.length\n    const percentage = total > 0 ? Math.round((filtered / total) * 100) : 0\n\n    return {\n      total,\n      filtered,\n      percentage,\n      excluded: total - filtered\n    }\n  })\n\n  return {\n    filterType,\n    rangeStart,\n    rangeEnd,\n    conditionColumn,\n    conditionOperator,\n    conditionValue,\n    filteredData,\n    filterStats,\n    setRawData,\n    updateFilter,\n    resetFilter\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}