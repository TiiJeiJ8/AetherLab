{"ast":null,"code":"import { ref, watch } from 'vue';\nexport default {\n  __name: 'ChartAdvancedConfig',\n  props: {\n    advancedConfig: Array,\n    modelValue: Object\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* no-undef */\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const localConfig = ref({\n      ...props.modelValue\n    });\n    const isCollapsed = ref(true);\n    watch(() => props.modelValue, val => {\n      localConfig.value = {\n        ...val\n      };\n    });\n    function updateField(key, value) {\n      localConfig.value[key] = value;\n      emit('update:modelValue', {\n        ...localConfig.value\n      });\n    }\n    function toggleCollapse() {\n      isCollapsed.value = !isCollapsed.value;\n    }\n    const __returned__ = {\n      props,\n      emit,\n      localConfig,\n      isCollapsed,\n      updateField,\n      toggleCollapse,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","props","__props","emit","__emit","localConfig","modelValue","isCollapsed","val","value","updateField","key","toggleCollapse"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/ChartAdvancedConfig.vue"],"sourcesContent":["<template>\n<div class=\"advanced-section\">\n    <div class=\"section-header adv-header\" @click=\"toggleCollapse\">\n        <h4>Advanced Settings</h4>\n        <span class=\"collapse-icon\" :class=\"{ collapsed: isCollapsed }\">&#9660;</span>\n    </div>\n    <transition name=\"collapse\">\n        <div v-show=\"!isCollapsed\" class=\"adv-content\">\n            <template v-for=\"item in advancedConfig\" :key=\"item.key\">\n                <div v-if=\"item.type !== 'lineSeriesStylePanel'\" class=\"config-item\">\n                    <label>{{ item.label }}</label>\n                    <input v-if=\"item.type === 'number'\" type=\"number\" :min=\"item.min\" :max=\"item.max\" :value=\"localConfig[item.key]\" @input=\"updateField(item.key, $event.target.valueAsNumber)\" />\n                    <input v-if=\"item.type === 'checkbox'\" type=\"checkbox\" :checked=\"localConfig[item.key]\" @change=\"updateField(item.key, $event.target.checked)\" />\n                    <input v-if=\"item.type === 'text'\" type=\"text\" :value=\"localConfig[item.key]\" @input=\"updateField(item.key, $event.target.value)\" />\n                    <select v-if=\"item.type === 'select'\" :value=\"localConfig[item.key]\" @change=\"updateField(item.key, $event.target.value)\">\n                        <option v-for=\"option in item.options\" :key=\"option.value\" :value=\"option.value\">{{ option.label }}</option>\n                    </select>\n                </div>\n                <!-- 折线样式与数据点样式折叠面板 -->\n                <div v-else class=\"line-style-panel\">\n                    <el-collapse>\n                        <el-collapse-item title=\"折线样式与数据点样式\" name=\"line-style\">\n                            <div v-for=\"(line, idx) in localConfig.lineSeriesStyles || []\" :key=\"line.name\" class=\"line-style-block\">\n                                <h4 class=\"line-title\">折线{{ idx + 1 }}（{{ line.name }}）</h4>\n                                <div class=\"line-style-row\">\n                                    <label>线型</label>\n                                    <select v-model=\"line.lineType\">\n                                        <option value=\"solid\">实线</option>\n                                        <option value=\"dashed\">虚线</option>\n                                        <option value=\"dotted\">点线</option>\n                                    </select>\n                                    <label>颜色</label>\n                                    <input type=\"color\" v-model=\"line.lineColor\" />\n                                    <label>线宽</label>\n                                    <input type=\"number\" v-model.number=\"line.lineWidth\" min=\"1\" max=\"10\" style=\"width:60px;\" />\n                                    <label>面积模式</label>\n                                    <input type=\"checkbox\" v-model=\"line.area\" />\n                                    <label>最大/最小值</label>\n                                    <input type=\"checkbox\" v-model=\"line.showMaxMin\" />\n                                    <label>高亮区域</label>\n                                    <input type=\"checkbox\" v-model=\"line.highlightArea\" />\n                                </div>\n                                <div class=\"point-style-row\">\n                                    <input type=\"checkbox\" v-model=\"line.pointUnified\" /> 所有点统一样式\n                                    <template v-if=\"line.pointUnified\">\n                                        <label>点形状</label>\n                                        <select v-model=\"line.pointSymbol\">\n                                            <option value=\"circle\">圆形</option>\n                                            <option value=\"rect\">方形</option>\n                                            <option value=\"triangle\">三角</option>\n                                        </select>\n                                        <label>颜色</label>\n                                        <input type=\"color\" v-model=\"line.pointColor\" />\n                                    </template>\n                                    <template v-else>\n                                        <div class=\"point-table-wrapper\">\n                                            <table class=\"point-table\">\n                                                <thead>\n                                                    <tr><th>索引</th><th>值</th><th>点形状</th><th>颜色</th><th>操作</th></tr>\n                                                </thead>\n                                                <tbody>\n                                                    <tr v-for=\"pt in line.points\" :key=\"pt.index\">\n                                                        <td>{{ pt.index }}</td>\n                                                        <td>{{ pt.value }}</td>\n                                                        <td>\n                                                            <select v-model=\"pt.symbol\">\n                                                                <option value=\"circle\">圆形</option>\n                                                                <option value=\"rect\">方形</option>\n                                                                <option value=\"triangle\">三角</option>\n                                                            </select>\n                                                        </td>\n                                                        <td><input type=\"color\" v-model=\"pt.color\" /></td>\n                                                        <td><button @click=\"resetPointStyle(line, pt)\">恢复默认</button></td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                            <button @click=\"batchSetPointStyle(line)\">批量设置</button>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </el-collapse-item>\n                    </el-collapse>\n                </div>\n            </template>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script setup>\n/* no-undef */\n/* eslint-disable */\nimport { ref, watch } from 'vue'\nconst props = defineProps({\n    advancedConfig: Array,\n    modelValue: Object\n})\nconst emit = defineEmits(['update:modelValue'])\n\nconst localConfig = ref({ ...props.modelValue })\nconst isCollapsed = ref(true)\n\nwatch(() => props.modelValue, (val) => {\n    localConfig.value = { ...val }\n})\n\nfunction updateField(key, value) {\n    localConfig.value[key] = value\n    emit('update:modelValue', { ...localConfig.value })\n}\n\nfunction toggleCollapse() {\n    isCollapsed.value = !isCollapsed.value\n}\n</script>\n\n<style scoped>\n.advanced-section {\n    margin-bottom: 16px;\n    border-radius: 8px;\n    background: var(--bg-secondary);\n    box-shadow: 0 1px 2px rgba(0,0,0,0.03);\n}\n.adv-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 8px 12px;\n    user-select: none;\n}\n.collapse-icon {\n    font-size: 16px;\n    margin-left: 8px;\n    transition: transform 0.2s;\n}\n.collapse-icon.collapsed {\n    transform: rotate(-90deg);\n}\n.adv-content {\n    padding: 8px 16px 12px 16px;\n}\n.config-item {\n    margin-bottom: 12px;\n}\n.collapse-enter-active, .collapse-leave-active {\n    transition: max-height 0.25s cubic-bezier(.4,0,.2,1), opacity 0.2s;\n}\n.collapse-enter-from, .collapse-leave-to {\n    max-height: 0;\n    opacity: 0;\n    overflow: hidden;\n}\n.collapse-enter-to, .collapse-leave-from {\n    max-height: 300px;\n    opacity: 1;\n}\ninput[type=\"number\"], input[type=\"text\"] {\n    background: var(--bg-secondary);\n    color: var(--text-main);\n    border: 1px solid var(--text-secondary);\n    border-radius: 6px;\n    padding: 2px 8px;\n    font-size: 14px;\n    outline: none;\n    transition: border-color 0.2s;\n}\ninput[type=\"checkbox\"] {\n    accent-color: #3b82f6;\n}\n</style>\n"],"mappings":"AA6FA,SAASA,GAAG,EAAEC,KAAK,QAAQ,KAAI;;;;;;;;;;;;;;IAF/B;IACA;IAEA,MAAMC,KAAK,GAAGC,OAAA;IAId,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,WAAW,GAAGN,GAAG,CAAC;MAAE,GAAGE,KAAK,CAACK;IAAW,CAAC;IAC/C,MAAMC,WAAW,GAAGR,GAAG,CAAC,IAAI;IAE5BC,KAAK,CAAC,MAAMC,KAAK,CAACK,UAAU,EAAGE,GAAG,IAAK;MACnCH,WAAW,CAACI,KAAK,GAAG;QAAE,GAAGD;MAAI;IACjC,CAAC;IAED,SAASE,WAAWA,CAACC,GAAG,EAAEF,KAAK,EAAE;MAC7BJ,WAAW,CAACI,KAAK,CAACE,GAAG,CAAC,GAAGF,KAAI;MAC7BN,IAAI,CAAC,mBAAmB,EAAE;QAAE,GAAGE,WAAW,CAACI;MAAM,CAAC;IACtD;IAEA,SAASG,cAAcA,CAAA,EAAG;MACtBL,WAAW,CAACE,KAAK,GAAG,CAACF,WAAW,CAACE,KAAI;IACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}