{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* eslint-disable */\n// 图表数据处理服务\nexport class ChartDataService {\n  /**\n   * 根据数据映射配置生成图表数据\n   * @param {Array} files - 数据文件列表\n   * @param {Object} mapping - 数据映射配置\n   * @param {Object} filter - 数据过滤配置\n   * @param {String} chartType - 图表类型\n   * @returns {Object} 处理后的图表配置\n   */\n  static generateChartData(files, mapping, filter, chartType) {\n    try {\n      // 1. 构建临时数据集\n      const dataset = this.buildTempDataset(files, mapping, filter);\n\n      // 2. 根据图表类型生成配置\n      const chartConfig = this.generateChartConfig(dataset, mapping, chartType);\n      return {\n        success: true,\n        data: chartConfig,\n        dataset: dataset\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * 构建临时数据集\n   */\n  static buildTempDataset(files, mapping, filter) {\n    const dataset = [];\n    const columnSources = {};\n\n    // 收集所有需要的列数据\n    Object.keys(mapping).forEach(key => {\n      const column = mapping[key];\n      if (column && column.fileId) {\n        const file = files.find(f => f.id === column.fileId);\n        if (file && file.data) {\n          columnSources[key] = {\n            data: file.data,\n            column: column.name,\n            type: column.type\n          };\n        }\n      }\n    });\n\n    // 确定数据集的行数（取最小的文件行数）\n    const rowCounts = Object.values(columnSources).map(source => source.data.length);\n    const maxRows = Math.min(...rowCounts);\n\n    // 应用过滤器\n    let {\n      startRow,\n      endRow\n    } = this.applyFilter(filter, maxRows);\n\n    // 构建数据集\n    for (let i = startRow; i <= endRow; i++) {\n      const row = {};\n      Object.keys(columnSources).forEach(key => {\n        const source = columnSources[key];\n        if (source.data[i]) {\n          row[key] = this.convertDataType(source.data[i][source.column], source.type);\n        }\n      });\n\n      // 应用条件过滤\n      if (this.passesConditionFilter(row, filter)) {\n        dataset.push(row);\n      }\n    }\n    return dataset;\n  }\n\n  /**\n   * 应用数据过滤器\n   */\n  static applyFilter(filter, maxRows) {\n    let startRow = 0;\n    let endRow = maxRows - 1;\n    switch (filter.mode) {\n      case 'range':\n        startRow = Math.max(0, (filter.range.start || 1) - 1);\n        endRow = Math.min(maxRows - 1, (filter.range.end || maxRows) - 1);\n        break;\n      case 'all':\n      default:\n        // 使用默认范围\n        break;\n    }\n    return {\n      startRow,\n      endRow\n    };\n  }\n\n  /**\n   * 检查行是否通过条件过滤\n   */\n  static passesConditionFilter(row, filter) {\n    if (filter.mode !== 'condition' || !filter.conditions || filter.conditions.length === 0) {\n      return true;\n    }\n    return filter.conditions.every(condition => {\n      if (!condition.column || !condition.operator || condition.value === undefined) {\n        return true;\n      }\n      const value = row[condition.column];\n      const conditionValue = condition.value;\n      switch (condition.operator) {\n        case 'eq':\n          return value == conditionValue;\n        case 'ne':\n          return value != conditionValue;\n        case 'gt':\n          return Number(value) > Number(conditionValue);\n        case 'lt':\n          return Number(value) < Number(conditionValue);\n        case 'contains':\n          return String(value).includes(String(conditionValue));\n        default:\n          return true;\n      }\n    });\n  }\n\n  /**\n   * 转换数据类型\n   */\n  static convertDataType(value, type) {\n    switch (type) {\n      case 'number':\n        return Number(value) || 0;\n      case 'date':\n        return new Date(value);\n      case 'string':\n      default:\n        return String(value);\n    }\n  }\n\n  /**\n   * 生成图表配置\n   */\n  static generateChartConfig(dataset, mapping, chartType) {\n    const config = {\n      title: {\n        text: this.generateTitle(mapping, chartType),\n        left: 'center'\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross'\n        }\n      },\n      legend: {\n        data: [],\n        top: 30\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      }\n    };\n    switch (chartType) {\n      case 'line':\n        return this.generateLineChart(config, dataset, mapping);\n      case 'bar':\n        return this.generateBarChart(config, dataset, mapping);\n      case 'pie':\n        return this.generatePieChart(config, dataset, mapping);\n      case 'scatter':\n        return this.generateScatterChart(config, dataset, mapping);\n      default:\n        return this.generateLineChart(config, dataset, mapping);\n    }\n  }\n\n  /**\n   * 生成标题\n   */\n  static generateTitle(mapping, chartType) {\n    const typeNames = {\n      line: '折线图',\n      bar: '柱状图',\n      pie: '饼图',\n      scatter: '散点图'\n    };\n    const baseName = typeNames[chartType] || '图表';\n    if (mapping.xAxis && mapping.yAxis) {\n      return `${mapping.yAxis.name} vs ${mapping.xAxis.name} - ${baseName}`;\n    } else if (mapping.name && mapping.value) {\n      return `${mapping.name.name} - ${baseName}`;\n    }\n    return baseName;\n  }\n\n  /**\n   * 生成折线图配置\n   */\n  static generateLineChart(config, dataset, mapping) {\n    const xAxisData = dataset.map(row => row[mapping.xAxis?.name] || '');\n    const yAxisData = dataset.map(row => row[mapping.yAxis?.name] || 0);\n    config.xAxis = {\n      type: 'category',\n      data: xAxisData,\n      name: mapping.xAxis?.name || 'X轴'\n    };\n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    };\n    config.series = [{\n      name: mapping.series?.name || mapping.yAxis?.name || '数据',\n      type: 'line',\n      data: yAxisData,\n      smooth: true,\n      symbol: 'circle',\n      symbolSize: 6,\n      lineStyle: {\n        width: 2\n      },\n      areaStyle: {\n        opacity: 0.3\n      }\n    }];\n    config.legend.data = [config.series[0].name];\n    return config;\n  }\n\n  /**\n   * 生成柱状图配置\n   */\n  static generateBarChart(config, dataset, mapping) {\n    const xAxisData = dataset.map(row => row[mapping.xAxis?.name] || '');\n    const yAxisData = dataset.map(row => row[mapping.yAxis?.name] || 0);\n    config.xAxis = {\n      type: 'category',\n      data: xAxisData,\n      name: mapping.xAxis?.name || 'X轴'\n    };\n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    };\n    config.series = [{\n      name: mapping.series?.name || mapping.yAxis?.name || '数据',\n      type: 'bar',\n      data: yAxisData,\n      barWidth: '60%',\n      itemStyle: {\n        borderRadius: [4, 4, 0, 0]\n      }\n    }];\n    config.legend.data = [config.series[0].name];\n    return config;\n  }\n\n  /**\n   * 生成饼图配置\n   */\n  static generatePieChart(config, dataset, mapping) {\n    const data = dataset.map(row => ({\n      name: row[mapping.name?.name] || 'Unknown',\n      value: row[mapping.value?.name] || 0\n    }));\n    config.series = [{\n      name: mapping.value?.name || '数据',\n      type: 'pie',\n      radius: ['40%', '70%'],\n      avoidLabelOverlap: false,\n      label: {\n        show: false,\n        position: 'center'\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: '18',\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      data: data\n    }];\n    config.legend.data = data.map(item => item.name);\n    return config;\n  }\n\n  /**\n   * 生成散点图配置\n   */\n  static generateScatterChart(config, dataset, mapping) {\n    const data = dataset.map(row => [row[mapping.xAxis?.name] || 0, row[mapping.yAxis?.name] || 0]);\n    config.xAxis = {\n      type: 'value',\n      name: mapping.xAxis?.name || 'X轴'\n    };\n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    };\n    config.series = [{\n      name: mapping.series?.name || '数据',\n      type: 'scatter',\n      data: data,\n      symbolSize: function (data) {\n        return Math.sqrt(data[1]) * 2;\n      },\n      itemStyle: {\n        opacity: 0.7\n      }\n    }];\n    config.legend.data = [config.series[0].name];\n    return config;\n  }\n\n  /**\n   * 验证数据映射配置\n   */\n  static validateMapping(mapping, chartType) {\n    const errors = [];\n    switch (chartType) {\n      case 'line':\n      case 'bar':\n        if (!mapping.xAxis) {\n          errors.push('X轴配置是必需的');\n        }\n        if (!mapping.yAxis) {\n          errors.push('Y轴配置是必需的');\n        }\n        if (mapping.yAxis && mapping.yAxis.type !== 'number') {\n          errors.push('Y轴必须是数值类型');\n        }\n        break;\n      case 'pie':\n        if (!mapping.name) {\n          errors.push('名称配置是必需的');\n        }\n        if (!mapping.value) {\n          errors.push('数值配置是必需的');\n        }\n        if (mapping.value && mapping.value.type !== 'number') {\n          errors.push('数值必须是数值类型');\n        }\n        break;\n      case 'scatter':\n        if (!mapping.xAxis) {\n          errors.push('X轴配置是必需的');\n        }\n        if (!mapping.yAxis) {\n          errors.push('Y轴配置是必需的');\n        }\n        if (mapping.xAxis && mapping.xAxis.type !== 'number') {\n          errors.push('X轴必须是数值类型');\n        }\n        if (mapping.yAxis && mapping.yAxis.type !== 'number') {\n          errors.push('Y轴必须是数值类型');\n        }\n        break;\n    }\n    return errors;\n  }\n\n  /**\n   * 生成图表历史记录\n   */\n  static generateChartHistory(config, mapping, chartType) {\n    return {\n      id: Date.now().toString(),\n      title: config.title.text,\n      type: chartType,\n      option: config,\n      mapping: mapping,\n      createdAt: new Date().toISOString(),\n      thumbnail: this.generateThumbnail(config)\n    };\n  }\n\n  /**\n   * 生成缩略图（简化版）\n   */\n  static generateThumbnail(config) {\n    // 这里可以实现缩略图生成逻辑\n    // 目前返回一个简化的配置\n    return {\n      ...config,\n      title: {\n        ...config.title,\n        textStyle: {\n          fontSize: 12\n        }\n      },\n      grid: {\n        left: '5%',\n        right: '5%',\n        top: '15%',\n        bottom: '10%'\n      }\n    };\n  }\n\n  /**\n   * 智能推荐图表类型\n   */\n  static recommendChartType(mapping) {\n    const hasNumericX = mapping.xAxis && mapping.xAxis.type === 'number';\n    const hasNumericY = mapping.yAxis && mapping.yAxis.type === 'number';\n    const hasCategoricalX = mapping.xAxis && mapping.xAxis.type === 'string';\n    const hasName = mapping.name && mapping.name.type === 'string';\n    const hasValue = mapping.value && mapping.value.type === 'number';\n\n    // 饼图推荐\n    if (hasName && hasValue && !mapping.xAxis && !mapping.yAxis) {\n      return 'pie';\n    }\n\n    // 散点图推荐\n    if (hasNumericX && hasNumericY) {\n      return 'scatter';\n    }\n\n    // 柱状图推荐\n    if (hasCategoricalX && hasNumericY) {\n      return 'bar';\n    }\n\n    // 默认推荐折线图\n    return 'line';\n  }\n}\n\n// 模拟文件数据服务\nexport class MockFileDataService {\n  static generateMockData(file) {\n    // 根据文件类型生成模拟数据\n    const mockData = [];\n    const rowCount = Math.floor(Math.random() * 50) + 20;\n    for (let i = 0; i < rowCount; i++) {\n      mockData.push({\n        '姓名': `用户${i + 1}`,\n        '年龄': Math.floor(Math.random() * 40) + 20,\n        '城市': ['北京', '上海', '广州', '深圳', '杭州'][Math.floor(Math.random() * 5)],\n        '薪资': Math.floor(Math.random() * 20000) + 5000,\n        '入职日期': new Date(2020 + Math.floor(Math.random() * 4), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString().split('T')[0]\n      });\n    }\n    return mockData;\n  }\n}","map":{"version":3,"names":["ChartDataService","generateChartData","files","mapping","filter","chartType","dataset","buildTempDataset","chartConfig","generateChartConfig","success","data","error","message","columnSources","Object","keys","forEach","key","column","fileId","file","find","f","id","name","type","rowCounts","values","map","source","length","maxRows","Math","min","startRow","endRow","applyFilter","i","row","convertDataType","passesConditionFilter","push","mode","max","range","start","end","conditions","every","condition","operator","value","undefined","conditionValue","Number","String","includes","Date","config","title","text","generateTitle","left","tooltip","trigger","axisPointer","legend","top","grid","right","bottom","containLabel","generateLineChart","generateBarChart","generatePieChart","generateScatterChart","typeNames","line","bar","pie","scatter","baseName","xAxis","yAxis","xAxisData","yAxisData","series","smooth","symbol","symbolSize","lineStyle","width","areaStyle","opacity","barWidth","itemStyle","borderRadius","radius","avoidLabelOverlap","label","show","position","emphasis","fontSize","fontWeight","labelLine","item","sqrt","validateMapping","errors","generateChartHistory","now","toString","option","createdAt","toISOString","thumbnail","generateThumbnail","textStyle","recommendChartType","hasNumericX","hasNumericY","hasCategoricalX","hasName","hasValue","MockFileDataService","generateMockData","mockData","rowCount","floor","random","split"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/ChartDataService.js"],"sourcesContent":["/* eslint-disable */\n// 图表数据处理服务\nexport class ChartDataService {\n  /**\n   * 根据数据映射配置生成图表数据\n   * @param {Array} files - 数据文件列表\n   * @param {Object} mapping - 数据映射配置\n   * @param {Object} filter - 数据过滤配置\n   * @param {String} chartType - 图表类型\n   * @returns {Object} 处理后的图表配置\n   */\n  static generateChartData(files, mapping, filter, chartType) {\n    try {\n      // 1. 构建临时数据集\n      const dataset = this.buildTempDataset(files, mapping, filter)\n      \n      // 2. 根据图表类型生成配置\n      const chartConfig = this.generateChartConfig(dataset, mapping, chartType)\n      \n      return {\n        success: true,\n        data: chartConfig,\n        dataset: dataset\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      }\n    }\n  }\n\n  /**\n   * 构建临时数据集\n   */\n  static buildTempDataset(files, mapping, filter) {\n    const dataset = []\n    const columnSources = {}\n    \n    // 收集所有需要的列数据\n    Object.keys(mapping).forEach(key => {\n      const column = mapping[key]\n      if (column && column.fileId) {\n        const file = files.find(f => f.id === column.fileId)\n        if (file && file.data) {\n          columnSources[key] = {\n            data: file.data,\n            column: column.name,\n            type: column.type\n          }\n        }\n      }\n    })\n    \n    // 确定数据集的行数（取最小的文件行数）\n    const rowCounts = Object.values(columnSources).map(source => source.data.length)\n    const maxRows = Math.min(...rowCounts)\n    \n    // 应用过滤器\n    let { startRow, endRow } = this.applyFilter(filter, maxRows)\n    \n    // 构建数据集\n    for (let i = startRow; i <= endRow; i++) {\n      const row = {}\n      Object.keys(columnSources).forEach(key => {\n        const source = columnSources[key]\n        if (source.data[i]) {\n          row[key] = this.convertDataType(source.data[i][source.column], source.type)\n        }\n      })\n      \n      // 应用条件过滤\n      if (this.passesConditionFilter(row, filter)) {\n        dataset.push(row)\n      }\n    }\n    \n    return dataset\n  }\n\n  /**\n   * 应用数据过滤器\n   */\n  static applyFilter(filter, maxRows) {\n    let startRow = 0\n    let endRow = maxRows - 1\n    \n    switch (filter.mode) {\n      case 'range':\n        startRow = Math.max(0, (filter.range.start || 1) - 1)\n        endRow = Math.min(maxRows - 1, (filter.range.end || maxRows) - 1)\n        break\n      case 'all':\n      default:\n        // 使用默认范围\n        break\n    }\n    \n    return { startRow, endRow }\n  }\n\n  /**\n   * 检查行是否通过条件过滤\n   */\n  static passesConditionFilter(row, filter) {\n    if (filter.mode !== 'condition' || !filter.conditions || filter.conditions.length === 0) {\n      return true\n    }\n    \n    return filter.conditions.every(condition => {\n      if (!condition.column || !condition.operator || condition.value === undefined) {\n        return true\n      }\n      \n      const value = row[condition.column]\n      const conditionValue = condition.value\n      \n      switch (condition.operator) {\n        case 'eq':\n          return value == conditionValue\n        case 'ne':\n          return value != conditionValue\n        case 'gt':\n          return Number(value) > Number(conditionValue)\n        case 'lt':\n          return Number(value) < Number(conditionValue)\n        case 'contains':\n          return String(value).includes(String(conditionValue))\n        default:\n          return true\n      }\n    })\n  }\n\n  /**\n   * 转换数据类型\n   */\n  static convertDataType(value, type) {\n    switch (type) {\n      case 'number':\n        return Number(value) || 0\n      case 'date':\n        return new Date(value)\n      case 'string':\n      default:\n        return String(value)\n    }\n  }\n\n  /**\n   * 生成图表配置\n   */\n  static generateChartConfig(dataset, mapping, chartType) {\n    const config = {\n      title: {\n        text: this.generateTitle(mapping, chartType),\n        left: 'center'\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross'\n        }\n      },\n      legend: {\n        data: [],\n        top: 30\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      }\n    }\n    \n    switch (chartType) {\n      case 'line':\n        return this.generateLineChart(config, dataset, mapping)\n      case 'bar':\n        return this.generateBarChart(config, dataset, mapping)\n      case 'pie':\n        return this.generatePieChart(config, dataset, mapping)\n      case 'scatter':\n        return this.generateScatterChart(config, dataset, mapping)\n      default:\n        return this.generateLineChart(config, dataset, mapping)\n    }\n  }\n\n  /**\n   * 生成标题\n   */\n  static generateTitle(mapping, chartType) {\n    const typeNames = {\n      line: '折线图',\n      bar: '柱状图',\n      pie: '饼图',\n      scatter: '散点图'\n    }\n    \n    const baseName = typeNames[chartType] || '图表'\n    \n    if (mapping.xAxis && mapping.yAxis) {\n      return `${mapping.yAxis.name} vs ${mapping.xAxis.name} - ${baseName}`\n    } else if (mapping.name && mapping.value) {\n      return `${mapping.name.name} - ${baseName}`\n    }\n    \n    return baseName\n  }\n\n  /**\n   * 生成折线图配置\n   */\n  static generateLineChart(config, dataset, mapping) {\n    const xAxisData = dataset.map(row => row[mapping.xAxis?.name] || '')\n    const yAxisData = dataset.map(row => row[mapping.yAxis?.name] || 0)\n    \n    config.xAxis = {\n      type: 'category',\n      data: xAxisData,\n      name: mapping.xAxis?.name || 'X轴'\n    }\n    \n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    }\n    \n    config.series = [{\n      name: mapping.series?.name || mapping.yAxis?.name || '数据',\n      type: 'line',\n      data: yAxisData,\n      smooth: true,\n      symbol: 'circle',\n      symbolSize: 6,\n      lineStyle: {\n        width: 2\n      },\n      areaStyle: {\n        opacity: 0.3\n      }\n    }]\n    \n    config.legend.data = [config.series[0].name]\n    \n    return config\n  }\n\n  /**\n   * 生成柱状图配置\n   */\n  static generateBarChart(config, dataset, mapping) {\n    const xAxisData = dataset.map(row => row[mapping.xAxis?.name] || '')\n    const yAxisData = dataset.map(row => row[mapping.yAxis?.name] || 0)\n    \n    config.xAxis = {\n      type: 'category',\n      data: xAxisData,\n      name: mapping.xAxis?.name || 'X轴'\n    }\n    \n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    }\n    \n    config.series = [{\n      name: mapping.series?.name || mapping.yAxis?.name || '数据',\n      type: 'bar',\n      data: yAxisData,\n      barWidth: '60%',\n      itemStyle: {\n        borderRadius: [4, 4, 0, 0]\n      }\n    }]\n    \n    config.legend.data = [config.series[0].name]\n    \n    return config\n  }\n\n  /**\n   * 生成饼图配置\n   */\n  static generatePieChart(config, dataset, mapping) {\n    const data = dataset.map(row => ({\n      name: row[mapping.name?.name] || 'Unknown',\n      value: row[mapping.value?.name] || 0\n    }))\n    \n    config.series = [{\n      name: mapping.value?.name || '数据',\n      type: 'pie',\n      radius: ['40%', '70%'],\n      avoidLabelOverlap: false,\n      label: {\n        show: false,\n        position: 'center'\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontSize: '18',\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: false\n      },\n      data: data\n    }]\n    \n    config.legend.data = data.map(item => item.name)\n    \n    return config\n  }\n\n  /**\n   * 生成散点图配置\n   */\n  static generateScatterChart(config, dataset, mapping) {\n    const data = dataset.map(row => [\n      row[mapping.xAxis?.name] || 0,\n      row[mapping.yAxis?.name] || 0\n    ])\n    \n    config.xAxis = {\n      type: 'value',\n      name: mapping.xAxis?.name || 'X轴'\n    }\n    \n    config.yAxis = {\n      type: 'value',\n      name: mapping.yAxis?.name || 'Y轴'\n    }\n    \n    config.series = [{\n      name: mapping.series?.name || '数据',\n      type: 'scatter',\n      data: data,\n      symbolSize: function (data) {\n        return Math.sqrt(data[1]) * 2\n      },\n      itemStyle: {\n        opacity: 0.7\n      }\n    }]\n    \n    config.legend.data = [config.series[0].name]\n    \n    return config\n  }\n\n  /**\n   * 验证数据映射配置\n   */\n  static validateMapping(mapping, chartType) {\n    const errors = []\n    \n    switch (chartType) {\n      case 'line':\n      case 'bar':\n        if (!mapping.xAxis) {\n          errors.push('X轴配置是必需的')\n        }\n        if (!mapping.yAxis) {\n          errors.push('Y轴配置是必需的')\n        }\n        if (mapping.yAxis && mapping.yAxis.type !== 'number') {\n          errors.push('Y轴必须是数值类型')\n        }\n        break\n      case 'pie':\n        if (!mapping.name) {\n          errors.push('名称配置是必需的')\n        }\n        if (!mapping.value) {\n          errors.push('数值配置是必需的')\n        }\n        if (mapping.value && mapping.value.type !== 'number') {\n          errors.push('数值必须是数值类型')\n        }\n        break\n      case 'scatter':\n        if (!mapping.xAxis) {\n          errors.push('X轴配置是必需的')\n        }\n        if (!mapping.yAxis) {\n          errors.push('Y轴配置是必需的')\n        }\n        if (mapping.xAxis && mapping.xAxis.type !== 'number') {\n          errors.push('X轴必须是数值类型')\n        }\n        if (mapping.yAxis && mapping.yAxis.type !== 'number') {\n          errors.push('Y轴必须是数值类型')\n        }\n        break\n    }\n    \n    return errors\n  }\n\n  /**\n   * 生成图表历史记录\n   */\n  static generateChartHistory(config, mapping, chartType) {\n    return {\n      id: Date.now().toString(),\n      title: config.title.text,\n      type: chartType,\n      option: config,\n      mapping: mapping,\n      createdAt: new Date().toISOString(),\n      thumbnail: this.generateThumbnail(config)\n    }\n  }\n\n  /**\n   * 生成缩略图（简化版）\n   */\n  static generateThumbnail(config) {\n    // 这里可以实现缩略图生成逻辑\n    // 目前返回一个简化的配置\n    return {\n      ...config,\n      title: { ...config.title, textStyle: { fontSize: 12 } },\n      grid: { left: '5%', right: '5%', top: '15%', bottom: '10%' }\n    }\n  }\n\n  /**\n   * 智能推荐图表类型\n   */\n  static recommendChartType(mapping) {\n    const hasNumericX = mapping.xAxis && mapping.xAxis.type === 'number'\n    const hasNumericY = mapping.yAxis && mapping.yAxis.type === 'number'\n    const hasCategoricalX = mapping.xAxis && mapping.xAxis.type === 'string'\n    const hasName = mapping.name && mapping.name.type === 'string'\n    const hasValue = mapping.value && mapping.value.type === 'number'\n    \n    // 饼图推荐\n    if (hasName && hasValue && !mapping.xAxis && !mapping.yAxis) {\n      return 'pie'\n    }\n    \n    // 散点图推荐\n    if (hasNumericX && hasNumericY) {\n      return 'scatter'\n    }\n    \n    // 柱状图推荐\n    if (hasCategoricalX && hasNumericY) {\n      return 'bar'\n    }\n    \n    // 默认推荐折线图\n    return 'line'\n  }\n}\n\n// 模拟文件数据服务\nexport class MockFileDataService {\n  static generateMockData(file) {\n    // 根据文件类型生成模拟数据\n    const mockData = []\n    const rowCount = Math.floor(Math.random() * 50) + 20\n    \n    for (let i = 0; i < rowCount; i++) {\n      mockData.push({\n        '姓名': `用户${i + 1}`,\n        '年龄': Math.floor(Math.random() * 40) + 20,\n        '城市': ['北京', '上海', '广州', '深圳', '杭州'][Math.floor(Math.random() * 5)],\n        '薪资': Math.floor(Math.random() * 20000) + 5000,\n        '入职日期': new Date(2020 + Math.floor(Math.random() * 4), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString().split('T')[0]\n      })\n    }\n    \n    return mockData\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}