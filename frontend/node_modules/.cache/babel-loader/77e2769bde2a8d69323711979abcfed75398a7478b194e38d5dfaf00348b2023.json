{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed } from 'vue';\nexport default {\n  __name: 'ChartFilterConfig',\n  props: {\n    // 传入当前映射区配置对象（如 { xAxis, yAxis, series... }）\n    modelValue: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['apply-filter'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const filters = ref([]);\n    const logic = ref('AND');\n    const collapsed = ref(false);\n    const errorMsg = ref('');\n\n    // 动态收集所有已映射字段，去重\n    const availableFields = computed(() => {\n      const fields = [];\n      const used = new Set();\n      Object.values(props.modelValue).forEach(val => {\n        if (Array.isArray(val)) {\n          val.forEach(f => {\n            if (f && f.field && !used.has(f.field)) {\n              fields.push({\n                name: f.field,\n                label: f.field,\n                type: f.type || guessType(f),\n                // 优先用type\n                values: f.values\n              });\n              used.add(f.field);\n            }\n          });\n        } else if (val && typeof val === 'object' && val.field && !used.has(val.field)) {\n          fields.push({\n            name: val.field,\n            label: val.field,\n            type: val.type || guessType(val),\n            // 优先用type\n            values: val.values\n          });\n          used.add(val.field);\n        }\n      });\n      return fields;\n    });\n    function guessType(f) {\n      if (f.type) return f.type;\n      if (f.values) return 'category';\n      return 'number'; // 默认\n    }\n    function addFilter() {\n      // 默认选第一个字段并自动推断类型\n      const firstField = availableFields.value[0];\n      filters.value.push({\n        id: Date.now() + Math.random(),\n        field: firstField ? firstField.name : '',\n        operator: '',\n        value: '',\n        valueMin: '',\n        valueMax: '',\n        type: firstField ? firstField.type : ''\n      });\n    }\n    function removeFilter(idx) {\n      filters.value.splice(idx, 1);\n    }\n    function getOperators(type) {\n      if (type === 'number') {\n        return [{\n          value: 'eq',\n          label: '='\n        }, {\n          value: 'ne',\n          label: '≠'\n        }, {\n          value: 'gt',\n          label: '>'\n        }, {\n          value: 'lt',\n          label: '<'\n        }, {\n          value: 'ge',\n          label: '≥'\n        }, {\n          value: 'le',\n          label: '≤'\n        }, {\n          value: 'range',\n          label: '区间'\n        }];\n      } else if (type === 'category') {\n        return [{\n          value: 'eq',\n          label: '='\n        }, {\n          value: 'ne',\n          label: '≠'\n        }, {\n          value: 'in',\n          label: '包含'\n        }];\n      } else {\n        return [{\n          value: 'eq',\n          label: '='\n        }, {\n          value: 'ne',\n          label: '≠'\n        }];\n      }\n    }\n    function getCategoryValues(field) {\n      const f = availableFields.value.find(f => f.name === field);\n      return f && f.values ? f.values : [];\n    }\n    function onFieldChange(filter) {\n      const f = availableFields.value.find(fld => fld.name === filter.field);\n      filter.type = f ? f.type : ''; // 直接用type\n      filter.operator = '';\n      filter.value = '';\n      filter.valueMin = '';\n      filter.valueMax = '';\n    }\n    function validate() {\n      for (const f of filters.value) {\n        if (!f.field || !f.operator || f.operator !== 'range' && (f.value === '' || f.value === undefined)) {\n          errorMsg.value = '请完整填写所有筛选条件';\n          return false;\n        }\n        if (f.type === 'number' && f.operator === 'range' && (f.valueMin === '' || f.valueMax === '')) {\n          errorMsg.value = '区间筛选需填写最小值和最大值';\n          return false;\n        }\n      }\n      errorMsg.value = '';\n      return true;\n    }\n    function applyFilters() {\n      if (!validate()) return;\n      emit('apply-filter', {\n        logic: logic.value,\n        filters: filters.value.map(f => ({\n          field: f.field,\n          operator: f.operator,\n          value: f.operator === 'range' ? [f.valueMin, f.valueMax] : f.value,\n          type: f.type\n        }))\n      });\n    }\n    const __returned__ = {\n      props,\n      emit,\n      filters,\n      logic,\n      collapsed,\n      errorMsg,\n      availableFields,\n      guessType,\n      addFilter,\n      removeFilter,\n      getOperators,\n      getCategoryValues,\n      onFieldChange,\n      validate,\n      applyFilters,\n      ref,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","props","__props","emit","__emit","filters","logic","collapsed","errorMsg","availableFields","fields","used","Set","Object","values","modelValue","forEach","val","Array","isArray","f","field","has","push","name","label","type","guessType","add","addFilter","firstField","value","id","Date","now","Math","random","operator","valueMin","valueMax","removeFilter","idx","splice","getOperators","getCategoryValues","find","onFieldChange","filter","fld","validate","undefined","applyFilters","map"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/ChartFilterConfig.vue"],"sourcesContent":["<template>\n<div class=\"filter-panel\" :class=\"{ collapsed }\">\n    <div class=\"filter-panel-header\">\n        <span>Data Filtering</span>\n        <div class=\"logic-toggle\">\n            <label :class=\"{active: logic==='AND'}\" @click=\"logic='AND'\">AND</label>\n            <label :class=\"{active: logic==='OR'}\" @click=\"logic='OR'\">OR</label>\n        </div>\n        <button class=\"collapse-btn\" @click=\"collapsed=!collapsed\">{{ collapsed ? '▼' : '▲' }}</button>\n    </div>\n    <transition name=\"fade\">\n        <div v-show=\"!collapsed\">\n            <div v-for=\"(filter, idx) in filters\" :key=\"filter.id\" class=\"filter-row\">\n            <select v-model=\"filter.field\" @change=\"onFieldChange(filter)\">\n                <option value=\"\" disabled>字段</option>\n                <option v-for=\"f in availableFields\" :key=\"f.name\" :value=\"f.name\">{{ f.label || f.name }}</option>\n            </select>\n            <select v-model=\"filter.operator\">\n                <option v-for=\"op in getOperators(filter.type)\" :key=\"op.value\" :value=\"op.value\">{{ op.label }}</option>\n            </select>\n            <template v-if=\"filter.type==='number'\">\n                <input v-if=\"filter.operator!=='range'\" type=\"number\" v-model=\"filter.value\" placeholder=\"数值\" />\n                <span v-else>\n                <input type=\"number\" v-model=\"filter.valueMin\" placeholder=\"最小值\" style=\"width:60px;\" /> -\n                <input type=\"number\" v-model=\"filter.valueMax\" placeholder=\"最大值\" style=\"width:60px;\" />\n                </span>\n            </template>\n            <template v-else-if=\"filter.type==='category'\">\n                <select v-if=\"filter.operator==='in'\" v-model=\"filter.value\" multiple style=\"min-width:80px;\">\n                <option v-for=\"v in getCategoryValues(filter.field)\" :key=\"v\" :value=\"v\">{{ v }}</option>\n                </select>\n                <select v-else v-model=\"filter.value\">\n                <option v-for=\"v in getCategoryValues(filter.field)\" :key=\"v\" :value=\"v\">{{ v }}</option>\n                </select>\n            </template>\n            <input v-else v-model=\"filter.value\" placeholder=\"值\" />\n            <button class=\"remove-btn\" @click=\"removeFilter(idx)\">×</button>\n            </div>\n            <div class=\"filter-panel-actions\">\n            <button @click=\"addFilter\">+ 添加条件</button>\n            <button class=\"apply-btn\" @click=\"applyFilters\">应用</button>\n            </div>\n            <div v-if=\"errorMsg\" class=\"filter-error\">{{ errorMsg }}</div>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, computed, defineProps, defineEmits } from 'vue'\nconst props = defineProps({\n    // 传入当前映射区配置对象（如 { xAxis, yAxis, series... }）\n    modelValue: { type: Object, required: true }\n})\nconst emit = defineEmits(['apply-filter'])\n\nconst filters = ref([])\nconst logic = ref('AND')\nconst collapsed = ref(false)\nconst errorMsg = ref('')\n\n// 动态收集所有已映射字段，去重\nconst availableFields = computed(() => {\n    const fields = []\n    const used = new Set()\n    Object.values(props.modelValue).forEach(val => {\n        if (Array.isArray(val)) {\n        val.forEach(f => {\n            if (f && f.field && !used.has(f.field)) {\n            fields.push({\n                name: f.field,\n                label: f.field,\n                type: f.type || guessType(f), // 优先用type\n                values: f.values\n            })\n            used.add(f.field)\n            }\n        })\n        } else if (val && typeof val === 'object' && val.field && !used.has(val.field)) {\n        fields.push({\n            name: val.field,\n            label: val.field,\n            type: val.type || guessType(val), // 优先用type\n            values: val.values\n        })\n        used.add(val.field)\n        }\n    })\n    return fields\n})\n\nfunction guessType (f) {\n    if (f.type) return f.type\n    if (f.values) return 'category'\n    return 'number' // 默认\n}\n\nfunction addFilter () {\n    // 默认选第一个字段并自动推断类型\n    const firstField = availableFields.value[0]\n    filters.value.push({\n        id: Date.now() + Math.random(),\n        field: firstField ? firstField.name : '',\n        operator: '',\n        value: '',\n        valueMin: '',\n        valueMax: '',\n        type: firstField ? firstField.type : ''\n    })\n}\nfunction removeFilter (idx) {\n    filters.value.splice(idx, 1)\n}\nfunction getOperators (type) {\n    if (type === 'number') {\n        return [\n        { value: 'eq', label: '=' },\n        { value: 'ne', label: '≠' },\n        { value: 'gt', label: '>' },\n        { value: 'lt', label: '<' },\n        { value: 'ge', label: '≥' },\n        { value: 'le', label: '≤' },\n        { value: 'range', label: '区间' }\n        ]\n    } else if (type === 'category') {\n        return [\n        { value: 'eq', label: '=' },\n        { value: 'ne', label: '≠' },\n        { value: 'in', label: '包含' }\n        ]\n    } else {\n        return [\n        { value: 'eq', label: '=' },\n        { value: 'ne', label: '≠' }\n        ]\n    }\n}\nfunction getCategoryValues (field) {\n    const f = availableFields.value.find(f => f.name === field)\n    return f && f.values ? f.values : []\n}\nfunction onFieldChange (filter) {\n    const f = availableFields.value.find(fld => fld.name === filter.field)\n    filter.type = f ? f.type : '' // 直接用type\n    filter.operator = ''\n    filter.value = ''\n    filter.valueMin = ''\n    filter.valueMax = ''\n}\nfunction validate () {\n    for (const f of filters.value) {\n        if (!f.field || !f.operator || (f.operator !== 'range' && (f.value === '' || f.value === undefined))) {\n        errorMsg.value = '请完整填写所有筛选条件'; return false\n        }\n        if (f.type === 'number' && f.operator === 'range' && (f.valueMin === '' || f.valueMax === '')) {\n        errorMsg.value = '区间筛选需填写最小值和最大值'; return false\n        }\n    }\n    errorMsg.value = ''\n    return true\n}\nfunction applyFilters () {\n    if (!validate()) return\n    emit('apply-filter', {\n        logic: logic.value,\n        filters: filters.value.map(f => ({\n        field: f.field,\n        operator: f.operator,\n        value: f.operator === 'range' ? [f.valueMin, f.valueMax] : f.value,\n        type: f.type\n        }))\n    })\n}\n</script>\n\n<style scoped>\n.filter-panel {\n    border: 1px solid #e0e0e0;\n    border-radius: 6px;\n    background: #fafbfc;\n    padding: 10px 12px 8px 12px;\n    margin-bottom: 12px;\n    min-width: 260px;\n    max-width: 420px;\n    font-size: 14px;\n}\n.filter-panel.collapsed { min-height: 0; max-height: 36px; overflow: hidden; padding-bottom: 0; }\n.filter-panel-header {\n    display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px;\n}\n.logic-toggle label {\n    margin: 0 4px; padding: 2px 10px; border-radius: 4px; cursor: pointer; background: #f3f3f3; color: #666;\n}\n.logic-toggle label.active { background: #409EFF; color: #fff; }\n.collapse-btn { background: none; border: none; color: #888; cursor: pointer; font-size: 1.1em; margin-left: 8px; }\n.filter-row {\n    display: flex; align-items: center; gap: 8px; margin-bottom: 6px; background: #fff; border-radius: 5px; padding: 6px 4px;\n    box-shadow: 0 1px 2px rgba(0,0,0,0.03);\n}\n.filter-row select, .filter-row input {\n    font-size: 13px; padding: 2px 6px; border-radius: 4px; border: 1px solid #ccc;\n}\n.remove-btn { background: none; border: none; color: #c72d4e; font-size: 1.2em; cursor: pointer; margin-left: 2px; }\n.filter-panel-actions { display: flex; gap: 12px; margin-top: 10px; }\n.apply-btn { background: #409EFF; color: #fff; border: none; border-radius: 4px; padding: 4px 18px; cursor: pointer; }\n.filter-error { color: #c72d4e; margin-top: 6px; font-size: 13px; }\n.fade-enter-active, .fade-leave-active { transition: opacity 0.18s; }\n.fade-enter-from, .fade-leave-to { opacity: 0; }\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}