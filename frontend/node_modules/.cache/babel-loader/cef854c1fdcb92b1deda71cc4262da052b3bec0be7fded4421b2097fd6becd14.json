{"ast":null,"code":"import { chartTypes, chartIcons } from '../assets/JS/chartIcons.js';\nimport { chartTooltips } from '../assets/JS/chartTooltips.js';\nimport { watch, ref } from 'vue';\nexport default {\n  __name: 'ChartIcon',\n  props: {\n    types: {\n      type: Array,\n      default: () => chartTypes\n    },\n    modelValue: {\n      type: String,\n      default: ''\n    }\n  },\n  emits: ['select', 'update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const selectedType = ref(props.modelValue);\n    const showTooltip = ref(false);\n    const tooltipVisible = ref(false);\n    const hoveredType = ref('');\n    let hoverTimer = null;\n    function renderButton(type) {\n      const icon = chartIcons[type] || '';\n      return `${icon}<span class=\"label\">${type}</span>`;\n    }\n    function handleClick(type) {\n      selectedType.value = type;\n      emit('select', type);\n      emit('update:modelValue', type);\n    }\n    function startHover(type) {\n      hoveredType.value = type;\n\n      // Clear any existing timer\n      if (hoverTimer) {\n        clearTimeout(hoverTimer);\n      }\n\n      // Set timer for 1 second delay\n      hoverTimer = setTimeout(() => {\n        showTooltip.value = true;\n        // Add slight delay for smooth transition\n        setTimeout(() => {\n          tooltipVisible.value = true;\n        }, 10);\n      }, 1000);\n    }\n    function endHover() {\n      // Clear timer\n      if (hoverTimer) {\n        clearTimeout(hoverTimer);\n        hoverTimer = null;\n      }\n\n      // Hide tooltip\n      tooltipVisible.value = false;\n      setTimeout(() => {\n        showTooltip.value = false;\n        hoveredType.value = '';\n      }, 300);\n    }\n    function getTooltipData(type) {\n      return chartTooltips[type] || {\n        dataRequirements: [],\n        useCases: []\n      };\n    }\n    watch(() => props.modelValue, newValue => {\n      selectedType.value = newValue;\n    });\n    const __returned__ = {\n      props,\n      emit,\n      selectedType,\n      showTooltip,\n      tooltipVisible,\n      hoveredType,\n      get hoverTimer() {\n        return hoverTimer;\n      },\n      set hoverTimer(v) {\n        hoverTimer = v;\n      },\n      renderButton,\n      handleClick,\n      startHover,\n      endHover,\n      getTooltipData,\n      get chartTypes() {\n        return chartTypes;\n      },\n      get chartIcons() {\n        return chartIcons;\n      },\n      get chartTooltips() {\n        return chartTooltips;\n      },\n      watch,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["chartTypes","chartIcons","chartTooltips","watch","ref","props","__props","emit","__emit","selectedType","modelValue","showTooltip","tooltipVisible","hoveredType","hoverTimer","renderButton","type","icon","handleClick","value","startHover","clearTimeout","setTimeout","endHover","getTooltipData","dataRequirements","useCases","newValue"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/components/ChartIcon.vue"],"sourcesContent":["<template>\n    <div class=\"chart-type-panel\">\n        <div\n        v-for=\"type in types\"\n        :key=\"type\"\n        class=\"chart-btn-wrapper\"\n        @mouseenter=\"startHover(type)\"\n        @mouseleave=\"endHover\"\n        >\n            <button\n            class=\"sideBar-btn\"\n            :class=\"{ 'selected': selectedType === type }\"\n            v-html=\"renderButton(type)\"\n            @click=\"handleClick(type)\"\n            ></button>\n            <!-- Tooltip -->\n            <div\n            v-if=\"showTooltip && hoveredType === type\"\n            class=\"tooltip\"\n            :class=\"{ 'tooltip-visible': tooltipVisible }\"\n            >\n                <div class=\"tooltip-content\">\n                    <h4 class=\"tooltip-title\">{{ type }}</h4>\n                    <div class=\"tooltip-section\">\n                        <h5>Data Requirements:</h5>\n                        <div class=\"tooltip-tags\">\n                            <span \n                            v-for=\"req in getTooltipData(type).dataRequirements\"\n                            :key=\"req\"\n                            class=\"tooltip-tag requirement-tag\"\n                            >{{ req }}</span>\n                        </div>\n                    </div>\n                    <div class=\"tooltip-section\">\n                        <h5>Use Cases:</h5>\n                        <div class=\"tooltip-tags\">\n                            <span \n                            v-for=\"useCase in getTooltipData(type).useCases\" \n                            :key=\"useCase\"\n                            class=\"tooltip-tag usecase-tag\"\n                            >{{ useCase }}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script setup>\n/* eslint-disable */\nimport { chartTypes, chartIcons } from '../assets/JS/chartIcons.js'\nimport { chartTooltips } from '../assets/JS/chartTooltips.js'\nimport { watch, ref } from 'vue'\n\nconst props = defineProps({\n    types: {\n        type: Array,\n        default: () => chartTypes\n    },\n\n    modelValue: {\n        type: String,\n        default: ''\n    }\n})\n\nconst emit = defineEmits(['select', 'update:modelValue'])\n\nconst selectedType = ref(props.modelValue)\nconst showTooltip = ref(false)\nconst tooltipVisible = ref(false)\nconst hoveredType = ref('')\nlet hoverTimer = null\n\nfunction renderButton(type) {\n    const icon = chartIcons[type] || ''\n    return `${icon}<span class=\"label\">${type}</span>`\n}\n\nfunction handleClick(type) {\n    selectedType.value = type\n    emit('select', type)\n    emit('update:modelValue', type)\n}\n\nfunction startHover(type) {\n    hoveredType.value = type\n    \n    // Clear any existing timer\n    if (hoverTimer) {\n        clearTimeout(hoverTimer)\n    }\n    \n    // Set timer for 1 second delay\n    hoverTimer = setTimeout(() => {\n        showTooltip.value = true\n        // Add slight delay for smooth transition\n        setTimeout(() => {\n            tooltipVisible.value = true\n        }, 10)\n    }, 1000)\n}\n\nfunction endHover() {\n    // Clear timer\n    if (hoverTimer) {\n        clearTimeout(hoverTimer)\n        hoverTimer = null\n    }\n    \n    // Hide tooltip\n    tooltipVisible.value = false\n    setTimeout(() => {\n        showTooltip.value = false\n        hoveredType.value = ''\n    }, 300)\n}\n\nfunction getTooltipData(type) {\n    return chartTooltips[type] || { dataRequirements: [], useCases: [] }\n}\n\nwatch(() => props.modelValue, (newValue) => {\n    selectedType.value = newValue\n})\n</script>\n\n<style scoped>\n.chart-type-panel {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n.sideBar-btn {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    background: transparent;\n    border: none;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    color: var(--text-color);\n    padding: 6px 14px;\n    border-radius: 8px;\n    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s;\n    position: relative;\n    overflow: hidden;\n}\n.sideBar-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.6s;\n}\n.sideBar-btn:hover {\n    background-color: rgba(136, 133, 133, 0.1);\n    transform: translateY(-2px) scale(1.02);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 选中状态的样式 */\n.sideBar-btn.selected {\n    background: linear-gradient(135deg, #3b82f6, #6366f1);\n    color: white;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sideBar-btn.selected::before {\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n}\n\n.sideBar-btn.selected:hover {\n    background: linear-gradient(135deg, #2563eb, #5b21b6);\n    transform: translateY(-3px) scale(1.05);\n    box-shadow: 0 6px 16px rgba(59, 130, 246, 0.4);\n}\n\n.sideBar-btn.selected:hover::before {\n    left: 100%;\n}\n\n/* 点击动画 */\n.sideBar-btn:active {\n    transform: translateY(0) scale(0.98);\n    transition: all 0.1s ease;\n}\n\n.sideBar-btn.selected:active {\n    transform: translateY(-1px) scale(0.98);\n}\n.sideBar-btn svg {\n    fill: currentColor;\n    transition: all 0.3s ease;\n}\n.sideBar-btn.selected svg {\n    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));\n}\n.label {\n    white-space: nowrap;\n    transition: all 0.3s ease;\n}\n\n.sideBar-btn.selected .label {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n/* 选中状态的动画效果 */\n@keyframes selectedShine {\n    0% {\n        background-position: -100% 0;\n    }\n    100% {\n        background-position: 100% 0;\n    }\n}\n\n.sideBar-btn.selected:hover .chart-icon-svg {\n    transform: scale(1.1);\n    filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.3));\n}\n\n.sideBar-btn.selected:hover .label {\n    transform: translateX(2px);\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n</style>\n\n<style>\n.chart-icon-svg {\n    width: 1.6em;\n    height: 1.6em;\n    min-width: 24px;\n    min-height: 24px;\n    max-width: 32px;\n    max-height: 32px;\n    color: var(--text-color);\n    fill: currentColor;\n    vertical-align: middle;\n    display: inline-block;\n    transition: all 0.3s ease;\n}\n\n.sideBar-btn.selected .chart-icon-svg {\n    color: white;\n}\n</style>\n"],"mappings":"AAkDA,SAASA,UAAU,EAAEC,UAAU,QAAQ,4BAA2B;AAClE,SAASC,aAAa,QAAQ,+BAA8B;AAC5D,SAASC,KAAK,EAAEC,GAAG,QAAQ,KAAI;;;;;;;;;;;;;;;;;;;;IAH/B;IAKA,MAAMC,KAAK,GAAGC,OAAA;IAYd,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,YAAY,GAAGL,GAAG,CAACC,KAAK,CAACK,UAAU;IACzC,MAAMC,WAAW,GAAGP,GAAG,CAAC,KAAK;IAC7B,MAAMQ,cAAc,GAAGR,GAAG,CAAC,KAAK;IAChC,MAAMS,WAAW,GAAGT,GAAG,CAAC,EAAE;IAC1B,IAAIU,UAAU,GAAG,IAAG;IAEpB,SAASC,YAAYA,CAACC,IAAI,EAAE;MACxB,MAAMC,IAAI,GAAGhB,UAAU,CAACe,IAAI,CAAC,IAAI,EAAC;MAClC,OAAO,GAAGC,IAAI,uBAAuBD,IAAI,SAAQ;IACrD;IAEA,SAASE,WAAWA,CAACF,IAAI,EAAE;MACvBP,YAAY,CAACU,KAAK,GAAGH,IAAG;MACxBT,IAAI,CAAC,QAAQ,EAAES,IAAI;MACnBT,IAAI,CAAC,mBAAmB,EAAES,IAAI;IAClC;IAEA,SAASI,UAAUA,CAACJ,IAAI,EAAE;MACtBH,WAAW,CAACM,KAAK,GAAGH,IAAG;;MAEvB;MACA,IAAIF,UAAU,EAAE;QACZO,YAAY,CAACP,UAAU;MAC3B;;MAEA;MACAA,UAAU,GAAGQ,UAAU,CAAC,MAAM;QAC1BX,WAAW,CAACQ,KAAK,GAAG,IAAG;QACvB;QACAG,UAAU,CAAC,MAAM;UACbV,cAAc,CAACO,KAAK,GAAG,IAAG;QAC9B,CAAC,EAAE,EAAE;MACT,CAAC,EAAE,IAAI;IACX;IAEA,SAASI,QAAQA,CAAA,EAAG;MAChB;MACA,IAAIT,UAAU,EAAE;QACZO,YAAY,CAACP,UAAU;QACvBA,UAAU,GAAG,IAAG;MACpB;;MAEA;MACAF,cAAc,CAACO,KAAK,GAAG,KAAI;MAC3BG,UAAU,CAAC,MAAM;QACbX,WAAW,CAACQ,KAAK,GAAG,KAAI;QACxBN,WAAW,CAACM,KAAK,GAAG,EAAC;MACzB,CAAC,EAAE,GAAG;IACV;IAEA,SAASK,cAAcA,CAACR,IAAI,EAAE;MAC1B,OAAOd,aAAa,CAACc,IAAI,CAAC,IAAI;QAAES,gBAAgB,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG;IACvE;IAEAvB,KAAK,CAAC,MAAME,KAAK,CAACK,UAAU,EAAGiB,QAAQ,IAAK;MACxClB,YAAY,CAACU,KAAK,GAAGQ,QAAO;IAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}