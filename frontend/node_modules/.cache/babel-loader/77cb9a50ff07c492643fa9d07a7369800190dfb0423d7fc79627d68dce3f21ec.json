{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"top-bar\"\n};\nconst _hoisted_2 = {\n  class: \"nav-container\"\n};\nconst _hoisted_3 = {\n  class: \"nav-actions\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onMouseleave\"];\nconst _hoisted_6 = [\"onMouseenter\"];\nconst _hoisted_7 = {\n  class: \"dropdown-menu\"\n};\nconst _hoisted_8 = [\"onClick\"];\nimport { ref } from 'vue';\nexport default {\n  __name: 'TopBar',\n  props: {\n    actions: {\n      type: Array,\n      default: () => [{\n        type: 'button',\n        label: 'Home',\n        onClick: () => alert('Home clicked')\n      }, {\n        type: 'dropdown',\n        label: 'Settings',\n        options: [{\n          label: 'Profile',\n          onClick: () => alert('Profile clicked')\n        }, {\n          label: 'Logout',\n          onClick: () => alert('Logout clicked')\n        }]\n      }]\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const dropdownOpen = ref(null);\n    function openDropdown(index) {\n      dropdownOpen.value = index;\n    }\n    function closeDropdown(index) {\n      if (dropdownOpen.value === index) dropdownOpen.value = null;\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"header\", _hoisted_1, [_createElementVNode(\"nav\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n        class: \"logo dynamic-gradient-text\"\n      }, \"Fuck Charts\", -1)), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.actions, (item, idx) => {\n        return _openBlock(), _createElementBlock(_Fragment, {\n          key: idx\n        }, [item.type === 'button' ? (_openBlock(), _createElementBlock(\"button\", {\n          key: 0,\n          class: \"nav-btn\",\n          onClick: item.onClick\n        }, _toDisplayString(item.label), 9, _hoisted_4)) : item.type === 'dropdown' ? (_openBlock(), _createElementBlock(\"div\", {\n          key: 1,\n          class: \"dropdown\",\n          onMouseleave: $event => closeDropdown(idx)\n        }, [_createElementVNode(\"button\", {\n          class: \"nav-btn\",\n          onMouseenter: $event => openDropdown(idx)\n        }, [_createTextVNode(_toDisplayString(item.label) + \" \", 1), _cache[0] || (_cache[0] = _createElementVNode(\"span\", {\n          class: \"arrow\"\n        }, \"▼\", -1))], 40, _hoisted_6), _withDirectives(_createElementVNode(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.options, (option, i) => {\n          return _openBlock(), _createElementBlock(\"li\", {\n            key: i,\n            onClick: option.onClick,\n            class: \"dropdown-item\"\n          }, _toDisplayString(option.label), 9, _hoisted_8);\n        }), 128))], 512), [[_vShow, dropdownOpen.value === idx]])], 40, _hoisted_5)) : _createCommentVNode(\"\", true)], 64);\n      }), 128))])])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","props","__props","dropdownOpen","openDropdown","index","value","closeDropdown"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/components/TopBar.vue"],"sourcesContent":["<!-- Top Bar -->\n<template>\n    <header class=\"top-bar\">\n        <nav class=\"nav-container\">\n        <div class=\"logo dynamic-gradient-text\">Fuck Charts</div>\n\n        <div class=\"nav-actions\">\n        <template v-for=\"(item, idx) in actions\" :key=\"idx\">\n            <!-- 普通按钮 -->\n            <button\n            v-if=\"item.type === 'button'\"\n            class=\"nav-btn\"\n            @click=\"item.onClick\"\n            >\n            {{ item.label }}\n            </button>\n\n            <!-- 下拉菜单 -->\n            <div v-else-if=\"item.type === 'dropdown'\" class=\"dropdown\" @mouseleave=\"closeDropdown(idx)\">\n            <button class=\"nav-btn\" @mouseenter=\"openDropdown(idx)\">\n                {{ item.label }} <span class=\"arrow\">▼</span>\n            </button>\n            <ul v-show=\"dropdownOpen === idx\" class=\"dropdown-menu\">\n                <li\n                v-for=\"(option, i) in item.options\"\n                :key=\"i\"\n                @click=\"option.onClick\"\n                class=\"dropdown-item\"\n                >\n                {{ option.label }}\n                </li>\n            </ul>\n            </div>\n        </template>\n        </div>\n    </nav>\n    </header>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\n\nconst props = defineProps({\n    actions: {\n        type: Array,\n        default: () => [\n            { type: 'button', label: 'Home', onClick: () => alert('Home clicked') },\n            {\n            type: 'dropdown',\n            label: 'Settings',\n            options: [\n                { label: 'Profile', onClick: () => alert('Profile clicked') },\n                { label: 'Logout', onClick: () => alert('Logout clicked') },\n            ],\n            },\n        ],\n    },\n    })\n\n    const dropdownOpen = ref(null)\n\n    function openDropdown(index) {\n    dropdownOpen.value = index\n    }\n    function closeDropdown(index) {\n    if (dropdownOpen.value === index) dropdownOpen.value = null\n    }\n</script>"],"mappings":";;;;;;;;;;;;;;;;;AAwCA,SAASA,GAAG,QAAQ,KAAI;;;;;;;;;;;;;;;;;;;;;;;;IAExB,MAAMC,KAAK,GAAGC,OAAA;IAiBV,MAAMC,YAAY,GAAGH,GAAG,CAAC,IAAI;IAE7B,SAASI,YAAYA,CAACC,KAAK,EAAE;MAC7BF,YAAY,CAACG,KAAK,GAAGD,KAAI;IACzB;IACA,SAASE,aAAaA,CAACF,KAAK,EAAE;MAC9B,IAAIF,YAAY,CAACG,KAAK,KAAKD,KAAK,EAAEF,YAAY,CAACG,KAAK,GAAG,IAAG;IAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}