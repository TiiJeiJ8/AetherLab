{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// chartDataValidator.js\n// 图表数据映射与维度校验模块，可扩展支持多种图表类型\n\n/* eslint-disable */\n\n/**\n * 校验字段类型是否符合图表要求\n * @param {Object} mappingConfig - 当前图表的字段映射配置（如xAxis/yAxis/series等）\n * @param {Object} chartConfig - 用户当前的字段映射结果\n * @param {String} chartType - 图表类型\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateFieldTypes(mappingConfig, chartConfig, chartType) {\n  // 可扩展：不同图表类型的字段类型要求\n  const typeRules = {\n    Line: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer']\n    },\n    Bar: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer']\n    },\n    Pie: {\n      xAxis: ['string', 'category'],\n      yAxis: ['number', 'integer']\n    }\n    // ...可扩展更多类型\n  };\n  const rules = typeRules[chartType] || {};\n  for (const key in mappingConfig) {\n    const item = mappingConfig[key];\n    const val = chartConfig[key];\n    if (!item || !item.required) continue;\n    if (Array.isArray(val)) {\n      for (const v of val) {\n        if (rules[key] && !rules[key].includes(v.type)) {\n          return {\n            valid: false,\n            message: `${item.label}字段类型应为: ${rules[key].join(', ')}`\n          };\n        }\n      }\n    } else if (val && val.type && rules[key] && !rules[key].includes(val.type)) {\n      return {\n        valid: false,\n        message: `${item.label}字段类型应为: ${rules[key].join(', ')}`\n      };\n    }\n  }\n  return {\n    valid: true,\n    message: ''\n  };\n}\n\n/**\n * 校验数据维度（如X轴数据量 >= Y轴数据量等）\n * @param {Object} chartConfig - 字段映射\n * @param {Object} fileDataMap - 全部文件数据Map（key为文件名，value为数据数组）\n * @param {String} chartType - 图表类型\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateDataDimensions(chartConfig, fileDataMap, chartType) {\n  // 以X/Y轴为例，支持多文件\n  function getFieldRows(field) {\n    if (!field) return 0;\n    if (Array.isArray(field)) {\n      // 多选，取所有字段的最大行数\n      return Math.max(...field.map(f => fileDataMap[f.file]?.length || 0), 0);\n    } else if (field && field.file) {\n      return fileDataMap[field.file]?.length || 0;\n    }\n    return 0;\n  }\n  const xRows = getFieldRows(chartConfig.xAxis);\n  const yRows = getFieldRows(chartConfig.yAxis);\n  // 可扩展：不同图表类型的维度规则\n  if (['Line', 'Bar'].includes(chartType)) {\n    if (xRows < yRows) {\n      return {\n        valid: false,\n        message: 'X轴数据行数应大于等于Y轴数据行数'\n      };\n    }\n  }\n  // ...Pie等其他类型规则\n  return {\n    valid: true,\n    message: ''\n  };\n}\n\n/**\n * 综合校验\n */\nexport function validateChartMapping(mappingConfig, chartConfig, chartType, fileDataMap) {\n  const typeRes = validateFieldTypes(mappingConfig, chartConfig, chartType);\n  if (!typeRes.valid) return typeRes;\n  const dimRes = validateDataDimensions(chartConfig, fileDataMap, chartType);\n  if (!dimRes.valid) return dimRes;\n  return {\n    valid: true,\n    message: ''\n  };\n}","map":{"version":3,"names":["validateFieldTypes","mappingConfig","chartConfig","chartType","typeRules","Line","xAxis","yAxis","Bar","Pie","rules","key","item","val","required","Array","isArray","v","includes","type","valid","message","label","join","validateDataDimensions","fileDataMap","getFieldRows","field","Math","max","map","f","file","length","xRows","yRows","validateChartMapping","typeRes","dimRes"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/utils/chartDataValidator.js"],"sourcesContent":["// chartDataValidator.js\n// 图表数据映射与维度校验模块，可扩展支持多种图表类型\n\n/* eslint-disable */\n\n/**\n * 校验字段类型是否符合图表要求\n * @param {Object} mappingConfig - 当前图表的字段映射配置（如xAxis/yAxis/series等）\n * @param {Object} chartConfig - 用户当前的字段映射结果\n * @param {String} chartType - 图表类型\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateFieldTypes(mappingConfig, chartConfig, chartType) {\n    // 可扩展：不同图表类型的字段类型要求\n    const typeRules = {\n        Line: {\n            xAxis: ['string', 'category', 'date'],\n            yAxis: ['number', 'integer'],\n        },\n        Bar: {\n            xAxis: ['string', 'category', 'date'],\n            yAxis: ['number', 'integer'],\n        },\n        Pie: {\n            xAxis: ['string', 'category'],\n            yAxis: ['number', 'integer'],\n        },\n        // ...可扩展更多类型\n    }\n    const rules = typeRules[chartType] || {}\n    for (const key in mappingConfig) {\n        const item = mappingConfig[key]\n        const val = chartConfig[key]\n        if (!item || !item.required) continue\n        if (Array.isArray(val)) {\n            for (const v of val) {\n                if (rules[key] && !rules[key].includes(v.type)) {\n                    return { valid: false, message: `${item.label}字段类型应为: ${rules[key].join(', ')}` }\n                }\n            }\n        } else if (val && val.type && rules[key] && !rules[key].includes(val.type)) {\n            return { valid: false, message: `${item.label}字段类型应为: ${rules[key].join(', ')}` }\n        }\n    }\n    return { valid: true, message: '' }\n}\n\n/**\n * 校验数据维度（如X轴数据量 >= Y轴数据量等）\n * @param {Object} chartConfig - 字段映射\n * @param {Object} fileDataMap - 全部文件数据Map（key为文件名，value为数据数组）\n * @param {String} chartType - 图表类型\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateDataDimensions(chartConfig, fileDataMap, chartType) {\n    // 以X/Y轴为例，支持多文件\n    function getFieldRows(field) {\n        if (!field) return 0\n        if (Array.isArray(field)) {\n            // 多选，取所有字段的最大行数\n            return Math.max(...field.map(f => (fileDataMap[f.file]?.length || 0)), 0)\n        } else if (field && field.file) {\n            return fileDataMap[field.file]?.length || 0\n        }\n        return 0\n    }\n    const xRows = getFieldRows(chartConfig.xAxis)\n    const yRows = getFieldRows(chartConfig.yAxis)\n    // 可扩展：不同图表类型的维度规则\n    if (['Line', 'Bar'].includes(chartType)) {\n        if (xRows < yRows) {\n            return { valid: false, message: 'X轴数据行数应大于等于Y轴数据行数' }\n        }\n    }\n    // ...Pie等其他类型规则\n    return { valid: true, message: '' }\n}\n\n/**\n * 综合校验\n */\nexport function validateChartMapping(mappingConfig, chartConfig, chartType, fileDataMap) {\n    const typeRes = validateFieldTypes(mappingConfig, chartConfig, chartType)\n    if (!typeRes.valid) return typeRes\n    const dimRes = validateDataDimensions(chartConfig, fileDataMap, chartType)\n    if (!dimRes.valid) return dimRes\n    return { valid: true, message: '' }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}