{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\n/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n */\n\nconst API_BASE_URL = '/api';\n\n// 前端缓存管理\nclass FileCache {\n  constructor() {\n    this.cacheKey = 'fuck-charts-file-cache';\n    this.filesKey = 'fuck-charts-cached-files';\n    this.maxCacheSize = 100 * 1024 * 1024; // 100MB\n    this.isBackendConnected = false;\n    this.checkBackendConnection();\n  }\n\n  // 检查后端连接状态\n  async checkBackendConnection() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        timeout: 3000\n      });\n      this.isBackendConnected = response.ok;\n    } catch (error) {\n      this.isBackendConnected = false;\n    }\n    return this.isBackendConnected;\n  }\n\n  // 获取缓存的文件列表\n  getCachedFiles() {\n    const cached = localStorage.getItem(this.cacheKey);\n    return cached ? JSON.parse(cached) : [];\n  }\n\n  // 保存文件到缓存\n  async saveToCacheFromFile(file) {\n    try {\n      const fileData = {\n        id: `local_${Date.now()}_${Math.random()}`,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        lastModified: file.lastModified,\n        uploadTime: new Date().toISOString(),\n        status: 'local'\n      };\n\n      // 检查缓存大小\n      const currentFiles = this.getCachedFiles();\n      const totalSize = currentFiles.reduce((sum, f) => sum + f.size, 0);\n      if (totalSize + file.size > this.maxCacheSize) {\n        throw new Error('Cache size limit exceeded');\n      }\n\n      // 读取文件内容\n      const fileContent = await this.readFileContent(file);\n      fileData.content = fileContent;\n\n      // 保存到缓存\n      currentFiles.push(fileData);\n      localStorage.setItem(this.cacheKey, JSON.stringify(currentFiles));\n\n      // 保存文件二进制数据到 IndexedDB\n      await this.saveFileToIndexedDB(fileData.id, file);\n      return fileData;\n    } catch (error) {\n      console.error('缓存文件失败:', error);\n      throw error;\n    }\n  }\n\n  // 读取文件内容预览\n  async readFileContent(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const content = e.target.result;\n          if (file.name.endsWith('.csv')) {\n            resolve(this.parseCSVPreview(content));\n          } else if (file.name.match(/\\.(xlsx|xls)$/)) {\n            resolve({\n              type: 'excel',\n              preview: 'Excel file cached'\n            });\n          } else {\n            resolve({\n              type: 'unknown',\n              preview: 'File cached'\n            });\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  // 解析CSV预览数据\n  parseCSVPreview(content) {\n    const lines = content.split('\\n').filter(line => line.trim());\n    const headers = lines[0].split(',').map(h => h.trim());\n    const preview = lines.slice(1, 6).map(line => {\n      const values = line.split(',').map(v => v.trim());\n      const row = {};\n      headers.forEach((header, index) => {\n        row[header] = values[index] || '';\n      });\n      return row;\n    });\n    return {\n      type: 'csv',\n      headers,\n      preview,\n      totalRows: lines.length - 1\n    };\n  }\n\n  // 保存文件到 IndexedDB\n  async saveFileToIndexedDB(fileId, file) {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('FuckChartsFileDB', 1);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['files'], 'readwrite');\n        const store = transaction.objectStore('files');\n        const fileData = {\n          id: fileId,\n          file: file,\n          timestamp: Date.now()\n        };\n        const addRequest = store.add(fileData);\n        addRequest.onsuccess = () => resolve();\n        addRequest.onerror = () => reject(addRequest.error);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains('files')) {\n          db.createObjectStore('files', {\n            keyPath: 'id'\n          });\n        }\n      };\n    });\n  }\n\n  // 从 IndexedDB 获取文件\n  async getFileFromIndexedDB(fileId) {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('FuckChartsFileDB', 1);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['files'], 'readonly');\n        const store = transaction.objectStore('files');\n        const getRequest = store.get(fileId);\n        getRequest.onsuccess = () => resolve(getRequest.result?.file);\n        getRequest.onerror = () => reject(getRequest.error);\n      };\n    });\n  }\n\n  // 从缓存中删除文件\n  async removeFromCache(fileId) {\n    const currentFiles = this.getCachedFiles();\n    const filteredFiles = currentFiles.filter(f => f.id !== fileId);\n    localStorage.setItem(this.cacheKey, JSON.stringify(filteredFiles));\n\n    // 同时从 IndexedDB 删除\n    return new Promise(resolve => {\n      const request = indexedDB.open('FuckChartsFileDB', 1);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['files'], 'readwrite');\n        const store = transaction.objectStore('files');\n        store.delete(fileId);\n        resolve();\n      };\n    });\n  }\n\n  // 获取缓存大小\n  getCacheSize() {\n    const files = this.getCachedFiles();\n    return files.reduce((sum, f) => sum + f.size, 0);\n  }\n\n  // 清空缓存\n  async clearCache() {\n    localStorage.removeItem(this.cacheKey);\n    return new Promise(resolve => {\n      const request = indexedDB.open('FuckChartsFileDB', 1);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['files'], 'readwrite');\n        const store = transaction.objectStore('files');\n        store.clear();\n        resolve();\n      };\n    });\n  }\n}\n\n// 创建缓存实例\nconst fileCache = new FileCache();\n\n/**\n * 上传文件到服务器\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('文件上传失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`);\n    if (!response.ok) {\n      throw new Error('Failed to get preview');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('获取文件预览失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 从服务器删除文件\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Delete failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('删除文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newName\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Rename failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('重命名文件失败:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","FileCache","constructor","cacheKey","filesKey","maxCacheSize","isBackendConnected","checkBackendConnection","response","fetch","method","timeout","ok","error","getCachedFiles","cached","localStorage","getItem","JSON","parse","saveToCacheFromFile","file","fileData","id","Date","now","Math","random","name","size","type","lastModified","uploadTime","toISOString","status","currentFiles","totalSize","reduce","sum","f","Error","fileContent","readFileContent","content","push","setItem","stringify","saveFileToIndexedDB","console","Promise","resolve","reject","reader","FileReader","onload","e","target","result","endsWith","parseCSVPreview","match","preview","onerror","readAsText","lines","split","filter","line","trim","headers","map","h","slice","values","v","row","forEach","header","index","totalRows","length","fileId","request","indexedDB","open","onsuccess","db","transaction","store","objectStore","timestamp","addRequest","add","onupgradeneeded","event","objectStoreNames","contains","createObjectStore","keyPath","getFileFromIndexedDB","getRequest","get","removeFromCache","filteredFiles","delete","getCacheSize","files","clearCache","removeItem","clear","fileCache","uploadFile","formData","FormData","append","body","json","getFilePreview","deleteFile","renameFile","newName"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n */\n\nconst API_BASE_URL = '/api'\n\n// 前端缓存管理\nclass FileCache {\n    constructor() {\n        this.cacheKey = 'fuck-charts-file-cache'\n        this.filesKey = 'fuck-charts-cached-files'\n        this.maxCacheSize = 100 * 1024 * 1024 // 100MB\n        this.isBackendConnected = false\n        this.checkBackendConnection()\n    }\n\n    // 检查后端连接状态\n    async checkBackendConnection() {\n        try {\n            const response = await fetch(`${API_BASE_URL}/health`, {\n                method: 'GET',\n                timeout: 3000\n            })\n            this.isBackendConnected = response.ok\n        } catch (error) {\n            this.isBackendConnected = false\n        }\n        return this.isBackendConnected\n    }\n\n    // 获取缓存的文件列表\n    getCachedFiles() {\n        const cached = localStorage.getItem(this.cacheKey)\n        return cached ? JSON.parse(cached) : []\n    }\n\n    // 保存文件到缓存\n    async saveToCacheFromFile(file) {\n        try {\n            const fileData = {\n                id: `local_${Date.now()}_${Math.random()}`,\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified,\n                uploadTime: new Date().toISOString(),\n                status: 'local'\n            }\n\n            // 检查缓存大小\n            const currentFiles = this.getCachedFiles()\n            const totalSize = currentFiles.reduce((sum, f) => sum + f.size, 0)\n            \n            if (totalSize + file.size > this.maxCacheSize) {\n                throw new Error('Cache size limit exceeded')\n            }\n\n            // 读取文件内容\n            const fileContent = await this.readFileContent(file)\n            fileData.content = fileContent\n            \n            // 保存到缓存\n            currentFiles.push(fileData)\n            localStorage.setItem(this.cacheKey, JSON.stringify(currentFiles))\n            \n            // 保存文件二进制数据到 IndexedDB\n            await this.saveFileToIndexedDB(fileData.id, file)\n            \n            return fileData\n        } catch (error) {\n            console.error('缓存文件失败:', error)\n            throw error\n        }\n    }\n\n    // 读取文件内容预览\n    async readFileContent(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader()\n            reader.onload = (e) => {\n                try {\n                    const content = e.target.result\n                    if (file.name.endsWith('.csv')) {\n                        resolve(this.parseCSVPreview(content))\n                    } else if (file.name.match(/\\.(xlsx|xls)$/)) {\n                        resolve({ type: 'excel', preview: 'Excel file cached' })\n                    } else {\n                        resolve({ type: 'unknown', preview: 'File cached' })\n                    }\n                } catch (error) {\n                    reject(error)\n                }\n            }\n            reader.onerror = reject\n            reader.readAsText(file)\n        })\n    }\n\n    // 解析CSV预览数据\n    parseCSVPreview(content) {\n        const lines = content.split('\\n').filter(line => line.trim())\n        const headers = lines[0].split(',').map(h => h.trim())\n        const preview = lines.slice(1, 6).map(line => {\n            const values = line.split(',').map(v => v.trim())\n            const row = {}\n            headers.forEach((header, index) => {\n                row[header] = values[index] || ''\n            })\n            return row\n        })\n        return { type: 'csv', headers, preview, totalRows: lines.length - 1 }\n    }\n\n    // 保存文件到 IndexedDB\n    async saveFileToIndexedDB(fileId, file) {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open('FuckChartsFileDB', 1)\n            \n            request.onerror = () => reject(request.error)\n            request.onsuccess = () => {\n                const db = request.result\n                const transaction = db.transaction(['files'], 'readwrite')\n                const store = transaction.objectStore('files')\n                \n                const fileData = {\n                    id: fileId,\n                    file: file,\n                    timestamp: Date.now()\n                }\n                \n                const addRequest = store.add(fileData)\n                addRequest.onsuccess = () => resolve()\n                addRequest.onerror = () => reject(addRequest.error)\n            }\n            \n            request.onupgradeneeded = (event) => {\n                const db = event.target.result\n                if (!db.objectStoreNames.contains('files')) {\n                    db.createObjectStore('files', { keyPath: 'id' })\n                }\n            }\n        })\n    }\n\n    // 从 IndexedDB 获取文件\n    async getFileFromIndexedDB(fileId) {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open('FuckChartsFileDB', 1)\n            \n            request.onerror = () => reject(request.error)\n            request.onsuccess = () => {\n                const db = request.result\n                const transaction = db.transaction(['files'], 'readonly')\n                const store = transaction.objectStore('files')\n                const getRequest = store.get(fileId)\n                \n                getRequest.onsuccess = () => resolve(getRequest.result?.file)\n                getRequest.onerror = () => reject(getRequest.error)\n            }\n        })\n    }\n\n    // 从缓存中删除文件\n    async removeFromCache(fileId) {\n        const currentFiles = this.getCachedFiles()\n        const filteredFiles = currentFiles.filter(f => f.id !== fileId)\n        localStorage.setItem(this.cacheKey, JSON.stringify(filteredFiles))\n        \n        // 同时从 IndexedDB 删除\n        return new Promise((resolve) => {\n            const request = indexedDB.open('FuckChartsFileDB', 1)\n            request.onsuccess = () => {\n                const db = request.result\n                const transaction = db.transaction(['files'], 'readwrite')\n                const store = transaction.objectStore('files')\n                store.delete(fileId)\n                resolve()\n            }\n        })\n    }\n\n    // 获取缓存大小\n    getCacheSize() {\n        const files = this.getCachedFiles()\n        return files.reduce((sum, f) => sum + f.size, 0)\n    }\n\n    // 清空缓存\n    async clearCache() {\n        localStorage.removeItem(this.cacheKey)\n        return new Promise((resolve) => {\n            const request = indexedDB.open('FuckChartsFileDB', 1)\n            request.onsuccess = () => {\n                const db = request.result\n                const transaction = db.transaction(['files'], 'readwrite')\n                const store = transaction.objectStore('files')\n                store.clear()\n                resolve()\n            }\n        })\n    }\n}\n\n// 创建缓存实例\nconst fileCache = new FileCache()\n\n/**\n * 上传文件到服务器\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n    const formData = new FormData()\n    formData.append('file', file)\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/upload`, {\n            method: 'POST',\n            body: formData\n        })\n\n        if (!response.ok) {\n            throw new Error('Upload failed')\n        }\n\n        return await response.json()\n    } catch (error) {\n        console.error('文件上传失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`)\n        if (!response.ok) {\n            throw new Error('Failed to get preview')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('获取文件预览失败:', error)\n        throw error\n    }\n}\n\n/**\n * 从服务器删除文件\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n            method: 'DELETE'\n        })\n        if (!response.ok) {\n            throw new Error('Delete failed')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('删除文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ name: newName })\n        })\n        if (!response.ok) {\n            throw new Error('Rename failed')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('重命名文件失败:', error)\n        throw error\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}