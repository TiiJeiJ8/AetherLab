{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-type-panel\"\n};\nconst _hoisted_2 = [\"onMouseenter\"];\nconst _hoisted_3 = [\"innerHTML\", \"onClick\"];\nconst _hoisted_4 = {\n  class: \"tooltip-content\"\n};\nconst _hoisted_5 = {\n  class: \"tooltip-title\"\n};\nconst _hoisted_6 = {\n  class: \"tooltip-section\"\n};\nconst _hoisted_7 = {\n  class: \"tooltip-tags\"\n};\nconst _hoisted_8 = {\n  class: \"tooltip-section\"\n};\nconst _hoisted_9 = {\n  class: \"tooltip-tags\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.types, type => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: type,\n      class: \"chart-btn-wrapper\",\n      onMouseenter: $event => $setup.startHover(type),\n      onMouseleave: $setup.endHover\n    }, [_createElementVNode(\"button\", {\n      class: _normalizeClass([\"sideBar-btn\", {\n        'selected': $setup.selectedType === type\n      }]),\n      innerHTML: $setup.renderButton(type),\n      onClick: $event => $setup.handleClick(type)\n    }, null, 10 /* CLASS, PROPS */, _hoisted_3), _createCommentVNode(\" Tooltip \"), $setup.showTooltip && $setup.hoveredType === type ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: _normalizeClass([\"tooltip\", {\n        'tooltip-visible': $setup.tooltipVisible\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h4\", _hoisted_5, _toDisplayString(type), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, [_cache[0] || (_cache[0] = _createElementVNode(\"h5\", null, \"Data Requirements:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getTooltipData(type).dataRequirements, req => {\n      return _openBlock(), _createElementBlock(\"span\", {\n        key: req,\n        class: \"tooltip-tag requirement-tag\"\n      }, _toDisplayString(req), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_8, [_cache[1] || (_cache[1] = _createElementVNode(\"h5\", null, \"Use Cases:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getTooltipData(type).useCases, useCase => {\n      return _openBlock(), _createElementBlock(\"span\", {\n        key: useCase,\n        class: \"tooltip-tag usecase-tag\"\n      }, _toDisplayString(useCase), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])])])], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 40 /* PROPS, NEED_HYDRATION */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","$props","types","type","key","onMouseenter","$event","$setup","startHover","onMouseleave","endHover","_createElementVNode","_normalizeClass","selectedType","innerHTML","renderButton","onClick","handleClick","_hoisted_3","_createCommentVNode","showTooltip","hoveredType","tooltipVisible","_hoisted_4","_hoisted_5","_toDisplayString","_hoisted_6","_hoisted_7","getTooltipData","dataRequirements","req","_hoisted_8","_hoisted_9","useCases","useCase","_hoisted_2"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\newArchitecture\\frontend_vue_design\\src\\components\\ChartIcon.vue"],"sourcesContent":["<template>\n    <div class=\"chart-type-panel\">\n        <div \n        v-for=\"type in types\"\n        :key=\"type\"\n        class=\"chart-btn-wrapper\"\n        @mouseenter=\"startHover(type)\"\n        @mouseleave=\"endHover\"\n        >\n            <button\n            class=\"sideBar-btn\"\n            :class=\"{ 'selected': selectedType === type }\"\n            v-html=\"renderButton(type)\"\n            @click=\"handleClick(type)\"\n            ></button>\n            \n            <!-- Tooltip -->\n            <div \n            v-if=\"showTooltip && hoveredType === type\"\n            class=\"tooltip\"\n            :class=\"{ 'tooltip-visible': tooltipVisible }\"\n            >\n                <div class=\"tooltip-content\">\n                    <h4 class=\"tooltip-title\">{{ type }}</h4>\n                    <div class=\"tooltip-section\">\n                        <h5>Data Requirements:</h5>\n                        <div class=\"tooltip-tags\">\n                            <span \n                            v-for=\"req in getTooltipData(type).dataRequirements\" \n                            :key=\"req\"\n                            class=\"tooltip-tag requirement-tag\"\n                            >{{ req }}</span>\n                        </div>\n                    </div>\n                    <div class=\"tooltip-section\">\n                        <h5>Use Cases:</h5>\n                        <div class=\"tooltip-tags\">\n                            <span \n                            v-for=\"useCase in getTooltipData(type).useCases\" \n                            :key=\"useCase\"\n                            class=\"tooltip-tag usecase-tag\"\n                            >{{ useCase }}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script setup>\n/* eslint-disable */\nimport { chartTypes, chartIcons } from '../assets/JS/chartIcons.js'\nimport { chartTooltips } from '../assets/JS/chartTooltips.js'\nimport { watch, ref } from 'vue'\n\nconst props = defineProps({\n    types: {\n        type: Array,\n        default: () => chartTypes\n    },\n\n    modelValue: {\n        type: String,\n        default: ''\n    }\n})\n\nconst emit = defineEmits(['select', 'update:modelValue'])\n\nconst selectedType = ref(props.modelValue)\nconst showTooltip = ref(false)\nconst tooltipVisible = ref(false)\nconst hoveredType = ref('')\nlet hoverTimer = null\n\nfunction renderButton(type) {\n    const icon = chartIcons[type] || ''\n    return `${icon}<span class=\"label\">${type}</span>`\n}\n\nfunction handleClick(type) {\n    selectedType.value = type\n    emit('select', type)\n    emit('update:modelValue', type)\n}\n\nfunction startHover(type) {\n    hoveredType.value = type\n    \n    // Clear any existing timer\n    if (hoverTimer) {\n        clearTimeout(hoverTimer)\n    }\n    \n    // Set timer for 1 second delay\n    hoverTimer = setTimeout(() => {\n        showTooltip.value = true\n        // Add slight delay for smooth transition\n        setTimeout(() => {\n            tooltipVisible.value = true\n        }, 10)\n    }, 1000)\n}\n\nfunction endHover() {\n    // Clear timer\n    if (hoverTimer) {\n        clearTimeout(hoverTimer)\n        hoverTimer = null\n    }\n    \n    // Hide tooltip\n    tooltipVisible.value = false\n    setTimeout(() => {\n        showTooltip.value = false\n        hoveredType.value = ''\n    }, 300)\n}\n\nfunction getTooltipData(type) {\n    return chartTooltips[type] || { dataRequirements: [], useCases: [] }\n}\n\nwatch(() => props.modelValue, (newValue) => {\n    selectedType.value = newValue\n})\n</script>\n\n<style scoped>\n.chart-type-panel {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n.sideBar-btn {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    background: transparent;\n    border: none;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    color: var(--text-color);\n    padding: 6px 14px;\n    border-radius: 8px;\n    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s;\n    position: relative;\n    overflow: hidden;\n}\n.sideBar-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.6s;\n}\n.sideBar-btn:hover {\n    background-color: rgba(136, 133, 133, 0.1);\n    transform: translateY(-2px) scale(1.02);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 选中状态的样式 */\n.sideBar-btn.selected {\n    background: linear-gradient(135deg, #3b82f6, #6366f1);\n    color: white;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sideBar-btn.selected::before {\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n}\n\n.sideBar-btn.selected:hover {\n    background: linear-gradient(135deg, #2563eb, #5b21b6);\n    transform: translateY(-3px) scale(1.05);\n    box-shadow: 0 6px 16px rgba(59, 130, 246, 0.4);\n}\n\n.sideBar-btn.selected:hover::before {\n    left: 100%;\n}\n\n/* 点击动画 */\n.sideBar-btn:active {\n    transform: translateY(0) scale(0.98);\n    transition: all 0.1s ease;\n}\n\n.sideBar-btn.selected:active {\n    transform: translateY(-1px) scale(0.98);\n}\n.sideBar-btn svg {\n    fill: currentColor;\n    transition: all 0.3s ease;\n}\n.sideBar-btn.selected svg {\n    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));\n}\n.label {\n    white-space: nowrap;\n    transition: all 0.3s ease;\n}\n\n.sideBar-btn.selected .label {\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n}\n\n/* 选中状态的动画效果 */\n@keyframes selectedShine {\n    0% {\n        background-position: -100% 0;\n    }\n    100% {\n        background-position: 100% 0;\n    }\n}\n\n.sideBar-btn.selected:hover .chart-icon-svg {\n    transform: scale(1.1);\n    filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.3));\n}\n\n.sideBar-btn.selected:hover .label {\n    transform: translateX(2px);\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n</style>\n\n<style>\n.chart-icon-svg {\n    width: 1.6em;\n    height: 1.6em;\n    min-width: 24px;\n    min-height: 24px;\n    max-width: 32px;\n    max-height: 32px;\n    color: var(--text-color);\n    fill: currentColor;\n    vertical-align: middle;\n    display: inline-block;\n    transition: all 0.3s ease;\n}\n\n.sideBar-btn.selected .chart-icon-svg {\n    color: white;\n}\n</style>\n"],"mappings":";;EACSA,KAAK,EAAC;AAAkB;mBADjC;mBAAA;;EAsBqBA,KAAK,EAAC;AAAiB;;EACpBA,KAAK,EAAC;AAAe;;EACpBA,KAAK,EAAC;AAAiB;;EAEnBA,KAAK,EAAC;AAAc;;EAQxBA,KAAK,EAAC;AAAiB;;EAEnBA,KAAK,EAAC;AAAc;;uBAnC7CC,mBAAA,CA8CM,OA9CNC,UA8CM,I,kBA7CFD,mBAAA,CA4CME,SAAA,QA9CdC,WAAA,CAGuBC,MAAA,CAAAC,KAAK,EAAbC,IAAI;yBADXN,mBAAA,CA4CM;MA1CLO,GAAG,EAAED,IAAI;MACVP,KAAK,EAAC,mBAAmB;MACxBS,YAAU,EAAAC,MAAA,IAAEC,MAAA,CAAAC,UAAU,CAACL,IAAI;MAC3BM,YAAU,EAAEF,MAAA,CAAAG;QAETC,mBAAA,CAKU;MAJVf,KAAK,EAVjBgB,eAAA,EAUkB,aAAa;QAAA,YACGL,MAAA,CAAAM,YAAY,KAAKV;MAAI;MAC3CW,SAA2B,EAAnBP,MAAA,CAAAQ,YAAY,CAACZ,IAAI;MACxBa,OAAK,EAAAV,MAAA,IAAEC,MAAA,CAAAU,WAAW,CAACd,IAAI;oCAbpCe,UAAA,GAgBYC,mBAAA,aAAgB,EAEVZ,MAAA,CAAAa,WAAW,IAAIb,MAAA,CAAAc,WAAW,KAAKlB,IAAI,I,cADzCN,mBAAA,CA4BM;MA7ClBO,GAAA;MAmBYR,KAAK,EAnBjBgB,eAAA,EAmBkB,SAAS;QAAA,mBACcL,MAAA,CAAAe;MAAc;QAEvCX,mBAAA,CAsBM,OAtBNY,UAsBM,GArBFZ,mBAAA,CAAyC,MAAzCa,UAAyC,EAAAC,gBAAA,CAAZtB,IAAI,kBACjCQ,mBAAA,CASM,OATNe,UASM,G,0BARFf,mBAAA,CAA2B,YAAvB,oBAAkB,sBACtBA,mBAAA,CAMM,OANNgB,UAMM,I,kBALF9B,mBAAA,CAIiBE,SAAA,QA/B7CC,WAAA,CA4B0CO,MAAA,CAAAqB,cAAc,CAACzB,IAAI,EAAE0B,gBAAgB,EAA5CC,GAAG;2BADVjC,mBAAA,CAIiB;QAFhBO,GAAG,EAAE0B,GAAG;QACTlC,KAAK,EAAC;0BACFkC,GAAG;wCAGfnB,mBAAA,CASM,OATNoB,UASM,G,0BARFpB,mBAAA,CAAmB,YAAf,YAAU,sBACdA,mBAAA,CAMM,OANNqB,UAMM,I,kBALFnC,mBAAA,CAIqBE,SAAA,QAzCjDC,WAAA,CAsC8CO,MAAA,CAAAqB,cAAc,CAACzB,IAAI,EAAE8B,QAAQ,EAAxCC,OAAO;2BADdrC,mBAAA,CAIqB;QAFpBO,GAAG,EAAE8B,OAAO;QACbtC,KAAK,EAAC;0BACFsC,OAAO;6DAzCvCf,mBAAA,e,kCAAAgB,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}