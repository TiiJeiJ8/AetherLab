{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// utils/mappingValidator.js\n// 用于校验拖拽映射时的数据列维度和业务规则\n\n/* eslint-disable */\n\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file, length }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String }\n */\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求，并返回该列数据\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String, columnData: Array }\n */\nexport function validateMappingDimension({\n  column,\n  target,\n  currentConfig,\n  fileDataMap,\n  chartType\n}) {\n  // 获取当前X、Y轴已选字段的行数\n  function getFieldLength(fieldObj) {\n    b;\n    if (!fieldObj || !fieldObj.field || !fieldObj.file) return 0;\n    const fileRows = fileDataMap[fieldObj.file] || [];\n    return fileRows.length;\n  }\n\n  // 获取某列的全部数据\n  function getColumnData(fieldObj) {\n    if (!fieldObj || !fieldObj.field || !fieldObj.file) return [];\n    const fileRows = fileDataMap[fieldObj.file] || [];\n    // 支持对象数组或对象\n    return fileRows.map(row => row[fieldObj.field]);\n  }\n\n  // 取当前映射的X、Y轴（支持多选）\n  const xAxis = currentConfig.xAxis;\n  const yAxis = currentConfig.yAxis;\n  let xLen = Array.isArray(xAxis) ? Math.max(...xAxis.map(getFieldLength), 0) : getFieldLength(xAxis);\n  let yLen = Array.isArray(yAxis) ? Math.max(...yAxis.map(getFieldLength), 0) : getFieldLength(yAxis);\n\n  // 拖入的列的行数和数据\n  const dragLen = fileDataMap[column.file]?.length || 0;\n  const columnData = fileDataMap[column.file]?.map(row => row[column.name]) || [];\n\n  // 针对不同图表类型和目标区，制定规则\n  if (target === 'xAxis') {\n    // 只有y轴有数据时才校验\n    if (yLen > 0 && dragLen < yLen) {\n      return {\n        valid: false,\n        message: 'X轴数据行数不能小于Y轴',\n        columnData\n      };\n    }\n  }\n  if (target === 'yAxis') {\n    if (xLen > 0 && dragLen > xLen) {\n      return {\n        valid: false,\n        message: 'Y轴数据行数不能大于X轴',\n        columnData\n      };\n    }\n  }\n  // 其他图表类型可扩展\n  // if (chartType === 'pie') {...}\n\n  // 通过\n  return {\n    valid: true,\n    message: '',\n    columnData\n  };\n}","map":{"version":3,"names":["validateMappingDimension","column","target","currentConfig","fileDataMap","chartType","getFieldLength","fieldObj","b","field","file","fileRows","length","getColumnData","map","row","xAxis","yAxis","xLen","Array","isArray","Math","max","yLen","dragLen","columnData","name","valid","message"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/utils/mappingValidator.js"],"sourcesContent":["// utils/mappingValidator.js\n// 用于校验拖拽映射时的数据列维度和业务规则\n\n/* eslint-disable */\n\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file, length }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String }\n */\n/**\n * 校验拖拽的数据列是否符合目标映射区的要求，并返回该列数据\n * @param {Object} params\n * @param {Object} params.column - 拖拽的数据列对象 { name, type, file }\n * @param {String} params.target - 目标映射区 key，如 'xAxis', 'yAxis', 'series'\n * @param {Object} params.currentConfig - 当前的映射配置对象 chartConfig\n * @param {Object} params.fileDataMap - 全局文件数据映射（fileName => data array）\n * @param {String} params.chartType - 当前图表类型\n * @returns {Object} { valid: Boolean, message: String, columnData: Array }\n */\nexport function validateMappingDimension({ column, target, currentConfig, fileDataMap, chartType }) {\n    // 获取当前X、Y轴已选字段的行数\n    function getFieldLength(fieldObj) {b\n        if (!fieldObj || !fieldObj.field || !fieldObj.file) return 0;\n        const fileRows = fileDataMap[fieldObj.file] || [];\n        return fileRows.length;\n    }\n\n    // 获取某列的全部数据\n    function getColumnData(fieldObj) {\n        if (!fieldObj || !fieldObj.field || !fieldObj.file) return [];\n        const fileRows = fileDataMap[fieldObj.file] || [];\n        // 支持对象数组或对象\n        return fileRows.map(row => row[fieldObj.field]);\n    }\n\n    // 取当前映射的X、Y轴（支持多选）\n    const xAxis = currentConfig.xAxis;\n    const yAxis = currentConfig.yAxis;\n    let xLen = Array.isArray(xAxis) ? Math.max(...xAxis.map(getFieldLength), 0) : getFieldLength(xAxis);\n    let yLen = Array.isArray(yAxis) ? Math.max(...yAxis.map(getFieldLength), 0) : getFieldLength(yAxis);\n\n    // 拖入的列的行数和数据\n    const dragLen = fileDataMap[column.file]?.length || 0;\n    const columnData = fileDataMap[column.file]?.map(row => row[column.name]) || [];\n\n    // 针对不同图表类型和目标区，制定规则\n    if (target === 'xAxis') {\n        // 只有y轴有数据时才校验\n        if (yLen > 0 && dragLen < yLen) {\n            return { valid: false, message: 'X轴数据行数不能小于Y轴', columnData };\n        }\n    }\n    if (target === 'yAxis') {\n        if (xLen > 0 && dragLen > xLen) {\n            return { valid: false, message: 'Y轴数据行数不能大于X轴', columnData };\n        }\n    }\n    // 其他图表类型可扩展\n    // if (chartType === 'pie') {...}\n\n    // 通过\n    return { valid: true, message: '', columnData };\n}\n"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,wBAAwBA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC,aAAa;EAAEC,WAAW;EAAEC;AAAU,CAAC,EAAE;EAChG;EACA,SAASC,cAAcA,CAACC,QAAQ,EAAE;IAACC,CAAC;IAChC,IAAI,CAACD,QAAQ,IAAI,CAACA,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE,OAAO,CAAC;IAC5D,MAAMC,QAAQ,GAAGP,WAAW,CAACG,QAAQ,CAACG,IAAI,CAAC,IAAI,EAAE;IACjD,OAAOC,QAAQ,CAACC,MAAM;EAC1B;;EAEA;EACA,SAASC,aAAaA,CAACN,QAAQ,EAAE;IAC7B,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE,OAAO,EAAE;IAC7D,MAAMC,QAAQ,GAAGP,WAAW,CAACG,QAAQ,CAACG,IAAI,CAAC,IAAI,EAAE;IACjD;IACA,OAAOC,QAAQ,CAACG,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACR,QAAQ,CAACE,KAAK,CAAC,CAAC;EACnD;;EAEA;EACA,MAAMO,KAAK,GAAGb,aAAa,CAACa,KAAK;EACjC,MAAMC,KAAK,GAAGd,aAAa,CAACc,KAAK;EACjC,IAAIC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGK,IAAI,CAACC,GAAG,CAAC,GAAGN,KAAK,CAACF,GAAG,CAACR,cAAc,CAAC,EAAE,CAAC,CAAC,GAAGA,cAAc,CAACU,KAAK,CAAC;EACnG,IAAIO,IAAI,GAAGJ,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGI,IAAI,CAACC,GAAG,CAAC,GAAGL,KAAK,CAACH,GAAG,CAACR,cAAc,CAAC,EAAE,CAAC,CAAC,GAAGA,cAAc,CAACW,KAAK,CAAC;;EAEnG;EACA,MAAMO,OAAO,GAAGpB,WAAW,CAACH,MAAM,CAACS,IAAI,CAAC,EAAEE,MAAM,IAAI,CAAC;EACrD,MAAMa,UAAU,GAAGrB,WAAW,CAACH,MAAM,CAACS,IAAI,CAAC,EAAEI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACd,MAAM,CAACyB,IAAI,CAAC,CAAC,IAAI,EAAE;;EAE/E;EACA,IAAIxB,MAAM,KAAK,OAAO,EAAE;IACpB;IACA,IAAIqB,IAAI,GAAG,CAAC,IAAIC,OAAO,GAAGD,IAAI,EAAE;MAC5B,OAAO;QAAEI,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,cAAc;QAAEH;MAAW,CAAC;IAChE;EACJ;EACA,IAAIvB,MAAM,KAAK,OAAO,EAAE;IACpB,IAAIgB,IAAI,GAAG,CAAC,IAAIM,OAAO,GAAGN,IAAI,EAAE;MAC5B,OAAO;QAAES,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,cAAc;QAAEH;MAAW,CAAC;IAChE;EACJ;EACA;EACA;;EAEA;EACA,OAAO;IAAEE,KAAK,EAAE,IAAI;IAAEC,OAAO,EAAE,EAAE;IAAEH;EAAW,CAAC;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}