{"ast":null,"code":"// mappingValidator.js\n// 拖拽数据映射时的类型和维度校验模块\n\n/**\n * 校验拖拽到映射区的数据列是否符合要求\n * @param {Object} params\n * @param {Object} params.column 拖入的数据列对象 { name, type, file }\n * @param {string} params.target 目标映射区（如 'xAxis', 'yAxis', 'series'）\n * @param {string} params.chartType 当前图表类型\n * @param {Object} params.chartConfig 当前已选的映射配置\n * @param {Object} params.fileDataMap 全局数据源（fileName: rows[]）\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateMappingDrop({\n  column,\n  target,\n  chartType,\n  chartConfig,\n  fileDataMap\n}) {\n  // 1. 类型校验（可根据图表类型和target灵活扩展）\n  const typeRules = {\n    line: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer']\n    },\n    bar: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer']\n    },\n    pie: {\n      xAxis: ['string', 'category'],\n      yAxis: ['number', 'integer']\n    }\n    // ...可扩展更多类型\n  };\n  const typeRule = (typeRules[chartType?.toLowerCase()] || {})[target];\n  if (typeRule && !typeRule.includes(column.type)) {\n    return {\n      valid: false,\n      message: `Column \"${column.name}\" type (${column.type}) is not allowed for ${target} in ${chartType} chart.`\n    };\n  }\n\n  // 2. 维度校验（如X轴行数 >= Y轴行数）\n  // 仅在xAxis/yAxis都已选时校验\n  if ((target === 'xAxis' || target === 'yAxis') && chartConfig.xAxis && chartConfig.yAxis) {\n    // 获取x/y对应的file和field\n    const x = target === 'xAxis' ? column : chartConfig.xAxis;\n    const y = target === 'yAxis' ? column : chartConfig.yAxis;\n    // 支持多选（数组）\n    const xFields = Array.isArray(x) ? x : [x];\n    const yFields = Array.isArray(y) ? y : [y];\n    // 取所有涉及文件的最大行数\n    const getRowCount = fields => {\n      let max = 0;\n      for (const f of fields) {\n        if (!f.file || !fileDataMap || !fileDataMap[f.file]) continue;\n        const rows = fileDataMap[f.file];\n        if (Array.isArray(rows) && rows.length > max) max = rows.length;\n      }\n      return max;\n    };\n    const xRows = getRowCount(xFields);\n    const yRows = getRowCount(yFields);\n    if (xRows < yRows) {\n      return {\n        valid: false,\n        message: `X轴数据行数（${xRows}）不能小于Y轴数据行数（${yRows}）！`\n      };\n    }\n  }\n\n  // 3. 其他图表类型的特殊规则可在此扩展\n\n  return {\n    valid: true\n  };\n}","map":{"version":3,"names":["validateMappingDrop","column","target","chartType","chartConfig","fileDataMap","typeRules","line","xAxis","yAxis","bar","pie","typeRule","toLowerCase","includes","type","valid","message","name","x","y","xFields","Array","isArray","yFields","getRowCount","fields","max","f","file","rows","length","xRows","yRows"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/utils/mappingValidator.js"],"sourcesContent":["// mappingValidator.js\n// 拖拽数据映射时的类型和维度校验模块\n\n/**\n * 校验拖拽到映射区的数据列是否符合要求\n * @param {Object} params\n * @param {Object} params.column 拖入的数据列对象 { name, type, file }\n * @param {string} params.target 目标映射区（如 'xAxis', 'yAxis', 'series'）\n * @param {string} params.chartType 当前图表类型\n * @param {Object} params.chartConfig 当前已选的映射配置\n * @param {Object} params.fileDataMap 全局数据源（fileName: rows[]）\n * @returns {Object} { valid: boolean, message: string }\n */\nexport function validateMappingDrop({ column, target, chartType, chartConfig, fileDataMap }) {\n  // 1. 类型校验（可根据图表类型和target灵活扩展）\n  const typeRules = {\n    line: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer'],\n    },\n    bar: {\n      xAxis: ['string', 'category', 'date'],\n      yAxis: ['number', 'integer'],\n    },\n    pie: {\n      xAxis: ['string', 'category'],\n      yAxis: ['number', 'integer'],\n    },\n    // ...可扩展更多类型\n  }\n  const typeRule = (typeRules[chartType?.toLowerCase()] || {})[target]\n  if (typeRule && !typeRule.includes(column.type)) {\n    return {\n      valid: false,\n      message: `Column \"${column.name}\" type (${column.type}) is not allowed for ${target} in ${chartType} chart.`\n    }\n  }\n\n  // 2. 维度校验（如X轴行数 >= Y轴行数）\n  // 仅在xAxis/yAxis都已选时校验\n  if ((target === 'xAxis' || target === 'yAxis') && chartConfig.xAxis && chartConfig.yAxis) {\n    // 获取x/y对应的file和field\n    const x = target === 'xAxis' ? column : chartConfig.xAxis\n    const y = target === 'yAxis' ? column : chartConfig.yAxis\n    // 支持多选（数组）\n    const xFields = Array.isArray(x) ? x : [x]\n    const yFields = Array.isArray(y) ? y : [y]\n    // 取所有涉及文件的最大行数\n    const getRowCount = (fields) => {\n      let max = 0\n      for (const f of fields) {\n        if (!f.file || !fileDataMap || !fileDataMap[f.file]) continue\n        const rows = fileDataMap[f.file]\n        if (Array.isArray(rows) && rows.length > max) max = rows.length\n      }\n      return max\n    }\n    const xRows = getRowCount(xFields)\n    const yRows = getRowCount(yFields)\n    if (xRows < yRows) {\n      return {\n        valid: false,\n        message: `X轴数据行数（${xRows}）不能小于Y轴数据行数（${yRows}）！`\n      }\n    }\n  }\n\n  // 3. 其他图表类型的特殊规则可在此扩展\n\n  return { valid: true }\n}\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC,SAAS;EAAEC,WAAW;EAAEC;AAAY,CAAC,EAAE;EAC3F;EACA,MAAMC,SAAS,GAAG;IAChBC,IAAI,EAAE;MACJC,KAAK,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC;MACrCC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;IAC7B,CAAC;IACDC,GAAG,EAAE;MACHF,KAAK,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC;MACrCC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;IAC7B,CAAC;IACDE,GAAG,EAAE;MACHH,KAAK,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;MAC7BC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;IAC7B;IACA;EACF,CAAC;EACD,MAAMG,QAAQ,GAAG,CAACN,SAAS,CAACH,SAAS,EAAEU,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEX,MAAM,CAAC;EACpE,IAAIU,QAAQ,IAAI,CAACA,QAAQ,CAACE,QAAQ,CAACb,MAAM,CAACc,IAAI,CAAC,EAAE;IAC/C,OAAO;MACLC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,WAAWhB,MAAM,CAACiB,IAAI,WAAWjB,MAAM,CAACc,IAAI,wBAAwBb,MAAM,OAAOC,SAAS;IACrG,CAAC;EACH;;EAEA;EACA;EACA,IAAI,CAACD,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,OAAO,KAAKE,WAAW,CAACI,KAAK,IAAIJ,WAAW,CAACK,KAAK,EAAE;IACxF;IACA,MAAMU,CAAC,GAAGjB,MAAM,KAAK,OAAO,GAAGD,MAAM,GAAGG,WAAW,CAACI,KAAK;IACzD,MAAMY,CAAC,GAAGlB,MAAM,KAAK,OAAO,GAAGD,MAAM,GAAGG,WAAW,CAACK,KAAK;IACzD;IACA,MAAMY,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;IAC1C,MAAMK,OAAO,GAAGF,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;IAC1C;IACA,MAAMK,WAAW,GAAIC,MAAM,IAAK;MAC9B,IAAIC,GAAG,GAAG,CAAC;MACX,KAAK,MAAMC,CAAC,IAAIF,MAAM,EAAE;QACtB,IAAI,CAACE,CAAC,CAACC,IAAI,IAAI,CAACxB,WAAW,IAAI,CAACA,WAAW,CAACuB,CAAC,CAACC,IAAI,CAAC,EAAE;QACrD,MAAMC,IAAI,GAAGzB,WAAW,CAACuB,CAAC,CAACC,IAAI,CAAC;QAChC,IAAIP,KAAK,CAACC,OAAO,CAACO,IAAI,CAAC,IAAIA,IAAI,CAACC,MAAM,GAAGJ,GAAG,EAAEA,GAAG,GAAGG,IAAI,CAACC,MAAM;MACjE;MACA,OAAOJ,GAAG;IACZ,CAAC;IACD,MAAMK,KAAK,GAAGP,WAAW,CAACJ,OAAO,CAAC;IAClC,MAAMY,KAAK,GAAGR,WAAW,CAACD,OAAO,CAAC;IAClC,IAAIQ,KAAK,GAAGC,KAAK,EAAE;MACjB,OAAO;QACLjB,KAAK,EAAE,KAAK;QACZC,OAAO,EAAE,UAAUe,KAAK,eAAeC,KAAK;MAC9C,CAAC;IACH;EACF;;EAEA;;EAEA,OAAO;IAAEjB,KAAK,EAAE;EAAK,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}