{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"data-mapping-panel\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"drop-zones\"\n};\nconst _hoisted_4 = [\"onDrop\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"mapped-item\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 1,\n  class: \"placeholder\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h4\", null, _toDisplayString($props.selectedChartType || '未选择图表') + \" 配置\", 1 /* TEXT */), !$props.selectedChartType ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", null, \"请先从左侧选择一个图表类型。\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" 动态生成拖放区域 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dropZones, zone => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: zone.id,\n      class: \"drop-zone\"\n    }, [_createElementVNode(\"label\", null, _toDisplayString(zone.label), 1 /* TEXT */), _createElementVNode(\"div\", {\n      class: \"drop-area\",\n      onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n      onDrop: $event => $setup.onDrop(zone.id, $event)\n    }, [$setup.mappedData[zone.id] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createTextVNode(_toDisplayString($setup.mappedData[zone.id].file) + \": \" + _toDisplayString($setup.mappedData[zone.id].column) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeItem(zone.id)\n    }, \"×\", 8 /* PROPS */, _hoisted_6)])) : (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"拖拽列到此处\"))], 40 /* PROPS, NEED_HYDRATION */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))])), _createElementVNode(\"button\", {\n    onClick: $setup.generateChart,\n    disabled: !$setup.canGenerate\n  }, \"生成图表\", 8 /* PROPS */, _hoisted_8)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","selectedChartType","_hoisted_2","_cache","_hoisted_3","_createCommentVNode","_Fragment","_renderList","$setup","dropZones","zone","id","label","onDragover","_withModifiers","onDrop","$event","mappedData","_hoisted_5","_createTextVNode","file","column","onClick","removeItem","_hoisted_6","_hoisted_7","_hoisted_4","generateChart","disabled","canGenerate","_hoisted_8"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\newArchitecture\\frontend_vue_design\\src\\components\\DataMappingPanel.vue"],"sourcesContent":["<template>\n  <div class=\"data-mapping-panel\">\n    <h4>{{ selectedChartType || '未选择图表' }} 配置</h4>\n    <div v-if=\"!selectedChartType\">\n      <p>请先从左侧选择一个图表类型。</p>\n    </div>\n    <div v-else class=\"drop-zones\">\n      <!-- 动态生成拖放区域 -->\n      <div v-for=\"zone in dropZones\" :key=\"zone.id\" class=\"drop-zone\">\n        <label>{{ zone.label }}</label>\n        <div\n          class=\"drop-area\"\n          @dragover.prevent\n          @drop=\"onDrop(zone.id, $event)\"\n        >\n          <div v-if=\"mappedData[zone.id]\" class=\"mapped-item\">\n            {{ mappedData[zone.id].file }}: {{ mappedData[zone.id].column }}\n            <button @click=\"removeItem(zone.id)\">&times;</button>\n          </div>\n          <span v-else class=\"placeholder\">拖拽列到此处</span>\n        </div>\n      </div>\n    </div>\n    <button @click=\"generateChart\" :disabled=\"!canGenerate\">生成图表</button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from 'vue';\n\nconst props = defineProps({\n  selectedChartType: String,\n});\n\nconst emit = defineEmits(['update-chart']);\n\n// 根据图表类型动态生成拖放区域\nconst dropZones = computed(() => {\n  if (!props.selectedChartType) return [];\n  // 这里可以根据不同的图表类型返回不同的配置项\n  switch (props.selectedChartType) {\n    case 'bar':\n    case 'line':\n      return [\n        { id: 'xAxis', label: 'X轴' },\n        { id: 'yAxis', label: 'Y轴' },\n        { id: 'series', label: '系列 (可选)' },\n      ];\n    case 'pie':\n      return [\n        { id: 'name', label: '标签' },\n        { id: 'value', label: '值' },\n      ];\n    default:\n      return [{ id: 'data', label: '数据' }];\n  }\n});\n\nconst mappedData = ref({});\n\nwatch(() => props.selectedChartType, () => {\n  // 图表类型改变时清空已映射数据\n  mappedData.value = {};\n});\n\nfunction onDrop(zoneId, event) {\n  const data = JSON.parse(event.dataTransfer.getData('application/json'));\n  mappedData.value[zoneId] = {\n    file: data.fileName,\n    column: data.column,\n  };\n  console.log(`Dropped ${data.column} from ${data.fileName} into ${zoneId}`);\n}\n\nfunction removeItem(zoneId) {\n  mappedData.value[zoneId] = null;\n}\n\nconst canGenerate = computed(() => {\n  // 简单检查是否可以生成图表\n  return dropZones.value.some(zone => mappedData.value[zone.id] && !zone.label.includes('可选'));\n});\n\nfunction generateChart() {\n  // 在这里可以添加更复杂的逻辑来组合来自不同文件的数据\n  // 目前只是一个示例\n  console.log('Generating chart with:', mappedData.value);\n  // 触发事件，将配置好的图表信息传递给父组件\n  emit('update-chart', {\n    type: props.selectedChartType,\n    mapping: mappedData.value,\n  });\n}\n</script>\n\n<style scoped>\n.data-mapping-panel {\n  padding: 16px;\n  color: var(--text-color);\n}\n.drop-zones {\n  margin-top: 20px;\n}\n.drop-zone {\n  margin-bottom: 15px;\n}\n.drop-area {\n  border: 2px dashed #ccc;\n  padding: 10px;\n  min-height: 40px;\n  border-radius: 8px;\n  transition: background-color 0.2s;\n}\n.drop-area:hover {\n  background-color: rgba(136, 133, 133, 0.1);\n}\n.placeholder {\n  color: #888;\n  font-size: 0.9em;\n}\n.mapped-item {\n  background-color: #4a4a4a;\n  padding: 5px 10px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAoB;;EADjCC,GAAA;AAAA;;EAAAA,GAAA;EAMgBD,KAAK,EAAC;;mBANtB;;EAAAC,GAAA;EAe0CD,KAAK,EAAC;;mBAfhD;;EAAAC,GAAA;EAmBuBD,KAAK,EAAC;;mBAnB7B;;uBACEE,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,mBAAA,CAA8C,YAAAC,gBAAA,CAAvCC,MAAA,CAAAC,iBAAiB,eAAc,KAAG,iB,CAC7BD,MAAA,CAAAC,iBAAiB,I,cAA7BL,mBAAA,CAEM,OALVM,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAIML,mBAAA,CAAqB,WAAlB,gBAAc,oB,qBAEnBF,mBAAA,CAgBM,OAhBNQ,UAgBM,GAfJC,mBAAA,cAAiB,G,kBACjBT,mBAAA,CAaMU,SAAA,QArBZC,WAAA,CAQ0BC,MAAA,CAAAC,SAAS,EAAjBC,IAAI;yBAAhBd,mBAAA,CAaM;MAb0BD,GAAG,EAAEe,IAAI,CAACC,EAAE;MAAEjB,KAAK,EAAC;QAClDI,mBAAA,CAA+B,eAAAC,gBAAA,CAArBW,IAAI,CAACE,KAAK,kBACpBd,mBAAA,CAUM;MATJJ,KAAK,EAAC,WAAW;MAChBmB,UAAQ,EAAAV,MAAA,QAAAA,MAAA,MAZnBW,cAAA,CAYU,QAAiB;MAChBC,MAAI,EAAAC,MAAA,IAAER,MAAA,CAAAO,MAAM,CAACL,IAAI,CAACC,EAAE,EAAEK,MAAM;QAElBR,MAAA,CAAAS,UAAU,CAACP,IAAI,CAACC,EAAE,K,cAA7Bf,mBAAA,CAGM,OAHNsB,UAGM,GAlBhBC,gBAAA,CAAApB,gBAAA,CAgBeS,MAAA,CAAAS,UAAU,CAACP,IAAI,CAACC,EAAE,EAAES,IAAI,IAAG,IAAE,GAAArB,gBAAA,CAAGS,MAAA,CAAAS,UAAU,CAACP,IAAI,CAACC,EAAE,EAAEU,MAAM,IAAG,GAChE,iBAAAvB,mBAAA,CAAqD;MAA5CwB,OAAK,EAAAN,MAAA,IAAER,MAAA,CAAAe,UAAU,CAACb,IAAI,CAACC,EAAE;OAAG,GAAO,iBAjBxDa,UAAA,E,oBAmBU5B,mBAAA,CAA8C,QAA9C6B,UAA8C,EAAb,QAAM,G,kCAnBjDC,UAAA,E;qCAuBI5B,mBAAA,CAAqE;IAA5DwB,OAAK,EAAEd,MAAA,CAAAmB,aAAa;IAAGC,QAAQ,GAAGpB,MAAA,CAAAqB;KAAa,MAAI,iBAvBhEC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}