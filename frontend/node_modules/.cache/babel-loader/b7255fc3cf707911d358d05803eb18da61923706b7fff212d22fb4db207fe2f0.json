{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, vModelCheckbox as _vModelCheckbox, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"line-series-style-panel\"\n};\nconst _hoisted_2 = {\n  class: \"series-style-row\"\n};\nconst _hoisted_3 = [\"onUpdate:modelValue\"];\nconst _hoisted_4 = [\"onUpdate:modelValue\"];\nconst _hoisted_5 = [\"onUpdate:modelValue\"];\nconst _hoisted_6 = {\n  class: \"series-style-row\"\n};\nconst _hoisted_7 = [\"onUpdate:modelValue\"];\nconst _hoisted_8 = [\"onUpdate:modelValue\"];\nconst _hoisted_9 = [\"onUpdate:modelValue\"];\nconst _hoisted_10 = {\n  key: 1,\n  class: \"point-custom-list\"\n};\nconst _hoisted_11 = [\"onUpdate:modelValue\"];\nconst _hoisted_12 = [\"onUpdate:modelValue\"];\nimport { ref, watch, toRaw } from 'vue';\nexport default {\n  __name: 'LineSeriesStylePanel',\n  props: {\n    seriesCount: Number,\n    value: Array,\n    xData: Array,\n    yDataArr: Array\n  },\n  emits: ['update'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const localValue = ref([]);\n    watch(() => props.value, val => {\n      localValue.value = val ? JSON.parse(JSON.stringify(val)) : [];\n    }, {\n      immediate: true\n    });\n    watch(() => props.seriesCount, cnt => {\n      // 初始化每条折线的样式\n      if (!localValue.value || localValue.value.length !== cnt) {\n        localValue.value = Array.from({\n          length: cnt\n        }, (_, idx) => ({\n          lineColor: '#5470c6',\n          lineWidth: 2,\n          lineType: 'solid',\n          pointAll: true,\n          pointSymbol: 'circle',\n          pointColor: '#5470c6',\n          pointCustom: Array.from({\n            length: props.yDataArr?.[idx]?.length || 0\n          }, () => ({\n            symbol: 'circle',\n            color: '#5470c6'\n          }))\n        }));\n        emitChange();\n      }\n    }, {\n      immediate: true\n    });\n    function emitChange() {\n      emit('update', toRaw(localValue.value));\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.seriesCount, (series, idx) => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: idx,\n          class: \"series-style-block\"\n        }, [_createElementVNode(\"h5\", null, \"折线\" + _toDisplayString(idx + 1) + \" 样式\", 1), _createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"label\", null, \"折线颜色：\", -1)), _withDirectives(_createElementVNode(\"input\", {\n          type: \"color\",\n          \"onUpdate:modelValue\": $event => localValue.value[idx].lineColor = $event,\n          onInput: emitChange\n        }, null, 40, _hoisted_3), [[_vModelText, localValue.value[idx].lineColor]]), _cache[2] || (_cache[2] = _createElementVNode(\"label\", null, \"线宽：\", -1)), _withDirectives(_createElementVNode(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"10\",\n          \"onUpdate:modelValue\": $event => localValue.value[idx].lineWidth = $event,\n          onInput: emitChange,\n          style: {\n            \"width\": \"60px\"\n          }\n        }, null, 40, _hoisted_4), [[_vModelText, localValue.value[idx].lineWidth, void 0, {\n          number: true\n        }]]), _cache[3] || (_cache[3] = _createElementVNode(\"label\", null, \"线型：\", -1)), _withDirectives(_createElementVNode(\"select\", {\n          \"onUpdate:modelValue\": $event => localValue.value[idx].lineType = $event,\n          onChange: emitChange\n        }, _cache[0] || (_cache[0] = [_createElementVNode(\"option\", {\n          value: \"solid\"\n        }, \"实线\", -1), _createElementVNode(\"option\", {\n          value: \"dashed\"\n        }, \"虚线\", -1), _createElementVNode(\"option\", {\n          value: \"dotted\"\n        }, \"点线\", -1)]), 40, _hoisted_5), [[_vModelSelect, localValue.value[idx].lineType]])]), _createElementVNode(\"div\", _hoisted_6, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", null, \"数据点样式：\", -1)), _withDirectives(_createElementVNode(\"input\", {\n          type: \"checkbox\",\n          \"onUpdate:modelValue\": $event => localValue.value[idx].pointAll = $event,\n          onChange: emitChange\n        }, null, 40, _hoisted_7), [[_vModelCheckbox, localValue.value[idx].pointAll]]), _cache[7] || (_cache[7] = _createTextVNode(\"统一所有点 \")), localValue.value[idx].pointAll ? (_openBlock(), _createElementBlock(_Fragment, {\n          key: 0\n        }, [_withDirectives(_createElementVNode(\"select\", {\n          \"onUpdate:modelValue\": $event => localValue.value[idx].pointSymbol = $event,\n          onChange: emitChange\n        }, _cache[4] || (_cache[4] = [_createStaticVNode(\"<option value=\\\"circle\\\" data-v-6cad0417>圆形</option><option value=\\\"rect\\\" data-v-6cad0417>矩形</option><option value=\\\"triangle\\\" data-v-6cad0417>三角</option><option value=\\\"diamond\\\" data-v-6cad0417>菱形</option><option value=\\\"pin\\\" data-v-6cad0417>水滴</option><option value=\\\"arrow\\\" data-v-6cad0417>箭头</option>\", 6)]), 40, _hoisted_8), [[_vModelSelect, localValue.value[idx].pointSymbol]]), _withDirectives(_createElementVNode(\"input\", {\n          type: \"color\",\n          \"onUpdate:modelValue\": $event => localValue.value[idx].pointColor = $event,\n          onInput: emitChange\n        }, null, 40, _hoisted_9), [[_vModelText, localValue.value[idx].pointColor]])], 64)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.yDataArr[idx], (pt, pidx) => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: pidx,\n            class: \"point-custom-item\"\n          }, [_createElementVNode(\"span\", null, \"点\" + _toDisplayString(pidx + 1) + \"：\", 1), _withDirectives(_createElementVNode(\"select\", {\n            \"onUpdate:modelValue\": $event => localValue.value[idx].pointCustom[pidx].symbol = $event,\n            onChange: emitChange\n          }, _cache[5] || (_cache[5] = [_createStaticVNode(\"<option value=\\\"circle\\\" data-v-6cad0417>圆形</option><option value=\\\"rect\\\" data-v-6cad0417>矩形</option><option value=\\\"triangle\\\" data-v-6cad0417>三角</option><option value=\\\"diamond\\\" data-v-6cad0417>菱形</option><option value=\\\"pin\\\" data-v-6cad0417>水滴</option><option value=\\\"arrow\\\" data-v-6cad0417>箭头</option>\", 6)]), 40, _hoisted_11), [[_vModelSelect, localValue.value[idx].pointCustom[pidx].symbol]]), _withDirectives(_createElementVNode(\"input\", {\n            type: \"color\",\n            \"onUpdate:modelValue\": $event => localValue.value[idx].pointCustom[pidx].color = $event,\n            onInput: emitChange\n          }, null, 40, _hoisted_12), [[_vModelText, localValue.value[idx].pointCustom[pidx].color]])]);\n        }), 128))]))])]);\n      }), 128))]);\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","toRaw","props","__props","emit","__emit","localValue","value","val","JSON","parse","stringify","immediate","seriesCount","cnt","length","Array","from","_","idx","lineColor","lineWidth","lineType","pointAll","pointSymbol","pointColor","pointCustom","yDataArr","symbol","color","emitChange"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/LineSeriesStylePanel.vue"],"sourcesContent":["<template>\n  <div class=\"line-series-style-panel\">\n    <div v-for=\"(series, idx) in seriesCount\" :key=\"idx\" class=\"series-style-block\">\n      <h5>折线{{ idx + 1 }} 样式</h5>\n      <div class=\"series-style-row\">\n        <label>折线颜色：</label>\n        <input type=\"color\" v-model=\"localValue[idx].lineColor\" @input=\"emitChange\" />\n        <label>线宽：</label>\n        <input type=\"number\" min=\"1\" max=\"10\" v-model.number=\"localValue[idx].lineWidth\" @input=\"emitChange\" style=\"width:60px;\" />\n        <label>线型：</label>\n        <select v-model=\"localValue[idx].lineType\" @change=\"emitChange\">\n          <option value=\"solid\">实线</option>\n          <option value=\"dashed\">虚线</option>\n          <option value=\"dotted\">点线</option>\n        </select>\n      </div>\n      <div class=\"series-style-row\">\n        <label>数据点样式：</label>\n        <input type=\"checkbox\" v-model=\"localValue[idx].pointAll\" @change=\"emitChange\" />统一所有点\n        <template v-if=\"localValue[idx].pointAll\">\n          <select v-model=\"localValue[idx].pointSymbol\" @change=\"emitChange\">\n            <option value=\"circle\">圆形</option>\n            <option value=\"rect\">矩形</option>\n            <option value=\"triangle\">三角</option>\n            <option value=\"diamond\">菱形</option>\n            <option value=\"pin\">水滴</option>\n            <option value=\"arrow\">箭头</option>\n          </select>\n          <input type=\"color\" v-model=\"localValue[idx].pointColor\" @input=\"emitChange\" />\n        </template>\n        <template v-else>\n          <div class=\"point-custom-list\">\n            <div v-for=\"(pt, pidx) in yDataArr[idx]\" :key=\"pidx\" class=\"point-custom-item\">\n              <span>点{{ pidx + 1 }}：</span>\n              <select v-model=\"localValue[idx].pointCustom[pidx].symbol\" @change=\"emitChange\">\n                <option value=\"circle\">圆形</option>\n                <option value=\"rect\">矩形</option>\n                <option value=\"triangle\">三角</option>\n                <option value=\"diamond\">菱形</option>\n                <option value=\"pin\">水滴</option>\n                <option value=\"arrow\">箭头</option>\n              </select>\n              <input type=\"color\" v-model=\"localValue[idx].pointCustom[pidx].color\" @input=\"emitChange\" />\n            </div>\n          </div>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, watch, toRaw } from 'vue'\nconst props = defineProps({\n  seriesCount: Number,\n  value: Array,\n  xData: Array,\n  yDataArr: Array\n})\nconst emit = defineEmits(['update'])\n\nconst localValue = ref([])\n\nwatch(() => props.value, (val) => {\n  localValue.value = val ? JSON.parse(JSON.stringify(val)) : []\n}, { immediate: true })\n\nwatch(() => props.seriesCount, (cnt) => {\n  // 初始化每条折线的样式\n  if (!localValue.value || localValue.value.length !== cnt) {\n    localValue.value = Array.from({ length: cnt }, (_, idx) => ({\n      lineColor: '#5470c6',\n      lineWidth: 2,\n      lineType: 'solid',\n      pointAll: true,\n      pointSymbol: 'circle',\n      pointColor: '#5470c6',\n      pointCustom: Array.from({ length: props.yDataArr?.[idx]?.length || 0 }, () => ({ symbol: 'circle', color: '#5470c6' }))\n    }))\n    emitChange()\n  }\n}, { immediate: true })\n\nfunction emitChange() {\n  emit('update', toRaw(localValue.value))\n}\n</script>\n\n<style scoped>\n.line-series-style-panel {\n  padding: 8px 0;\n}\n.series-style-block {\n  border: 1px solid #eee;\n  border-radius: 6px;\n  margin-bottom: 12px;\n  padding: 8px 12px;\n  background: #fafbfc;\n}\n.series-style-row {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  gap: 8px;\n}\n.point-custom-list {\n  margin-left: 16px;\n}\n.point-custom-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  margin-bottom: 4px;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAqDA,SAASA,GAAG,EAAEC,KAAK,EAAEC,KAAK,QAAQ,KAAI;;;;;;;;;;;;;IADtC;IAEA,MAAMC,KAAK,GAAGC,OAAA;IAMd,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,UAAU,GAAGP,GAAG,CAAC,EAAE;IAEzBC,KAAK,CAAC,MAAME,KAAK,CAACK,KAAK,EAAGC,GAAG,IAAK;MAChCF,UAAU,CAACC,KAAK,GAAGC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,GAAG,CAAC,CAAC,GAAG,EAAC;IAC9D,CAAC,EAAE;MAAEI,SAAS,EAAE;IAAK,CAAC;IAEtBZ,KAAK,CAAC,MAAME,KAAK,CAACW,WAAW,EAAGC,GAAG,IAAK;MACtC;MACA,IAAI,CAACR,UAAU,CAACC,KAAK,IAAID,UAAU,CAACC,KAAK,CAACQ,MAAM,KAAKD,GAAG,EAAE;QACxDR,UAAU,CAACC,KAAK,GAAGS,KAAK,CAACC,IAAI,CAAC;UAAEF,MAAM,EAAED;QAAI,CAAC,EAAE,CAACI,CAAC,EAAEC,GAAG,MAAM;UAC1DC,SAAS,EAAE,SAAS;UACpBC,SAAS,EAAE,CAAC;UACZC,QAAQ,EAAE,OAAO;UACjBC,QAAQ,EAAE,IAAI;UACdC,WAAW,EAAE,QAAQ;UACrBC,UAAU,EAAE,SAAS;UACrBC,WAAW,EAAEV,KAAK,CAACC,IAAI,CAAC;YAAEF,MAAM,EAAEb,KAAK,CAACyB,QAAQ,GAAGR,GAAG,CAAC,EAAEJ,MAAM,IAAI;UAAE,CAAC,EAAE,OAAO;YAAEa,MAAM,EAAE,QAAQ;YAAEC,KAAK,EAAE;UAAU,CAAC,CAAC;QACxH,CAAC,CAAC;QACFC,UAAU,CAAC;MACb;IACF,CAAC,EAAE;MAAElB,SAAS,EAAE;IAAK,CAAC;IAEtB,SAASkB,UAAUA,CAAA,EAAG;MACpB1B,IAAI,CAAC,QAAQ,EAAEH,KAAK,CAACK,UAAU,CAACC,KAAK,CAAC;IACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}