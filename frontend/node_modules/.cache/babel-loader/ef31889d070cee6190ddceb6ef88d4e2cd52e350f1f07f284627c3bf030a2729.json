{"ast":null,"code":"import { computed } from 'vue';\nimport { getCellValue, formatFileSize } from '@/assets/JS/utils/dataPreviewUtils.js';\nexport default {\n  __name: 'DataPreviewModal',\n  props: {\n    show: Boolean,\n    currentFile: Object,\n    previewData: {\n      type: Array,\n      default: () => []\n    },\n    isSidePreview: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['close'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n\n    // 表头计算 - 修复数据类型处理逻辑\n    const tableHeaders = computed(() => {\n      if (!props.previewData.length) return [];\n      const firstRow = props.previewData[0];\n      if (Array.isArray(firstRow)) {\n        return firstRow;\n      } else if (typeof firstRow === 'object' && firstRow !== null) {\n        return Object.keys(firstRow);\n      }\n      return [];\n    });\n\n    // 实际数据行（根据数据类型决定是否排除标题行）\n    const dataRows = computed(() => {\n      if (!props.previewData.length) return [];\n      const firstRow = props.previewData[0];\n      if (Array.isArray(firstRow)) {\n        return props.previewData.slice(1);\n      } else if (typeof firstRow === 'object' && firstRow !== null) {\n        return props.previewData;\n      }\n      return props.previewData;\n    });\n    function onClose() {\n      emit('close');\n    }\n    const __returned__ = {\n      props,\n      emit,\n      tableHeaders,\n      dataRows,\n      onClose,\n      computed,\n      get getCellValue() {\n        return getCellValue;\n      },\n      get formatFileSize() {\n        return formatFileSize;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","getCellValue","formatFileSize","props","__props","emit","__emit","tableHeaders","previewData","length","firstRow","Array","isArray","Object","keys","dataRows","slice","onClose"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Common/DataPreviewModal.vue"],"sourcesContent":["<template>\n<transition name=\"modal-fade\">\n    <div v-if=\"show\"\n        class=\"preview-modal\"\n        @click.self=\"onClose\">\n        <transition name=\"modal-slide\" appear>\n            <div class=\"preview-content\" v-if=\"show\">\n                <!-- 头部 -->\n                <div class=\"preview-header\">\n                    <div class=\"header-info\">\n                        <h3>{{ currentFile?.name || 'Data Preview' }}</h3>\n                        <span class=\"file-info\" v-if=\"currentFile\">\n                            {{ formatFileSize(currentFile.size) }} |\n                            {{ currentFile.rows || 0 }} row × {{ currentFile.columns || 0 }} column (Only first 100 rows shown)\n                        </span>\n                    </div>\n                    <button class=\"close-btn\" @click=\"onClose\">×</button>\n                </div>\n\n                <!-- 数据表格预览 -->\n                <div class=\"preview-table-wrapper\">\n                    <div v-if=\"dataRows.length\" class=\"table-container\">\n                        <table class=\"preview-table\">\n                            <thead>\n                                <tr>\n                                    <th class=\"row-number\">#</th>\n                                    <th v-for=\"(header, idx) in tableHeaders\"\n                                        :key=\"idx\"\n                                        :title=\"String(header).length > 12 ? String(header) : ''\"\n                                        class=\"column-header\">{{ String(header) }}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"(row, idx) in dataRows\"\n                                    :key=\"idx\">\n                                    <td class=\"row-number\">{{ idx + 1 }}</td>\n                                    <td v-for=\"(header, headerIdx) in tableHeaders\"\n                                        :key=\"headerIdx\"\n                                        :title=\"getCellValue(row, header, headerIdx)\">\n                                        {{ getCellValue(row, header, headerIdx) }}\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div v-else class=\"empty-tip\">\n                        <div class=\"empty-icon\">📊</div>\n                        <p>No data available...</p>\n                    </div>\n                </div>\n            </div>\n        </transition>\n    </div>\n</transition>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { computed } from 'vue'\nimport { getCellValue, formatFileSize } from '@/assets/JS/utils/dataPreviewUtils.js'\n\nconst props = defineProps({\n    show: Boolean,\n    currentFile: Object,\n    previewData: {\n        type: Array,\n        default: () => []\n    },\n    isSidePreview: {\n        type: Boolean,\n        default: false\n    }\n})\n\nconst emit = defineEmits(['close'])\n\n// 表头计算 - 修复数据类型处理逻辑\nconst tableHeaders = computed(() => {\n    if (!props.previewData.length) return []\n    const firstRow = props.previewData[0]\n    if (Array.isArray(firstRow)) {\n        return firstRow\n    } else if (typeof firstRow === 'object' && firstRow !== null) {\n        return Object.keys(firstRow)\n    }\n    return []\n})\n\n// 实际数据行（根据数据类型决定是否排除标题行）\nconst dataRows = computed(() => {\n    if (!props.previewData.length) return []\n    const firstRow = props.previewData[0]\n    if (Array.isArray(firstRow)) {\n        return props.previewData.slice(1)\n    } else if (typeof firstRow === 'object' && firstRow !== null) {\n        return props.previewData\n    }\n    return props.previewData\n})\n\nfunction onClose() {\n    emit('close')\n}\n</script>\n\n<style scoped>\n@import '../../assets/CSS/DataPreviewModal.css';\n</style>"],"mappings":"AA0DA,SAASA,QAAQ,QAAQ,KAAI;AAC7B,SAASC,YAAY,EAAEC,cAAc,QAAQ,uCAAsC;;;;;;;;;;;;;;;;;;;;;;IAFnF;IAIA,MAAMC,KAAK,GAAGC,OAAA;IAad,MAAMC,IAAI,GAAGC,MAAA;;IAEb;IACA,MAAMC,YAAY,GAAGP,QAAQ,CAAC,MAAM;MAChC,IAAI,CAACG,KAAK,CAACK,WAAW,CAACC,MAAM,EAAE,OAAO,EAAC;MACvC,MAAMC,QAAQ,GAAGP,KAAK,CAACK,WAAW,CAAC,CAAC;MACpC,IAAIG,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;QACzB,OAAOA,QAAO;MAClB,CAAC,MAAM,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;QAC1D,OAAOG,MAAM,CAACC,IAAI,CAACJ,QAAQ;MAC/B;MACA,OAAO,EAAC;IACZ,CAAC;;IAED;IACA,MAAMK,QAAQ,GAAGf,QAAQ,CAAC,MAAM;MAC5B,IAAI,CAACG,KAAK,CAACK,WAAW,CAACC,MAAM,EAAE,OAAO,EAAC;MACvC,MAAMC,QAAQ,GAAGP,KAAK,CAACK,WAAW,CAAC,CAAC;MACpC,IAAIG,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;QACzB,OAAOP,KAAK,CAACK,WAAW,CAACQ,KAAK,CAAC,CAAC;MACpC,CAAC,MAAM,IAAI,OAAON,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;QAC1D,OAAOP,KAAK,CAACK,WAAU;MAC3B;MACA,OAAOL,KAAK,CAACK,WAAU;IAC3B,CAAC;IAED,SAASS,OAAOA,CAAA,EAAG;MACfZ,IAAI,CAAC,OAAO;IAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}