{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, computed, watch, onMounted } from 'vue';\nimport { getChartConfig, CHART_TYPES } from '../configs/chartConfigs.js';\nimport { getChartMetadata } from '../configs/chartTypes.js';\nimport { createChartConfig, updateChartConfiguration, validateChartConfig, autoMapFieldsForChart } from '../configs/configManager.js';\nimport FieldMapping from './FieldMapping.vue';\nimport CustomConfigItem from './CustomConfigItem.vue';\n\n// Props\n\nexport default {\n  __name: 'ChartConfigPanel',\n  props: {\n    selectedChartType: {\n      type: String,\n      default: CHART_TYPES.BAR\n    },\n    currentFile: {\n      type: Object,\n      default: null\n    },\n    availableColumns: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['config-change', 'generate-chart'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    const props = __props;\n\n    // Emits\n    const emit = __emit;\n\n    // 响应式数据\n    const configId = ref(null);\n    const showBasicConfig = ref(true);\n    const showCustomConfig = ref(false);\n    const showDataFilter = ref(false);\n    const errorMessage = ref('');\n    const isLoading = ref(false);\n\n    // 组件引用\n    const fieldMappingRef = ref(null);\n\n    // 当前配置\n    const currentConfig = ref({\n      fieldMappings: {},\n      options: {}\n    });\n\n    // 获取当前图表配置实例\n    const currentChartConfig = computed(() => {\n      return getChartConfig(props.selectedChartType);\n    });\n\n    // 获取图表元数据\n    const chartMetadata = computed(() => {\n      return getChartMetadata(props.selectedChartType);\n    });\n\n    // 检查是否有自定义配置选项\n    const hasCustomOptions = computed(() => {\n      const configOptions = currentChartConfig.value.getConfigByCategory();\n      return Object.keys(configOptions).some(category => category !== 'basic' && category !== 'data' && Object.keys(configOptions[category]).length > 0);\n    });\n\n    // 获取基础配置选项\n    const basicConfigOptions = computed(() => {\n      const configByCategory = currentChartConfig.value.getConfigByCategory();\n      return {\n        ...configByCategory.basic,\n        ...configByCategory.style,\n        ...configByCategory.animation,\n        ...configByCategory.legend\n      };\n    });\n\n    // 获取自定义配置选项\n    const customConfigOptions = computed(() => {\n      const configByCategory = currentChartConfig.value.getConfigByCategory();\n      const customOptions = {};\n      Object.entries(configByCategory).forEach(([category, options]) => {\n        if (!['basic', 'style', 'animation', 'legend', 'data'].includes(category)) {\n          Object.assign(customOptions, options);\n        }\n      });\n      return customOptions;\n    });\n\n    // 获取数据过滤配置选项\n    const dataFilterOptions = computed(() => {\n      const configByCategory = currentChartConfig.value.getConfigByCategory();\n      return configByCategory.data || {};\n    });\n\n    // 配置验证状态\n    const configValidation = computed(() => {\n      if (!configId.value) return {\n        isValid: false,\n        errors: []\n      };\n      try {\n        return validateChartConfig(configId.value);\n      } catch (error) {\n        return {\n          isValid: false,\n          errors: [error.message]\n        };\n      }\n    });\n\n    // 映射验证状态\n    const mappingValidation = computed(() => {\n      return fieldMappingRef.value?.validation || {\n        isValid: false,\n        missingFields: []\n      };\n    });\n\n    // 总体配置有效性\n    const isConfigValid = computed(() => {\n      return mappingValidation.value.isValid && configValidation.value.isValid;\n    });\n\n    // 获取图表描述\n    function getChartDescription(chartType) {\n      const metadata = getChartMetadata(chartType);\n      return metadata.description || '数据可视化图表';\n    }\n\n    // 切换配置区域显示状态\n    function toggleBasicConfig() {\n      showBasicConfig.value = !showBasicConfig.value;\n    }\n    function toggleCustomConfig() {\n      showCustomConfig.value = !showCustomConfig.value;\n    }\n    function toggleDataFilter() {\n      showDataFilter.value = !showDataFilter.value;\n    }\n\n    // 更新字段映射\n    function updateFieldMappings(mappings) {\n      currentConfig.value.fieldMappings = mappings;\n      if (configId.value) {\n        updateChartConfiguration(configId.value, {\n          fieldMappings: mappings\n        });\n      }\n      emitConfigChange();\n    }\n\n    // 更新配置选项\n    function updateConfigOption(category, key, value) {\n      if (!currentConfig.value.options[category]) {\n        currentConfig.value.options[category] = {};\n      }\n      currentConfig.value.options[category][key] = value;\n      if (configId.value) {\n        updateChartConfiguration(configId.value, {\n          options: currentConfig.value.options\n        });\n      }\n      emitConfigChange();\n    }\n\n    // 处理映射错误\n    function handleMappingError(error) {\n      errorMessage.value = error;\n      if (error) {\n        setTimeout(() => {\n          errorMessage.value = '';\n        }, 5000);\n      }\n    }\n\n    // 自动映射字段\n    async function autoMapFields() {\n      if (!configId.value || !props.availableColumns.length) return;\n      isLoading.value = true;\n      try {\n        const autoMappings = await autoMapFieldsForChart(configId.value, props.availableColumns);\n        currentConfig.value.fieldMappings = autoMappings;\n\n        // 通知子组件更新\n        if (fieldMappingRef.value) {\n          fieldMappingRef.value.updateMappings(autoMappings);\n        }\n        emitConfigChange();\n      } catch (error) {\n        console.error('Auto mapping failed:', error);\n        errorMessage.value = '自动映射失败，请手动配置字段映射';\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // 生成图表\n    function generateChart() {\n      if (!isConfigValid.value) {\n        errorMessage.value = '请完成必要的配置';\n        return;\n      }\n      const fullConfig = currentChartConfig.value.buildFullConfig(currentConfig.value.fieldMappings, currentConfig.value.options);\n      emit('generate-chart', fullConfig);\n    }\n\n    // 重置配置\n    function resetConfig() {\n      if (configId.value) {\n        const defaultConfig = currentChartConfig.value.getDefaultConfig();\n        updateChartConfiguration(configId.value, {\n          fieldMappings: {},\n          options: defaultConfig\n        });\n        currentConfig.value = {\n          fieldMappings: {},\n          options: defaultConfig\n        };\n\n        // 通知子组件重置\n        if (fieldMappingRef.value) {\n          fieldMappingRef.value.reset();\n        }\n      }\n      errorMessage.value = '';\n      emitConfigChange();\n    }\n\n    // 导出配置\n    function exportConfig() {\n      if (!configId.value) return;\n      try {\n        const config = globalConfigManager.exportConfig(configId.value);\n\n        // 创建下载链接\n        const blob = new Blob([JSON.stringify(config, null, 2)], {\n          type: 'application/json'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `chart_config_${props.selectedChartType}_${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } catch (error) {\n        console.error('Export failed:', error);\n        errorMessage.value = '导出配置失败';\n      }\n    }\n\n    // 导入配置\n    function importConfig(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const configData = JSON.parse(e.target.result);\n          if (configData.chartType !== props.selectedChartType) {\n            errorMessage.value = '配置文件的图表类型与当前选择的类型不匹配';\n            return;\n          }\n          const importedConfig = globalConfigManager.importConfig(configData);\n          configId.value = importedConfig.id;\n          currentConfig.value = {\n            fieldMappings: importedConfig.fieldMappings,\n            options: importedConfig.options\n          };\n\n          // 通知子组件更新\n          if (fieldMappingRef.value) {\n            fieldMappingRef.value.updateMappings(importedConfig.fieldMappings);\n          }\n          emitConfigChange();\n        } catch (error) {\n          console.error('Import failed:', error);\n          errorMessage.value = '导入配置失败，请检查文件格式';\n        }\n      };\n      reader.readAsText(file);\n    }\n\n    // 发出配置变化事件\n    function emitConfigChange() {\n      emit('config-change', {\n        chartType: props.selectedChartType,\n        configId: configId.value,\n        ...currentConfig.value\n      });\n    }\n\n    // 初始化配置\n    function initializeConfig() {\n      try {\n        const config = createChartConfig(props.selectedChartType);\n        configId.value = config.id;\n        currentConfig.value = {\n          fieldMappings: config.fieldMappings,\n          options: config.options\n        };\n\n        // 如果有可用列，尝试自动映射\n        if (props.availableColumns.length > 0) {\n          autoMapFields();\n        }\n        emitConfigChange();\n      } catch (error) {\n        console.error('Failed to initialize config:', error);\n        errorMessage.value = '配置初始化失败';\n      }\n    }\n\n    // 监听图表类型变化\n    watch(() => props.selectedChartType, newType => {\n      // 重新初始化配置\n      initializeConfig();\n\n      // 自动展开自定义配置（如果有的话）\n      if (hasCustomOptions.value) {\n        showCustomConfig.value = true;\n      }\n    });\n\n    // 监听可用列变化\n    watch(() => props.availableColumns, newColumns => {\n      if (newColumns.length > 0 && configId.value) {\n        autoMapFields();\n      }\n    }, {\n      deep: true\n    });\n\n    // 组件挂载时初始化\n    onMounted(() => {\n      initializeConfig();\n    });\n    const __returned__ = {\n      props,\n      emit,\n      configId,\n      showBasicConfig,\n      showCustomConfig,\n      showDataFilter,\n      errorMessage,\n      isLoading,\n      fieldMappingRef,\n      currentConfig,\n      currentChartConfig,\n      chartMetadata,\n      hasCustomOptions,\n      basicConfigOptions,\n      customConfigOptions,\n      dataFilterOptions,\n      configValidation,\n      mappingValidation,\n      isConfigValid,\n      getChartDescription,\n      toggleBasicConfig,\n      toggleCustomConfig,\n      toggleDataFilter,\n      updateFieldMappings,\n      updateConfigOption,\n      handleMappingError,\n      autoMapFields,\n      generateChart,\n      resetConfig,\n      exportConfig,\n      importConfig,\n      emitConfigChange,\n      initializeConfig,\n      ref,\n      computed,\n      watch,\n      onMounted,\n      get getChartConfig() {\n        return getChartConfig;\n      },\n      get CHART_TYPES() {\n        return CHART_TYPES;\n      },\n      get getChartMetadata() {\n        return getChartMetadata;\n      },\n      get createChartConfig() {\n        return createChartConfig;\n      },\n      get updateChartConfiguration() {\n        return updateChartConfiguration;\n      },\n      get validateChartConfig() {\n        return validateChartConfig;\n      },\n      get autoMapFieldsForChart() {\n        return autoMapFieldsForChart;\n      },\n      FieldMapping,\n      CustomConfigItem\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","getChartConfig","CHART_TYPES","getChartMetadata","createChartConfig","updateChartConfiguration","validateChartConfig","autoMapFieldsForChart","FieldMapping","CustomConfigItem","props","__props","emit","__emit","configId","showBasicConfig","showCustomConfig","showDataFilter","errorMessage","isLoading","fieldMappingRef","currentConfig","fieldMappings","options","currentChartConfig","selectedChartType","chartMetadata","hasCustomOptions","configOptions","value","getConfigByCategory","Object","keys","some","category","length","basicConfigOptions","configByCategory","basic","style","animation","legend","customConfigOptions","customOptions","entries","forEach","includes","assign","dataFilterOptions","data","configValidation","isValid","errors","error","message","mappingValidation","validation","missingFields","isConfigValid","getChartDescription","chartType","metadata","description","toggleBasicConfig","toggleCustomConfig","toggleDataFilter","updateFieldMappings","mappings","emitConfigChange","updateConfigOption","key","handleMappingError","setTimeout","autoMapFields","availableColumns","autoMappings","updateMappings","console","generateChart","fullConfig","buildFullConfig","resetConfig","defaultConfig","getDefaultConfig","reset","exportConfig","config","globalConfigManager","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","split","click","revokeObjectURL","importConfig","event","file","target","files","reader","FileReader","onload","e","configData","parse","result","importedConfig","id","readAsText","initializeConfig","newType","newColumns","deep"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/ChartConfigPanel.vue"],"sourcesContent":["<template>\n  <div class=\"chart-config-panel\">\n    <!-- 右侧边栏总标题 -->\n    <div class=\"panel-header\">\n      <h3>Chart Configuration</h3>\n    </div>\n\n    <!-- 图表类型信息 -->\n    <div class=\"chart-type-section\">\n      <div class=\"chart-type-info\">\n        <div class=\"chart-type-tag\">\n          <span class=\"chart-type-icon\">{{ currentChartConfig.icon }}</span>\n          <span class=\"chart-type-name\">{{ currentChartConfig.name }}</span>\n        </div>\n        <div class=\"chart-type-description\">\n          {{ getChartDescription(selectedChartType) }}\n        </div>\n      </div>\n    </div>\n\n    <!-- 数据映射配置区域 -->\n    <div class=\"mapping-section\">\n      <div class=\"mapping-section-header\">\n        <h4>数据映射</h4>\n        <div class=\"mapping-status\" :class=\"{ 'status-valid': mappingValidation.isValid }\">\n          {{ mappingValidation.isValid ? '✓ 完成' : `${mappingValidation.missingFields.length} 项未配置` }}\n        </div>\n      </div>\n\n      <FieldMapping\n        :chart-type=\"selectedChartType\"\n        :mappings=\"chartConfig.fieldMappings\"\n        @update:mappings=\"updateFieldMappings\"\n        @mapping-error=\"handleMappingError\"\n        ref=\"fieldMappingRef\"\n      />\n    </div>\n\n    <!-- 基础配置 -->\n    <div class=\"basic-config-section\">\n      <div class=\"section-header\" @click=\"toggleBasicConfig\">\n        <h4>基础配置</h4>\n        <div class=\"toggle-icon\" :class=\"{ 'toggle-open': showBasicConfig }\">▼</div>\n      </div>\n      <div v-if=\"showBasicConfig\" class=\"section-content\">\n        <CustomConfigItem\n          v-for=\"(config, key) in basicConfigs\"\n          :key=\"key\"\n          :config=\"config\"\n          :field-name=\"key\"\n          v-model=\"chartConfig.basicOptions[key]\"\n        />\n      </div>\n    </div>\n\n    <!-- 自定义配置 -->\n    <div class=\"custom-config-section\" v-if=\"hasCustomOptions\">\n      <div class=\"section-header\" @click=\"toggleCustomConfig\">\n        <h4>图表专属配置</h4>\n        <div class=\"toggle-icon\" :class=\"{ 'toggle-open': showCustomConfig }\">▼</div>\n      </div>\n      <div v-if=\"showCustomConfig\" class=\"section-content\">\n        <CustomConfigItem\n          v-for=\"(config, key) in currentChartConfig.customOptions\"\n          :key=\"key\"\n          :config=\"config\"\n          :field-name=\"key\"\n          v-model=\"chartConfig.customOptions[key]\"\n        />\n      </div>\n    </div>\n\n    <!-- 数据过滤 -->\n    <div class=\"filter-section\">\n      <div class=\"section-header\" @click=\"toggleDataFilter\">\n        <h4>数据过滤</h4>\n        <div class=\"toggle-icon\" :class=\"{ 'toggle-open': showDataFilter }\">▼</div>\n      </div>\n      <div v-if=\"showDataFilter\" class=\"section-content\">\n        <CustomConfigItem\n          v-for=\"(config, key) in filterConfigs\"\n          :key=\"key\"\n          :config=\"config\"\n          :field-name=\"key\"\n          v-model=\"chartConfig.filterOptions[key]\"\n        />\n      </div>\n    </div>\n\n    <!-- 操作按钮 -->\n    <div class=\"action-section\">\n      <button\n        class=\"apply-btn\"\n        :disabled=\"!isConfigValid\"\n        @click=\"generateChart\"\n      >\n        应用配置\n      </button>\n      <button class=\"reset-btn\" @click=\"resetConfig\">\n        重置配置\n      </button>\n    </div>\n\n    <!-- 错误提示 -->\n    <div v-if=\"errorMessage\" class=\"error-message\">\n      <div class=\"error-text\">{{ errorMessage }}</div>\n    </div>\n  </div>\n</template>\n\n<script setup>\n/* eslint-disable */\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { getChartConfig, CHART_TYPES } from '../configs/chartConfigs.js'\nimport { getChartMetadata } from '../configs/chartTypes.js'\nimport { createChartConfig, updateChartConfiguration, validateChartConfig, autoMapFieldsForChart } from '../configs/configManager.js'\nimport FieldMapping from './FieldMapping.vue'\nimport CustomConfigItem from './CustomConfigItem.vue'\n\n// Props\nconst props = defineProps({\n  selectedChartType: {\n    type: String,\n    default: CHART_TYPES.BAR\n  },\n  currentFile: {\n    type: Object,\n    default: null\n  },\n  availableColumns: {\n    type: Array,\n    default: () => []\n  }\n})\n\n// Emits\nconst emit = defineEmits(['config-change', 'generate-chart'])\n\n// 响应式数据\nconst configId = ref(null)\nconst showBasicConfig = ref(true)\nconst showCustomConfig = ref(false)\nconst showDataFilter = ref(false)\nconst errorMessage = ref('')\nconst isLoading = ref(false)\n\n// 组件引用\nconst fieldMappingRef = ref(null)\n\n// 当前配置\nconst currentConfig = ref({\n  fieldMappings: {},\n  options: {}\n})\n\n// 获取当前图表配置实例\nconst currentChartConfig = computed(() => {\n  return getChartConfig(props.selectedChartType)\n})\n\n// 获取图表元数据\nconst chartMetadata = computed(() => {\n  return getChartMetadata(props.selectedChartType)\n})\n\n// 检查是否有自定义配置选项\nconst hasCustomOptions = computed(() => {\n  const configOptions = currentChartConfig.value.getConfigByCategory()\n  return Object.keys(configOptions).some(category => \n    category !== 'basic' && category !== 'data' && Object.keys(configOptions[category]).length > 0\n  )\n})\n\n// 获取基础配置选项\nconst basicConfigOptions = computed(() => {\n  const configByCategory = currentChartConfig.value.getConfigByCategory()\n  return {\n    ...configByCategory.basic,\n    ...configByCategory.style,\n    ...configByCategory.animation,\n    ...configByCategory.legend\n  }\n})\n\n// 获取自定义配置选项\nconst customConfigOptions = computed(() => {\n  const configByCategory = currentChartConfig.value.getConfigByCategory()\n  const customOptions = {}\n  \n  Object.entries(configByCategory).forEach(([category, options]) => {\n    if (!['basic', 'style', 'animation', 'legend', 'data'].includes(category)) {\n      Object.assign(customOptions, options)\n    }\n  })\n  \n  return customOptions\n})\n\n// 获取数据过滤配置选项\nconst dataFilterOptions = computed(() => {\n  const configByCategory = currentChartConfig.value.getConfigByCategory()\n  return configByCategory.data || {}\n})\n\n// 配置验证状态\nconst configValidation = computed(() => {\n  if (!configId.value) return { isValid: false, errors: [] }\n  \n  try {\n    return validateChartConfig(configId.value)\n  } catch (error) {\n    return { isValid: false, errors: [error.message] }\n  }\n})\n\n// 映射验证状态\nconst mappingValidation = computed(() => {\n  return fieldMappingRef.value?.validation || { isValid: false, missingFields: [] }\n})\n\n// 总体配置有效性\nconst isConfigValid = computed(() => {\n  return mappingValidation.value.isValid && configValidation.value.isValid\n})\n\n// 获取图表描述\nfunction getChartDescription(chartType) {\n  const metadata = getChartMetadata(chartType)\n  return metadata.description || '数据可视化图表'\n}\n\n// 切换配置区域显示状态\nfunction toggleBasicConfig() {\n  showBasicConfig.value = !showBasicConfig.value\n}\n\nfunction toggleCustomConfig() {\n  showCustomConfig.value = !showCustomConfig.value\n}\n\nfunction toggleDataFilter() {\n  showDataFilter.value = !showDataFilter.value\n}\n\n// 更新字段映射\nfunction updateFieldMappings(mappings) {\n  currentConfig.value.fieldMappings = mappings\n  \n  if (configId.value) {\n    updateChartConfiguration(configId.value, {\n      fieldMappings: mappings\n    })\n  }\n  \n  emitConfigChange()\n}\n\n// 更新配置选项\nfunction updateConfigOption(category, key, value) {\n  if (!currentConfig.value.options[category]) {\n    currentConfig.value.options[category] = {}\n  }\n  \n  currentConfig.value.options[category][key] = value\n  \n  if (configId.value) {\n    updateChartConfiguration(configId.value, {\n      options: currentConfig.value.options\n    })\n  }\n  \n  emitConfigChange()\n}\n\n// 处理映射错误\nfunction handleMappingError(error) {\n  errorMessage.value = error\n  if (error) {\n    setTimeout(() => {\n      errorMessage.value = ''\n    }, 5000)\n  }\n}\n\n// 自动映射字段\nasync function autoMapFields() {\n  if (!configId.value || !props.availableColumns.length) return\n  \n  isLoading.value = true\n  \n  try {\n    const autoMappings = await autoMapFieldsForChart(configId.value, props.availableColumns)\n    currentConfig.value.fieldMappings = autoMappings\n    \n    // 通知子组件更新\n    if (fieldMappingRef.value) {\n      fieldMappingRef.value.updateMappings(autoMappings)\n    }\n    \n    emitConfigChange()\n  } catch (error) {\n    console.error('Auto mapping failed:', error)\n    errorMessage.value = '自动映射失败，请手动配置字段映射'\n  } finally {\n    isLoading.value = false\n  }\n}\n\n// 生成图表\nfunction generateChart() {\n  if (!isConfigValid.value) {\n    errorMessage.value = '请完成必要的配置'\n    return\n  }\n\n  const fullConfig = currentChartConfig.value.buildFullConfig(\n    currentConfig.value.fieldMappings,\n    currentConfig.value.options\n  )\n\n  emit('generate-chart', fullConfig)\n}\n\n// 重置配置\nfunction resetConfig() {\n  if (configId.value) {\n    const defaultConfig = currentChartConfig.value.getDefaultConfig()\n    \n    updateChartConfiguration(configId.value, {\n      fieldMappings: {},\n      options: defaultConfig\n    })\n    \n    currentConfig.value = {\n      fieldMappings: {},\n      options: defaultConfig\n    }\n    \n    // 通知子组件重置\n    if (fieldMappingRef.value) {\n      fieldMappingRef.value.reset()\n    }\n  }\n\n  errorMessage.value = ''\n  emitConfigChange()\n}\n\n// 导出配置\nfunction exportConfig() {\n  if (!configId.value) return\n  \n  try {\n    const config = globalConfigManager.exportConfig(configId.value)\n    \n    // 创建下载链接\n    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `chart_config_${props.selectedChartType}_${new Date().toISOString().split('T')[0]}.json`\n    a.click()\n    URL.revokeObjectURL(url)\n  } catch (error) {\n    console.error('Export failed:', error)\n    errorMessage.value = '导出配置失败'\n  }\n}\n\n// 导入配置\nfunction importConfig(event) {\n  const file = event.target.files[0]\n  if (!file) return\n  \n  const reader = new FileReader()\n  reader.onload = (e) => {\n    try {\n      const configData = JSON.parse(e.target.result)\n      \n      if (configData.chartType !== props.selectedChartType) {\n        errorMessage.value = '配置文件的图表类型与当前选择的类型不匹配'\n        return\n      }\n      \n      const importedConfig = globalConfigManager.importConfig(configData)\n      configId.value = importedConfig.id\n      currentConfig.value = {\n        fieldMappings: importedConfig.fieldMappings,\n        options: importedConfig.options\n      }\n      \n      // 通知子组件更新\n      if (fieldMappingRef.value) {\n        fieldMappingRef.value.updateMappings(importedConfig.fieldMappings)\n      }\n      \n      emitConfigChange()\n    } catch (error) {\n      console.error('Import failed:', error)\n      errorMessage.value = '导入配置失败，请检查文件格式'\n    }\n  }\n  reader.readAsText(file)\n}\n\n// 发出配置变化事件\nfunction emitConfigChange() {\n  emit('config-change', {\n    chartType: props.selectedChartType,\n    configId: configId.value,\n    ...currentConfig.value\n  })\n}\n\n// 初始化配置\nfunction initializeConfig() {\n  try {\n    const config = createChartConfig(props.selectedChartType)\n    configId.value = config.id\n    currentConfig.value = {\n      fieldMappings: config.fieldMappings,\n      options: config.options\n    }\n    \n    // 如果有可用列，尝试自动映射\n    if (props.availableColumns.length > 0) {\n      autoMapFields()\n    }\n    \n    emitConfigChange()\n  } catch (error) {\n    console.error('Failed to initialize config:', error)\n    errorMessage.value = '配置初始化失败'\n  }\n}\n\n// 监听图表类型变化\nwatch(() => props.selectedChartType, (newType) => {\n  // 重新初始化配置\n  initializeConfig()\n  \n  // 自动展开自定义配置（如果有的话）\n  if (hasCustomOptions.value) {\n    showCustomConfig.value = true\n  }\n})\n\n// 监听可用列变化\nwatch(() => props.availableColumns, (newColumns) => {\n  if (newColumns.length > 0 && configId.value) {\n    autoMapFields()\n  }\n}, { deep: true })\n\n// 组件挂载时初始化\nonMounted(() => {\n  initializeConfig()\n})\n</script>\n\n<style scoped>\n/* 白天主题CSS变量 */\n:root {\n  --bg-color: #ffffff;\n  --bg-secondary: #f8f9fa;\n  --bg-tertiary: #e9ecef;\n  --text-color: #333333;\n  --text-secondary: #666666;\n  --border-color: #e5e5e5;\n  --primary-color: #5470c6;\n  --accent-color: #91cc75;\n  --error-color: #dc3545;\n  --success-color: #28a745;\n  --warning-color: #ffc107;\n  --secondary-color: #6c757d;\n  --primary-hover: #4c63b6;\n  --secondary-hover: #5a6268;\n  --disabled-color: #a8a8a8;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n  --hover-bg: rgba(0, 0, 0, 0.02);\n}\n\n/* 暗黑主题CSS变量 */\n:root.dark,\n[data-theme=\"dark\"] {\n  --bg-color: #1e1e1e;\n  --bg-secondary: #2d2d2d;\n  --bg-tertiary: #3d3d3d;\n  --text-color: #e0e0e0;\n  --text-secondary: #b0b0b0;\n  --border-color: #404040;\n  --primary-color: #6b9eff;\n  --accent-color: #a8d068;\n  --error-color: #ff6b6b;\n  --success-color: #51cf66;\n  --warning-color: #ffd93d;\n  --secondary-color: #868e96;\n  --primary-hover: #5a8cff;\n  --secondary-hover: #767d84;\n  --disabled-color: #666666;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n  --hover-bg: rgba(255, 255, 255, 0.05);\n}\n\n.chart-config-panel {\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  background: var(--bg-color, #ffffff);\n  overflow-y: auto;\n  transition: all 0.3s ease;\n  animation: slideIn 0.5s ease;\n  /* 隐藏滚动条 */\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n.chart-config-panel::-webkit-scrollbar {\n  display: none; /* Chrome, Safari and Opera */\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* 面板总标题 */\n.panel-header {\n  margin-bottom: 25px;\n  padding: 20px 0 15px 0;\n  border-bottom: 2px solid var(--border-color, #e5e5e5);\n  transition: all 0.3s ease;\n  position: relative;\n  animation: fadeInDown 0.5s ease;\n}\n\n@keyframes fadeInDown {\n  from {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.panel-header::before {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  left: 0;\n  width: 0;\n  height: 2px;\n  background: linear-gradient(90deg, var(--primary-color), var(--accent-color));\n  transition: width 0.5s ease;\n}\n\n.panel-header:hover::before {\n  width: 100%;\n}\n\n.panel-header h3 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--text-color, #333333);\n  transition: color 0.3s ease;\n  position: relative;\n}\n\n/* 图表类型信息区域 */\n.chart-type-section {\n  margin-bottom: 25px;\n  animation: fadeInUp 0.5s ease;\n  animation-delay: 0.1s;\n  animation-fill-mode: both;\n}\n\n.chart-type-info {\n  padding: 16px;\n  background: var(--bg-secondary, #f8f9fa);\n  border-radius: 8px;\n  border: 1px solid var(--border-color, #e5e5e5);\n  transition: all 0.3s ease;\n}\n\n.chart-type-info:hover {\n  background: var(--bg-tertiary, #e9ecef);\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px var(--shadow-color, rgba(0, 0, 0, 0.1));\n}\n\n.chart-type-tag {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 6px 12px;\n  background: var(--primary-color, #5470c6);\n  color: white;\n  border-radius: 12px;\n  font-size: 12px;\n  font-weight: 500;\n  box-shadow: 0 2px 8px var(--shadow-color, rgba(84, 112, 198, 0.3));\n  margin-bottom: 8px;\n  transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.chart-type-icon {\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.chart-type-name {\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.chart-type-description {\n  font-size: 13px;\n  color: var(--text-secondary, #666666);\n  line-height: 1.4;\n}\n\n/* 映射状态指示器 */\n.mapping-section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  animation: slideInLeft 0.5s ease;\n  animation-delay: 0.3s;\n  animation-fill-mode: both;\n}\n\n.mapping-status {\n  display: inline-flex;\n  align-items: center;\n  padding: 4px 10px;\n  background: var(--error-color, #dc3545);\n  color: white;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.mapping-status.status-valid {\n  background: var(--success-color, #28a745);\n}\n\n/* 配置区域样式 */\n.basic-config-section,\n.custom-config-section {\n  margin-bottom: 25px;\n  animation: fadeInUp 0.5s ease;\n  animation-fill-mode: both;\n}\n\n.basic-config-section { animation-delay: 0.3s; }\n.custom-config-section { animation-delay: 0.4s; }\n\n/* 数据映射配置区域 */\n.mapping-section {\n  margin-bottom: 30px;\n  animation: fadeInUp 0.5s ease;\n  animation-delay: 0.2s;\n  animation-fill-mode: both;\n}\n\n.mapping-section-header h4,\n.section-header h4 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-color, #333333);\n}\n\n/* 过滤和配置区域 */\n.filter-section { \n  margin-bottom: 25px;\n  animation: fadeInUp 0.5s ease;\n  animation-fill-mode: both;\n  animation-delay: 0.5s; \n}\n\n/* 错误消息样式 */\n.error-text {\n  padding: 12px 16px;\n  background: var(--error-color, #dc3545);\n  color: white;\n  border-radius: 6px;\n  font-size: 13px;\n  font-weight: 500;\n  margin-top: 15px;\n  animation: slideInError 0.3s ease;\n}\n\n@keyframes slideInError {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 操作按钮 */\n.action-section {\n  display: flex;\n  gap: 12px;\n  margin-top: 30px;\n  animation: fadeInUp 0.6s ease;\n  animation-fill-mode: both;\n  animation-delay: 0.6s;\n}\n\n.apply-btn {\n  flex: 1;\n  padding: 12px 18px;\n  background: linear-gradient(135deg, var(--primary-color, #5470c6), var(--accent-color, #91cc75));\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0 4px 15px rgba(84, 112, 198, 0.3);\n}\n\n.apply-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n  transition: left 0.5s ease;\n}\n\n.apply-btn:hover:not(:disabled)::before {\n  left: 100%;\n}\n\n.apply-btn:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(84, 112, 198, 0.4);\n}\n\n.apply-btn:active:not(:disabled) {\n  transform: translateY(0);\n  box-shadow: 0 3px 10px rgba(84, 112, 198, 0.3);\n}\n\n.apply-btn:disabled {\n  background: var(--disabled-color, #a8a8a8);\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n  opacity: 0.6;\n}\n\n.reset-btn {\n  padding: 12px 18px;\n  background: transparent;\n  color: var(--text-secondary, #666666);\n  border: 2px solid var(--border-color, #e5e5e5);\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.reset-btn::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 100%;\n  background: var(--secondary-color, #6c757d);\n  transition: width 0.3s ease;\n  z-index: -1;\n}\n\n.reset-btn:hover::before {\n  width: 100%;\n}\n\n.reset-btn:hover {\n  color: white;\n  border-color: var(--secondary-color, #6c757d);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);\n}\n\n.reset-btn:active {\n  transform: translateY(0);\n  box-shadow: 0 2px 8px rgba(108, 117, 125, 0.2);\n}\n\n.required-star {\n    color: #ff5252;\n    font-weight: bold;\n    margin-left: 4px;\n}\n\n\n.required-star {\n    color: #ff5252;\n    font-weight: bold;\n    margin-left: 4px;\n}\n</style>\n"],"mappings":";;;AAgHA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,QAAQ,KAAI;AACpD,SAASC,cAAc,EAAEC,WAAW,QAAQ,4BAA2B;AACvE,SAASC,gBAAgB,QAAQ,0BAAyB;AAC1D,SAASC,iBAAiB,EAAEC,wBAAwB,EAAEC,mBAAmB,EAAEC,qBAAqB,QAAQ,6BAA4B;AACpI,OAAOC,YAAY,MAAM,oBAAmB;AAC5C,OAAOC,gBAAgB,MAAM,wBAAuB;;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;;IARA;IASA,MAAMC,KAAK,GAAGC,OAAA;;IAed;IACA,MAAMC,IAAI,GAAGC,MAAA;;IAEb;IACA,MAAMC,QAAQ,GAAGjB,GAAG,CAAC,IAAI;IACzB,MAAMkB,eAAe,GAAGlB,GAAG,CAAC,IAAI;IAChC,MAAMmB,gBAAgB,GAAGnB,GAAG,CAAC,KAAK;IAClC,MAAMoB,cAAc,GAAGpB,GAAG,CAAC,KAAK;IAChC,MAAMqB,YAAY,GAAGrB,GAAG,CAAC,EAAE;IAC3B,MAAMsB,SAAS,GAAGtB,GAAG,CAAC,KAAK;;IAE3B;IACA,MAAMuB,eAAe,GAAGvB,GAAG,CAAC,IAAI;;IAEhC;IACA,MAAMwB,aAAa,GAAGxB,GAAG,CAAC;MACxByB,aAAa,EAAE,CAAC,CAAC;MACjBC,OAAO,EAAE,CAAC;IACZ,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAG1B,QAAQ,CAAC,MAAM;MACxC,OAAOG,cAAc,CAACS,KAAK,CAACe,iBAAiB;IAC/C,CAAC;;IAED;IACA,MAAMC,aAAa,GAAG5B,QAAQ,CAAC,MAAM;MACnC,OAAOK,gBAAgB,CAACO,KAAK,CAACe,iBAAiB;IACjD,CAAC;;IAED;IACA,MAAME,gBAAgB,GAAG7B,QAAQ,CAAC,MAAM;MACtC,MAAM8B,aAAa,GAAGJ,kBAAkB,CAACK,KAAK,CAACC,mBAAmB,CAAC;MACnE,OAAOC,MAAM,CAACC,IAAI,CAACJ,aAAa,CAAC,CAACK,IAAI,CAACC,QAAQ,IAC7CA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,IAAIH,MAAM,CAACC,IAAI,CAACJ,aAAa,CAACM,QAAQ,CAAC,CAAC,CAACC,MAAM,GAAG,CAC/F;IACF,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAGtC,QAAQ,CAAC,MAAM;MACxC,MAAMuC,gBAAgB,GAAGb,kBAAkB,CAACK,KAAK,CAACC,mBAAmB,CAAC;MACtE,OAAO;QACL,GAAGO,gBAAgB,CAACC,KAAK;QACzB,GAAGD,gBAAgB,CAACE,KAAK;QACzB,GAAGF,gBAAgB,CAACG,SAAS;QAC7B,GAAGH,gBAAgB,CAACI;MACtB;IACF,CAAC;;IAED;IACA,MAAMC,mBAAmB,GAAG5C,QAAQ,CAAC,MAAM;MACzC,MAAMuC,gBAAgB,GAAGb,kBAAkB,CAACK,KAAK,CAACC,mBAAmB,CAAC;MACtE,MAAMa,aAAa,GAAG,CAAC;MAEvBZ,MAAM,CAACa,OAAO,CAACP,gBAAgB,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACX,QAAQ,EAAEX,OAAO,CAAC,KAAK;QAChE,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,CAACuB,QAAQ,CAACZ,QAAQ,CAAC,EAAE;UACzEH,MAAM,CAACgB,MAAM,CAACJ,aAAa,EAAEpB,OAAO;QACtC;MACF,CAAC;MAED,OAAOoB,aAAY;IACrB,CAAC;;IAED;IACA,MAAMK,iBAAiB,GAAGlD,QAAQ,CAAC,MAAM;MACvC,MAAMuC,gBAAgB,GAAGb,kBAAkB,CAACK,KAAK,CAACC,mBAAmB,CAAC;MACtE,OAAOO,gBAAgB,CAACY,IAAI,IAAI,CAAC;IACnC,CAAC;;IAED;IACA,MAAMC,gBAAgB,GAAGpD,QAAQ,CAAC,MAAM;MACtC,IAAI,CAACgB,QAAQ,CAACe,KAAK,EAAE,OAAO;QAAEsB,OAAO,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAG;MAEzD,IAAI;QACF,OAAO9C,mBAAmB,CAACQ,QAAQ,CAACe,KAAK;MAC3C,CAAC,CAAC,OAAOwB,KAAK,EAAE;QACd,OAAO;UAAEF,OAAO,EAAE,KAAK;UAAEC,MAAM,EAAE,CAACC,KAAK,CAACC,OAAO;QAAE;MACnD;IACF,CAAC;;IAED;IACA,MAAMC,iBAAiB,GAAGzD,QAAQ,CAAC,MAAM;MACvC,OAAOsB,eAAe,CAACS,KAAK,EAAE2B,UAAU,IAAI;QAAEL,OAAO,EAAE,KAAK;QAAEM,aAAa,EAAE;MAAG;IAClF,CAAC;;IAED;IACA,MAAMC,aAAa,GAAG5D,QAAQ,CAAC,MAAM;MACnC,OAAOyD,iBAAiB,CAAC1B,KAAK,CAACsB,OAAO,IAAID,gBAAgB,CAACrB,KAAK,CAACsB,OAAM;IACzE,CAAC;;IAED;IACA,SAASQ,mBAAmBA,CAACC,SAAS,EAAE;MACtC,MAAMC,QAAQ,GAAG1D,gBAAgB,CAACyD,SAAS;MAC3C,OAAOC,QAAQ,CAACC,WAAW,IAAI,SAAQ;IACzC;;IAEA;IACA,SAASC,iBAAiBA,CAAA,EAAG;MAC3BhD,eAAe,CAACc,KAAK,GAAG,CAACd,eAAe,CAACc,KAAI;IAC/C;IAEA,SAASmC,kBAAkBA,CAAA,EAAG;MAC5BhD,gBAAgB,CAACa,KAAK,GAAG,CAACb,gBAAgB,CAACa,KAAI;IACjD;IAEA,SAASoC,gBAAgBA,CAAA,EAAG;MAC1BhD,cAAc,CAACY,KAAK,GAAG,CAACZ,cAAc,CAACY,KAAI;IAC7C;;IAEA;IACA,SAASqC,mBAAmBA,CAACC,QAAQ,EAAE;MACrC9C,aAAa,CAACQ,KAAK,CAACP,aAAa,GAAG6C,QAAO;MAE3C,IAAIrD,QAAQ,CAACe,KAAK,EAAE;QAClBxB,wBAAwB,CAACS,QAAQ,CAACe,KAAK,EAAE;UACvCP,aAAa,EAAE6C;QACjB,CAAC;MACH;MAEAC,gBAAgB,CAAC;IACnB;;IAEA;IACA,SAASC,kBAAkBA,CAACnC,QAAQ,EAAEoC,GAAG,EAAEzC,KAAK,EAAE;MAChD,IAAI,CAACR,aAAa,CAACQ,KAAK,CAACN,OAAO,CAACW,QAAQ,CAAC,EAAE;QAC1Cb,aAAa,CAACQ,KAAK,CAACN,OAAO,CAACW,QAAQ,CAAC,GAAG,CAAC;MAC3C;MAEAb,aAAa,CAACQ,KAAK,CAACN,OAAO,CAACW,QAAQ,CAAC,CAACoC,GAAG,CAAC,GAAGzC,KAAI;MAEjD,IAAIf,QAAQ,CAACe,KAAK,EAAE;QAClBxB,wBAAwB,CAACS,QAAQ,CAACe,KAAK,EAAE;UACvCN,OAAO,EAAEF,aAAa,CAACQ,KAAK,CAACN;QAC/B,CAAC;MACH;MAEA6C,gBAAgB,CAAC;IACnB;;IAEA;IACA,SAASG,kBAAkBA,CAAClB,KAAK,EAAE;MACjCnC,YAAY,CAACW,KAAK,GAAGwB,KAAI;MACzB,IAAIA,KAAK,EAAE;QACTmB,UAAU,CAAC,MAAM;UACftD,YAAY,CAACW,KAAK,GAAG,EAAC;QACxB,CAAC,EAAE,IAAI;MACT;IACF;;IAEA;IACA,eAAe4C,aAAaA,CAAA,EAAG;MAC7B,IAAI,CAAC3D,QAAQ,CAACe,KAAK,IAAI,CAACnB,KAAK,CAACgE,gBAAgB,CAACvC,MAAM,EAAE;MAEvDhB,SAAS,CAACU,KAAK,GAAG,IAAG;MAErB,IAAI;QACF,MAAM8C,YAAY,GAAG,MAAMpE,qBAAqB,CAACO,QAAQ,CAACe,KAAK,EAAEnB,KAAK,CAACgE,gBAAgB;QACvFrD,aAAa,CAACQ,KAAK,CAACP,aAAa,GAAGqD,YAAW;;QAE/C;QACA,IAAIvD,eAAe,CAACS,KAAK,EAAE;UACzBT,eAAe,CAACS,KAAK,CAAC+C,cAAc,CAACD,YAAY;QACnD;QAEAP,gBAAgB,CAAC;MACnB,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdwB,OAAO,CAACxB,KAAK,CAAC,sBAAsB,EAAEA,KAAK;QAC3CnC,YAAY,CAACW,KAAK,GAAG,kBAAiB;MACxC,CAAC,SAAS;QACRV,SAAS,CAACU,KAAK,GAAG,KAAI;MACxB;IACF;;IAEA;IACA,SAASiD,aAAaA,CAAA,EAAG;MACvB,IAAI,CAACpB,aAAa,CAAC7B,KAAK,EAAE;QACxBX,YAAY,CAACW,KAAK,GAAG,UAAS;QAC9B;MACF;MAEA,MAAMkD,UAAU,GAAGvD,kBAAkB,CAACK,KAAK,CAACmD,eAAe,CACzD3D,aAAa,CAACQ,KAAK,CAACP,aAAa,EACjCD,aAAa,CAACQ,KAAK,CAACN,OACtB;MAEAX,IAAI,CAAC,gBAAgB,EAAEmE,UAAU;IACnC;;IAEA;IACA,SAASE,WAAWA,CAAA,EAAG;MACrB,IAAInE,QAAQ,CAACe,KAAK,EAAE;QAClB,MAAMqD,aAAa,GAAG1D,kBAAkB,CAACK,KAAK,CAACsD,gBAAgB,CAAC;QAEhE9E,wBAAwB,CAACS,QAAQ,CAACe,KAAK,EAAE;UACvCP,aAAa,EAAE,CAAC,CAAC;UACjBC,OAAO,EAAE2D;QACX,CAAC;QAED7D,aAAa,CAACQ,KAAK,GAAG;UACpBP,aAAa,EAAE,CAAC,CAAC;UACjBC,OAAO,EAAE2D;QACX;;QAEA;QACA,IAAI9D,eAAe,CAACS,KAAK,EAAE;UACzBT,eAAe,CAACS,KAAK,CAACuD,KAAK,CAAC;QAC9B;MACF;MAEAlE,YAAY,CAACW,KAAK,GAAG,EAAC;MACtBuC,gBAAgB,CAAC;IACnB;;IAEA;IACA,SAASiB,YAAYA,CAAA,EAAG;MACtB,IAAI,CAACvE,QAAQ,CAACe,KAAK,EAAE;MAErB,IAAI;QACF,MAAMyD,MAAM,GAAGC,mBAAmB,CAACF,YAAY,CAACvE,QAAQ,CAACe,KAAK;;QAE9D;QACA,MAAM2D,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACL,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;UAAEM,IAAI,EAAE;QAAmB,CAAC;QACrF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI;QACpC,MAAMQ,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG;QACpCF,CAAC,CAACG,IAAI,GAAGN,GAAE;QACXG,CAAC,CAACI,QAAQ,GAAG,gBAAgB1F,KAAK,CAACe,iBAAiB,IAAI,IAAI4E,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAM;QACpGP,CAAC,CAACQ,KAAK,CAAC;QACRV,GAAG,CAACW,eAAe,CAACZ,GAAG;MACzB,CAAC,CAAC,OAAOxC,KAAK,EAAE;QACdwB,OAAO,CAACxB,KAAK,CAAC,gBAAgB,EAAEA,KAAK;QACrCnC,YAAY,CAACW,KAAK,GAAG,QAAO;MAC9B;IACF;;IAEA;IACA,SAAS6E,YAAYA,CAACC,KAAK,EAAE;MAC3B,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;MACjC,IAAI,CAACF,IAAI,EAAE;MAEX,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC;MAC9BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACrB,IAAI;UACF,MAAMC,UAAU,GAAGzB,IAAI,CAAC0B,KAAK,CAACF,CAAC,CAACL,MAAM,CAACQ,MAAM;UAE7C,IAAIF,UAAU,CAACvD,SAAS,KAAKlD,KAAK,CAACe,iBAAiB,EAAE;YACpDP,YAAY,CAACW,KAAK,GAAG,sBAAqB;YAC1C;UACF;UAEA,MAAMyF,cAAc,GAAG/B,mBAAmB,CAACmB,YAAY,CAACS,UAAU;UAClErG,QAAQ,CAACe,KAAK,GAAGyF,cAAc,CAACC,EAAC;UACjClG,aAAa,CAACQ,KAAK,GAAG;YACpBP,aAAa,EAAEgG,cAAc,CAAChG,aAAa;YAC3CC,OAAO,EAAE+F,cAAc,CAAC/F;UAC1B;;UAEA;UACA,IAAIH,eAAe,CAACS,KAAK,EAAE;YACzBT,eAAe,CAACS,KAAK,CAAC+C,cAAc,CAAC0C,cAAc,CAAChG,aAAa;UACnE;UAEA8C,gBAAgB,CAAC;QACnB,CAAC,CAAC,OAAOf,KAAK,EAAE;UACdwB,OAAO,CAACxB,KAAK,CAAC,gBAAgB,EAAEA,KAAK;UACrCnC,YAAY,CAACW,KAAK,GAAG,gBAAe;QACtC;MACF;MACAkF,MAAM,CAACS,UAAU,CAACZ,IAAI;IACxB;;IAEA;IACA,SAASxC,gBAAgBA,CAAA,EAAG;MAC1BxD,IAAI,CAAC,eAAe,EAAE;QACpBgD,SAAS,EAAElD,KAAK,CAACe,iBAAiB;QAClCX,QAAQ,EAAEA,QAAQ,CAACe,KAAK;QACxB,GAAGR,aAAa,CAACQ;MACnB,CAAC;IACH;;IAEA;IACA,SAAS4F,gBAAgBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAMnC,MAAM,GAAGlF,iBAAiB,CAACM,KAAK,CAACe,iBAAiB;QACxDX,QAAQ,CAACe,KAAK,GAAGyD,MAAM,CAACiC,EAAC;QACzBlG,aAAa,CAACQ,KAAK,GAAG;UACpBP,aAAa,EAAEgE,MAAM,CAAChE,aAAa;UACnCC,OAAO,EAAE+D,MAAM,CAAC/D;QAClB;;QAEA;QACA,IAAIb,KAAK,CAACgE,gBAAgB,CAACvC,MAAM,GAAG,CAAC,EAAE;UACrCsC,aAAa,CAAC;QAChB;QAEAL,gBAAgB,CAAC;MACnB,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdwB,OAAO,CAACxB,KAAK,CAAC,8BAA8B,EAAEA,KAAK;QACnDnC,YAAY,CAACW,KAAK,GAAG,SAAQ;MAC/B;IACF;;IAEA;IACA9B,KAAK,CAAC,MAAMW,KAAK,CAACe,iBAAiB,EAAGiG,OAAO,IAAK;MAChD;MACAD,gBAAgB,CAAC;;MAEjB;MACA,IAAI9F,gBAAgB,CAACE,KAAK,EAAE;QAC1Bb,gBAAgB,CAACa,KAAK,GAAG,IAAG;MAC9B;IACF,CAAC;;IAED;IACA9B,KAAK,CAAC,MAAMW,KAAK,CAACgE,gBAAgB,EAAGiD,UAAU,IAAK;MAClD,IAAIA,UAAU,CAACxF,MAAM,GAAG,CAAC,IAAIrB,QAAQ,CAACe,KAAK,EAAE;QAC3C4C,aAAa,CAAC;MAChB;IACF,CAAC,EAAE;MAAEmD,IAAI,EAAE;IAAK,CAAC;;IAEjB;IACA5H,SAAS,CAAC,MAAM;MACdyH,gBAAgB,CAAC;IACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}