{"ast":null,"code":"/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n */\nimport { fileCacheService, backendService } from './FileCacheService.js';\nconst API_BASE_URL = '/api';\n\n/**\n * 智能上传文件 - 根据后端连接状态决定上传方式\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n  // 首先添加到本地缓存\n  const cachedFile = await fileCacheService.addFile(file);\n\n  // 如果后端连接，尝试上传到服务器\n  if (backendService.getConnectionStatus()) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`${API_BASE_URL}/files/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const result = await response.json();\n        // 更新缓存中的文件状态\n        cachedFile.status = 'uploaded';\n        cachedFile.serverId = result.fileId;\n        fileCacheService.saveToStorage();\n        return {\n          ...cachedFile,\n          serverId: result.fileId\n        };\n      }\n    } catch (error) {\n      console.error('服务器上传失败，使用本地缓存:', error);\n    }\n  }\n\n  // 返回本地缓存的文件信息\n  return cachedFile;\n}\n\n/**\n * 同步本地文件到服务器\n * @param {string} fileId - 本地文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToServer(fileId) {\n  const file = fileCacheService.getFile(fileId);\n  if (!file || file.status !== 'local') {\n    throw new Error('文件不存在或已同步');\n  }\n\n  // 这里需要重新获取原始文件，实际应用中可能需要重新上传\n  // 暂时返回模拟结果\n  return new Promise(resolve => {\n    setTimeout(() => {\n      file.status = 'uploaded';\n      file.serverId = 'server_' + Date.now();\n      fileCacheService.saveToStorage();\n      resolve(file);\n    }, 1000);\n  });\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`);\n    if (!response.ok) {\n      throw new Error('Failed to get preview');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('获取文件预览失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 从服务器删除文件\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Delete failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('删除文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newName\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Rename failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('重命名文件失败:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["fileCacheService","backendService","API_BASE_URL","uploadFile","file","cachedFile","addFile","getConnectionStatus","formData","FormData","append","response","fetch","method","body","ok","result","json","status","serverId","fileId","saveToStorage","error","console","syncFileToServer","getFile","Error","Promise","resolve","setTimeout","Date","now","getFilePreview","deleteFile","renameFile","newName","headers","JSON","stringify","name"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n */\nimport { fileCacheService, backendService } from './FileCacheService.js'\n\nconst API_BASE_URL = '/api'\n\n/**\n * 智能上传文件 - 根据后端连接状态决定上传方式\n * @param {File} file - 要上传的文件对象\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file) {\n    // 首先添加到本地缓存\n    const cachedFile = await fileCacheService.addFile(file)\n    \n    // 如果后端连接，尝试上传到服务器\n    if (backendService.getConnectionStatus()) {\n        try {\n            const formData = new FormData()\n            formData.append('file', file)\n\n            const response = await fetch(`${API_BASE_URL}/files/upload`, {\n                method: 'POST',\n                body: formData\n            })\n\n            if (response.ok) {\n                const result = await response.json()\n                // 更新缓存中的文件状态\n                cachedFile.status = 'uploaded'\n                cachedFile.serverId = result.fileId\n                fileCacheService.saveToStorage()\n                return { ...cachedFile, serverId: result.fileId }\n            }\n        } catch (error) {\n            console.error('服务器上传失败，使用本地缓存:', error)\n        }\n    }\n    \n    // 返回本地缓存的文件信息\n    return cachedFile\n}\n\n/**\n * 同步本地文件到服务器\n * @param {string} fileId - 本地文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToServer(fileId) {\n    const file = fileCacheService.getFile(fileId)\n    if (!file || file.status !== 'local') {\n        throw new Error('文件不存在或已同步')\n    }\n\n    // 这里需要重新获取原始文件，实际应用中可能需要重新上传\n    // 暂时返回模拟结果\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            file.status = 'uploaded'\n            file.serverId = 'server_' + Date.now()\n            fileCacheService.saveToStorage()\n            resolve(file)\n        }, 1000)\n    })\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`)\n        if (!response.ok) {\n            throw new Error('Failed to get preview')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('获取文件预览失败:', error)\n        throw error\n    }\n}\n\n/**\n * 从服务器删除文件\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n            method: 'DELETE'\n        })\n        if (!response.ok) {\n            throw new Error('Delete failed')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('删除文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileId}/rename`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ name: newName })\n        })\n        if (!response.ok) {\n            throw new Error('Rename failed')\n        }\n        return await response.json()\n    } catch (error) {\n        console.error('重命名文件失败:', error)\n        throw error\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}