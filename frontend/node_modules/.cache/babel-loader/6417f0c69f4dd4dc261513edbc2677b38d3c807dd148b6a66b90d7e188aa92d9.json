{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, vModelCheckbox as _vModelCheckbox, createCommentVNode as _createCommentVNode, vShow as _vShow, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"advanced-section\"\n};\nconst _hoisted_2 = {\n  class: \"adv-content\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"line-style-panel\"\n};\nconst _hoisted_4 = {\n  style: {\n    \"font-weight\": \"bold\",\n    \"margin-bottom\": \"4px\"\n  }\n};\nconst _hoisted_5 = {\n  style: {\n    \"display\": \"flex\",\n    \"gap\": \"8px\",\n    \"align-items\": \"center\"\n  }\n};\nconst _hoisted_6 = [\"onUpdate:modelValue\"];\nconst _hoisted_7 = [\"onUpdate:modelValue\"];\nconst _hoisted_8 = [\"onUpdate:modelValue\"];\nconst _hoisted_9 = {\n  style: {\n    \"margin-top\": \"6px\"\n  }\n};\nconst _hoisted_10 = [\"onUpdate:modelValue\"];\nconst _hoisted_11 = [\"for\"];\nconst _hoisted_12 = [\"onUpdate:modelValue\"];\nconst _hoisted_13 = [\"onUpdate:modelValue\"];\nconst _hoisted_14 = [\"onUpdate:modelValue\"];\nconst _hoisted_15 = {\n  style: {\n    \"max-height\": \"120px\",\n    \"overflow\": \"auto\",\n    \"margin-top\": \"6px\"\n  }\n};\nconst _hoisted_16 = {\n  style: {\n    \"width\": \"100%\",\n    \"font-size\": \"13px\"\n  }\n};\nconst _hoisted_17 = [\"onUpdate:modelValue\"];\nconst _hoisted_18 = [\"onUpdate:modelValue\"];\nconst _hoisted_19 = [\"onUpdate:modelValue\"];\nconst _hoisted_20 = [\"onClick\"];\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = [\"min\", \"max\", \"value\", \"onInput\"];\nconst _hoisted_23 = [\"checked\", \"onChange\"];\nconst _hoisted_24 = [\"value\", \"onInput\"];\nconst _hoisted_25 = [\"value\", \"onChange\"];\nconst _hoisted_26 = [\"value\"];\nimport { ref, watch } from 'vue';\nexport default {\n  __name: 'ChartAdvancedConfig',\n  props: {\n    advancedConfig: Array,\n    modelValue: Object\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    /* eslint-disable */\n    // 折线样式与数据点样式相关方法\n    function resetPointStyle(line, pt) {\n      pt.symbol = 'circle';\n      pt.color = line.lineColor;\n    }\n    function batchSetPointStyle(line) {\n      // 简单示例：全部点设为统一样式\n      line.points.forEach(pt => {\n        pt.symbol = line.pointSymbol || 'circle';\n        pt.color = line.pointColor || line.lineColor;\n      });\n    }\n    /* no-undef */\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const localConfig = ref({\n      ...props.modelValue\n    });\n    const isCollapsed = ref(true);\n    watch(() => props.modelValue, val => {\n      localConfig.value = {\n        ...val\n      };\n    });\n    function updateField(key, value) {\n      localConfig.value[key] = value;\n      emit('update:modelValue', {\n        ...localConfig.value\n      });\n    }\n    function toggleCollapse() {\n      isCollapsed.value = !isCollapsed.value;\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n        class: \"section-header adv-header\",\n        onClick: toggleCollapse\n      }, [_cache[0] || (_cache[0] = _createElementVNode(\"h4\", null, \"Advanced Settings\", -1)), _createElementVNode(\"span\", {\n        class: _normalizeClass([\"collapse-icon\", {\n          collapsed: isCollapsed.value\n        }])\n      }, \"▼\", 2)]), _createVNode(_Transition, {\n        name: \"collapse\"\n      }, {\n        default: _withCtx(() => [_withDirectives(_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.advancedConfig, item => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: item.key,\n            class: \"config-item\"\n          }, [item.type === 'lineSeriesStylePanel' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[11] || (_cache[11] = _createElementVNode(\"h4\", {\n            style: {\n              \"margin-bottom\": \"8px\"\n            }\n          }, \"折线样式与数据点样式\", -1)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(localConfig.value.lineSeriesStyles || [], (line, idx) => {\n            return _openBlock(), _createElementBlock(\"div\", {\n              key: line.name,\n              class: \"line-style-block\"\n            }, [_createElementVNode(\"div\", _hoisted_4, \"系列\" + _toDisplayString(idx + 1) + \"（\" + _toDisplayString(line.name) + \"）\", 1), _createElementVNode(\"div\", _hoisted_5, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", null, \"线型\", -1)), _withDirectives(_createElementVNode(\"select\", {\n              \"onUpdate:modelValue\": $event => line.lineType = $event\n            }, _cache[1] || (_cache[1] = [_createElementVNode(\"option\", {\n              value: \"solid\"\n            }, \"实线\", -1), _createElementVNode(\"option\", {\n              value: \"dashed\"\n            }, \"虚线\", -1), _createElementVNode(\"option\", {\n              value: \"dotted\"\n            }, \"点线\", -1)]), 8, _hoisted_6), [[_vModelSelect, line.lineType]]), _cache[3] || (_cache[3] = _createElementVNode(\"label\", null, \"颜色\", -1)), _withDirectives(_createElementVNode(\"input\", {\n              type: \"color\",\n              \"onUpdate:modelValue\": $event => line.lineColor = $event,\n              style: {\n                \"width\": \"32px\",\n                \"height\": \"24px\"\n              }\n            }, null, 8, _hoisted_7), [[_vModelText, line.lineColor]]), _cache[4] || (_cache[4] = _createElementVNode(\"label\", null, \"线宽\", -1)), _withDirectives(_createElementVNode(\"input\", {\n              type: \"number\",\n              \"onUpdate:modelValue\": $event => line.lineWidth = $event,\n              min: \"1\",\n              max: \"10\",\n              style: {\n                \"width\": \"48px\"\n              }\n            }, null, 8, _hoisted_8), [[_vModelText, line.lineWidth]])]), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              \"onUpdate:modelValue\": $event => line.pointUnified = $event,\n              id: \"pointUnified-{{idx}}\"\n            }, null, 8, _hoisted_10), [[_vModelCheckbox, line.pointUnified]]), _createElementVNode(\"label\", {\n              for: 'pointUnified-' + idx\n            }, \"所有点统一样式\", 8, _hoisted_11), line.pointUnified ? (_openBlock(), _createElementBlock(_Fragment, {\n              key: 0\n            }, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n              style: {\n                \"margin-left\": \"12px\"\n              }\n            }, \"点形状\", -1)), _withDirectives(_createElementVNode(\"select\", {\n              \"onUpdate:modelValue\": $event => line.pointSymbol = $event\n            }, _cache[5] || (_cache[5] = [_createElementVNode(\"option\", {\n              value: \"circle\"\n            }, \"圆形\", -1), _createElementVNode(\"option\", {\n              value: \"rect\"\n            }, \"方形\", -1), _createElementVNode(\"option\", {\n              value: \"triangle\"\n            }, \"三角\", -1)]), 8, _hoisted_12), [[_vModelSelect, line.pointSymbol]]), _cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n              style: {\n                \"margin-left\": \"12px\"\n              }\n            }, \"颜色\", -1)), _withDirectives(_createElementVNode(\"input\", {\n              type: \"color\",\n              \"onUpdate:modelValue\": $event => line.pointColor = $event,\n              style: {\n                \"width\": \"32px\",\n                \"height\": \"24px\"\n              }\n            }, null, 8, _hoisted_13), [[_vModelText, line.pointColor]]), _cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n              style: {\n                \"margin-left\": \"12px\"\n              }\n            }, \"大小\", -1)), _withDirectives(_createElementVNode(\"input\", {\n              type: \"number\",\n              \"onUpdate:modelValue\": $event => line.pointSize = $event,\n              min: \"1\",\n              max: \"30\",\n              style: {\n                \"width\": \"48px\"\n              }\n            }, null, 8, _hoisted_14), [[_vModelText, line.pointSize, void 0, {\n              number: true\n            }]])], 64)) : (_openBlock(), _createElementBlock(_Fragment, {\n              key: 1\n            }, [_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"table\", _hoisted_16, [_cache[10] || (_cache[10] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"索引\"), _createElementVNode(\"th\", null, \"值\"), _createElementVNode(\"th\", null, \"点形状\"), _createElementVNode(\"th\", null, \"颜色\"), _createElementVNode(\"th\", null, \"大小\"), _createElementVNode(\"th\", null, \"操作\")])], -1)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(line.points, pt => {\n              return _openBlock(), _createElementBlock(\"tr\", {\n                key: pt.index\n              }, [_createElementVNode(\"td\", null, _toDisplayString(pt.index), 1), _createElementVNode(\"td\", null, _toDisplayString(pt.value), 1), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"select\", {\n                \"onUpdate:modelValue\": $event => pt.symbol = $event\n              }, _cache[9] || (_cache[9] = [_createElementVNode(\"option\", {\n                value: \"circle\"\n              }, \"圆形\", -1), _createElementVNode(\"option\", {\n                value: \"rect\"\n              }, \"方形\", -1), _createElementVNode(\"option\", {\n                value: \"triangle\"\n              }, \"三角\", -1)]), 8, _hoisted_17), [[_vModelSelect, pt.symbol]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n                type: \"color\",\n                \"onUpdate:modelValue\": $event => pt.color = $event,\n                style: {\n                  \"width\": \"32px\",\n                  \"height\": \"24px\"\n                }\n              }, null, 8, _hoisted_18), [[_vModelText, pt.color]])]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n                type: \"number\",\n                \"onUpdate:modelValue\": $event => pt.size = $event,\n                min: \"1\",\n                max: \"30\",\n                style: {\n                  \"width\": \"48px\"\n                }\n              }, null, 8, _hoisted_19), [[_vModelText, pt.size, void 0, {\n                number: true\n              }]])]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n                onClick: $event => resetPointStyle(line, pt)\n              }, \"恢复默认\", 8, _hoisted_20)])]);\n            }), 128))])])]), _createElementVNode(\"button\", {\n              onClick: $event => batchSetPointStyle(line)\n            }, \"批量设置\", 8, _hoisted_21)], 64))])]);\n          }), 128))])) : (_openBlock(), _createElementBlock(_Fragment, {\n            key: 1\n          }, [_createElementVNode(\"label\", null, _toDisplayString(item.label), 1), item.type === 'number' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 0,\n            type: \"number\",\n            min: item.min,\n            max: item.max,\n            value: localConfig.value[item.key],\n            onInput: $event => updateField(item.key, $event.target.valueAsNumber)\n          }, null, 40, _hoisted_22)) : _createCommentVNode(\"\", true), item.type === 'checkbox' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 1,\n            type: \"checkbox\",\n            checked: localConfig.value[item.key],\n            onChange: $event => updateField(item.key, $event.target.checked)\n          }, null, 40, _hoisted_23)) : _createCommentVNode(\"\", true), item.type === 'text' ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 2,\n            type: \"text\",\n            value: localConfig.value[item.key],\n            onInput: $event => updateField(item.key, $event.target.value)\n          }, null, 40, _hoisted_24)) : _createCommentVNode(\"\", true), item.type === 'select' ? (_openBlock(), _createElementBlock(\"select\", {\n            key: 3,\n            value: localConfig.value[item.key],\n            onChange: $event => updateField(item.key, $event.target.value)\n          }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.options, option => {\n            return _openBlock(), _createElementBlock(\"option\", {\n              key: option.value,\n              value: option.value\n            }, _toDisplayString(option.label), 9, _hoisted_26);\n          }), 128))], 40, _hoisted_25)) : _createCommentVNode(\"\", true)], 64))]);\n        }), 128))], 512), [[_vShow, !isCollapsed.value]])]),\n        _: 1\n      })]);\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","resetPointStyle","line","pt","symbol","color","lineColor","batchSetPointStyle","points","forEach","pointSymbol","pointColor","props","__props","emit","__emit","localConfig","modelValue","isCollapsed","val","value","updateField","key","toggleCollapse"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/ChartAdvancedConfig.vue"],"sourcesContent":["<template>\n<div class=\"advanced-section\">\n    <div class=\"section-header adv-header\" @click=\"toggleCollapse\">\n        <h4>Advanced Settings</h4>\n        <span class=\"collapse-icon\" :class=\"{ collapsed: isCollapsed }\">&#9660;</span>\n    </div>\n    <transition name=\"collapse\">\n        <div v-show=\"!isCollapsed\" class=\"adv-content\">\n            <div v-for=\"item in advancedConfig\" :key=\"item.key\" class=\"config-item\">\n                <template v-if=\"item.type === 'lineSeriesStylePanel'\">\n                    <div class=\"line-style-panel\">\n                        <h4 style=\"margin-bottom:8px;\">折线样式与数据点样式</h4>\n                        <div v-for=\"(line, idx) in localConfig.lineSeriesStyles || []\" :key=\"line.name\" class=\"line-style-block\">\n                            <div style=\"font-weight:bold;margin-bottom:4px;\">系列{{ idx+1 }}（{{ line.name }}）</div>\n                            <div style=\"display:flex;gap:8px;align-items:center;\">\n                                <label>线型</label>\n                                <select v-model=\"line.lineType\">\n                                    <option value=\"solid\">实线</option>\n                                    <option value=\"dashed\">虚线</option>\n                                    <option value=\"dotted\">点线</option>\n                                </select>\n                                <label>颜色</label>\n                                <input type=\"color\" v-model=\"line.lineColor\" style=\"width:32px;height:24px;\" />\n                                <label>线宽</label>\n                                <input type=\"number\" v-model=\"line.lineWidth\" min=\"1\" max=\"10\" style=\"width:48px;\" />\n                            </div>\n                            <div style=\"margin-top:6px;\">\n                                <input type=\"checkbox\" v-model=\"line.pointUnified\" id=\"pointUnified-{{idx}}\" />\n                                <label :for=\"'pointUnified-'+idx\">所有点统一样式</label>\n                                <template v-if=\"line.pointUnified\">\n                                    <label style=\"margin-left:12px;\">点形状</label>\n                                    <select v-model=\"line.pointSymbol\">\n                                        <option value=\"circle\">圆形</option>\n                                        <option value=\"rect\">方形</option>\n                                        <option value=\"triangle\">三角</option>\n                                    </select>\n                                    <label style=\"margin-left:12px;\">颜色</label>\n                                    <input type=\"color\" v-model=\"line.pointColor\" style=\"width:32px;height:24px;\" />\n                                    <label style=\"margin-left:12px;\">大小</label>\n                                    <input type=\"number\" v-model.number=\"line.pointSize\" min=\"1\" max=\"30\" style=\"width:48px;\" />\n                                </template>\n                                <template v-else>\n                                    <div style=\"max-height:120px;overflow:auto;margin-top:6px;\">\n                                        <table style=\"width:100%;font-size:13px;\">\n                                            <thead><tr><th>索引</th><th>值</th><th>点形状</th><th>颜色</th><th>大小</th><th>操作</th></tr></thead>\n                                            <tbody>\n                                                <tr v-for=\"pt in line.points\" :key=\"pt.index\">\n                                                    <td>{{ pt.index }}</td>\n                                                    <td>{{ pt.value }}</td>\n                                                    <td>\n                                                        <select v-model=\"pt.symbol\">\n                                                            <option value=\"circle\">圆形</option>\n                                                            <option value=\"rect\">方形</option>\n                                                            <option value=\"triangle\">三角</option>\n                                                        </select>\n                                                    </td>\n                                                    <td><input type=\"color\" v-model=\"pt.color\" style=\"width:32px;height:24px;\" /></td>\n                                                    <td><input type=\"number\" v-model.number=\"pt.size\" min=\"1\" max=\"30\" style=\"width:48px;\" /></td>\n                                                    <td><button @click=\"resetPointStyle(line, pt)\">恢复默认</button></td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                    <button @click=\"batchSetPointStyle(line)\">批量设置</button>\n                                </template>\n                            </div>\n                        </div>\n                    </div>\n                </template>\n                <template v-else>\n                    <!-- 组件标题 -->\n                    <label>{{ item.label }}</label>\n                    <input v-if=\"item.type === 'number'\" type=\"number\"\n                    :min=\"item.min\" :max=\"item.max\"\n                    :value=\"localConfig[item.key]\"\n                    @input=\"updateField(item.key, $event.target.valueAsNumber)\" />\n                    <input v-if=\"item.type === 'checkbox'\" type=\"checkbox\"\n                    :checked=\"localConfig[item.key]\"\n                    @change=\"updateField(item.key, $event.target.checked)\" />\n                    <input v-if=\"item.type === 'text'\" type=\"text\"\n                    :value=\"localConfig[item.key]\"\n                    @input=\"updateField(item.key, $event.target.value)\" />\n                    <select v-if=\"item.type === 'select'\" :value=\"localConfig[item.key]\" @change=\"updateField(item.key, $event.target.value)\">\n                        <option v-for=\"option in item.options\" :key=\"option.value\" :value=\"option.value\">{{ option.label }}</option>\n                    </select>\n                </template>\n            </div>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\n// 折线样式与数据点样式相关方法\nfunction resetPointStyle(line, pt) {\n    pt.symbol = 'circle';\n    pt.color = line.lineColor;\n}\nfunction batchSetPointStyle(line) {\n    // 简单示例：全部点设为统一样式\n    line.points.forEach(pt => {\n        pt.symbol = line.pointSymbol || 'circle';\n        pt.color = line.pointColor || line.lineColor;\n    });\n}\n/* no-undef */\n/* eslint-disable */\nimport { ref, watch } from 'vue'\nconst props = defineProps({\n    advancedConfig: Array,\n    modelValue: Object\n})\nconst emit = defineEmits(['update:modelValue'])\n\nconst localConfig = ref({ ...props.modelValue })\nconst isCollapsed = ref(true)\n\nwatch(() => props.modelValue, (val) => {\n    localConfig.value = { ...val }\n})\n\nfunction updateField(key, value) {\n    localConfig.value[key] = value\n    emit('update:modelValue', { ...localConfig.value })\n}\n\nfunction toggleCollapse() {\n    isCollapsed.value = !isCollapsed.value\n}\n</script>\n\n<style scoped>\n.advanced-section {\n    margin-bottom: 16px;\n    border-radius: 8px;\n    background: var(--bg-secondary);\n    box-shadow: 0 1px 2px rgba(0,0,0,0.03);\n}\n.adv-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 8px 12px;\n    user-select: none;\n}\n.collapse-icon {\n    font-size: 16px;\n    margin-left: 8px;\n    transition: transform 0.2s;\n}\n.collapse-icon.collapsed {\n    transform: rotate(-90deg);\n}\n.adv-content {\n    padding: 8px 16px 12px 16px;\n}\n.config-item {\n    margin-bottom: 12px;\n}\n.collapse-enter-active, .collapse-leave-active {\n    transition: max-height 0.25s cubic-bezier(.4,0,.2,1), opacity 0.2s;\n}\n.collapse-enter-from, .collapse-leave-to {\n    max-height: 0;\n    opacity: 0;\n    overflow: hidden;\n}\n.collapse-enter-to, .collapse-leave-from {\n    max-height: 300px;\n    opacity: 1;\n}\ninput[type=\"number\"], input[type=\"text\"] {\n    background: var(--bg-secondary);\n    color: var(--text-main);\n    border: 1px solid var(--text-secondary);\n    border-radius: 6px;\n    padding: 2px 8px;\n    font-size: 14px;\n    outline: none;\n    transition: border-color 0.2s;\n}\ninput[type=\"checkbox\"] {\n    accent-color: #3b82f6;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA,SAASA,GAAG,EAAEC,KAAK,QAAQ,KAAI;;;;;;;;;;;IAf/B;IACA;IACA,SAASC,eAAeA,CAACC,IAAI,EAAEC,EAAE,EAAE;MAC/BA,EAAE,CAACC,MAAM,GAAG,QAAQ;MACpBD,EAAE,CAACE,KAAK,GAAGH,IAAI,CAACI,SAAS;IAC7B;IACA,SAASC,kBAAkBA,CAACL,IAAI,EAAE;MAC9B;MACAA,IAAI,CAACM,MAAM,CAACC,OAAO,CAACN,EAAE,IAAI;QACtBA,EAAE,CAACC,MAAM,GAAGF,IAAI,CAACQ,WAAW,IAAI,QAAQ;QACxCP,EAAE,CAACE,KAAK,GAAGH,IAAI,CAACS,UAAU,IAAIT,IAAI,CAACI,SAAS;MAChD,CAAC,CAAC;IACN;IACA;IACA;IAEA,MAAMM,KAAK,GAAGC,OAAA;IAId,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,WAAW,GAAGjB,GAAG,CAAC;MAAE,GAAGa,KAAK,CAACK;IAAW,CAAC;IAC/C,MAAMC,WAAW,GAAGnB,GAAG,CAAC,IAAI;IAE5BC,KAAK,CAAC,MAAMY,KAAK,CAACK,UAAU,EAAGE,GAAG,IAAK;MACnCH,WAAW,CAACI,KAAK,GAAG;QAAE,GAAGD;MAAI;IACjC,CAAC;IAED,SAASE,WAAWA,CAACC,GAAG,EAAEF,KAAK,EAAE;MAC7BJ,WAAW,CAACI,KAAK,CAACE,GAAG,CAAC,GAAGF,KAAI;MAC7BN,IAAI,CAAC,mBAAmB,EAAE;QAAE,GAAGE,WAAW,CAACI;MAAM,CAAC;IACtD;IAEA,SAASG,cAAcA,CAAA,EAAG;MACtBL,WAAW,CAACE,KAAK,GAAG,CAACF,WAAW,CAACE,KAAI;IACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}