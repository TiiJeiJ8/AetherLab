{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-display\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"empty-tip\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  ref: \"chartRef\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$setup.hasSeries ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" SVG动画轮播组件 \"), _createVNode($setup[\"AnimateIcon\"], {\n    \"icon-list\": $setup.iconList,\n    interval: 7500,\n    fade: 600\n  }), _cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"empty-title\"\n  }, \"No Chart Data\", -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"empty-desc\"\n  }, [_createTextVNode(\"Select a chart type on the left and configure your data to \"), _createElementVNode(\"span\", {\n    class: \"faststart\"\n  }, \"get started fast\"), _createTextVNode(\" with visualization!\")], -1 /* HOISTED */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */))]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","$setup","hasSeries","_hoisted_2","_createCommentVNode","_createVNode","iconList","interval","fade","_createElementVNode","_createTextVNode","_hoisted_3"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\frontend\\src\\components\\Chart\\ChartDisplay.vue"],"sourcesContent":["<template>\n<div class=\"chart-display\">\n    <div v-if=\"!hasSeries\" class=\"empty-tip\">\n        <!-- SVG动画轮播组件 -->\n        <AnimateIcon :icon-list=\"iconList\" :interval=\"7500\" :fade=\"600\" />\n        <div class=\"empty-title\">No Chart Data</div>\n        <div class=\"empty-desc\">Select a chart type on the left and configure your data to <span class=\"faststart\">get started fast</span> with visualization!</div>\n    </div>\n    <div v-else ref=\"chartRef\" class=\"chart-container\"></div>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\nconst currentIcon = computed(() => {\n    const icon = iconList[iconIndex.value]\n    return icon && typeof icon === 'object' ? icon : null\n})\n/* eslint-disable */\nimport { ref, watch, onMounted, onBeforeUnmount, computed } from 'vue'\nimport LineChartIcon from '../svg/LineChartIcon.vue'\nimport BarChartIcon from '../svg/BarChartIcon.vue'\nimport PieChartIcon from '../svg/PieChartIcon.vue'\nimport ScatterChartIcon from '../svg/ScatterChartIcon.vue'\nimport MapChartIcon from '../svg/MapChartIcon.vue'\nimport KlineChartIcon from '../svg/KlineChartIcon.vue'\nimport RadarChartIcon from '../svg/RadarChartIcon.vue'\nimport BoxplotChartIcon from '../svg/BoxplotChartIcon.vue'\nimport HeatmapChartIcon from '../svg/HeatmapChartIcon.vue'\nimport GraphChartIcon from '../svg/GraphChartIcon.vue'\nimport TreeChartIcon from '../svg/TreeChartIcon.vue'\nimport TreemapChartIcon from '../svg/TreemapChartIcon.vue'\nimport SunburstChartIcon from '../svg/SunburstChartIcon.vue'\nimport ParallelChartIcon from '../svg/ParallelChartIcon.vue'\nimport SankeyChartIcon from '../svg/SankeyChartIcon.vue'\nimport FunnelChartIcon from '../svg/FunnelChartIcon.vue'\nimport GaugeChartIcon from '../svg/GaugeChartIcon.vue'\nimport PictorialBarChartIcon from '../svg/PictorialBarChartIcon.vue'\nimport ThemeRiverChartIcon from '../svg/ThemeRiverChartIcon.vue'\nimport CalendarChartIcon from '../svg/CalendarChartIcon.vue'\nimport AnimateIcon from '../Common/AnimateIcon.vue'\nimport * as echarts from 'echarts'\n\n// 主题缓存, 避免污染echarts对象\nconst themeCache = {}\n\n// 动态加载并注册主题\nasync function loadAndRegisterTheme(themeName) {\n    if (themeCache[themeName]) return\n    try {\n        const res = await fetch(`/themes/${themeName}.json`)\n        if (!res.ok) throw new Error('Theme file loads failed')\n        const obj = await res.json()\n        echarts.registerTheme(themeName, obj)\n        themeCache[themeName] = { themeObj: obj }\n    } catch (e) {\n        console.warn('Theme load failed:', themeName, e)\n    }\n}\n\n/**\n * Props\n * @prop {Object} option - ECharts 配置对象，必填\n * @prop {String} colorTheme - 主题名，默认 'default'\n */\nconst props = defineProps({\n    option: { type: Object, required: true },\n    colorTheme: { type: String, default: 'default' }\n})\n\nconst chartRef = ref(null)\nlet chartInstance = null\nlet resizeObserver = null\n\nconst hasSeries = computed(() => {\n    return props.option && Array.isArray(props.option.series) && props.option.series.length > 0\n})\n\n// 空状态图标轮播逻辑\nconst iconList = [\n    BarChartIcon,\n    LineChartIcon,\n    PieChartIcon,\n    ScatterChartIcon,\n    MapChartIcon,\n    KlineChartIcon,\n    RadarChartIcon,\n    BoxplotChartIcon,\n    HeatmapChartIcon,\n    GraphChartIcon,\n    TreeChartIcon,\n    TreemapChartIcon,\n    SunburstChartIcon,\n    ParallelChartIcon,\n    SankeyChartIcon,\n    FunnelChartIcon,\n    GaugeChartIcon,\n    PictorialBarChartIcon,\n    ThemeRiverChartIcon,\n    CalendarChartIcon,\n]\nconst iconIndex = ref(0)\nconst iconOpacity = ref(1)\nlet iconTimer = null\nlet fadeTimer = null\n\nfunction startIconLoop() {\n    clearInterval(iconTimer)\n    clearTimeout(fadeTimer)\n    iconOpacity.value = 1\n    iconTimer = setInterval(() => {\n        // 先淡出\n        iconOpacity.value = 0\n        fadeTimer = setTimeout(() => {\n            iconIndex.value = (iconIndex.value + 1) % iconList.length\n            iconOpacity.value = 1\n        }, 400)\n    }, 3500)\n}\n\n// 获取对比色函数\nfunction getContrastColor(bg) {\n    let r, g, b\n    if (!bg) return '#333'\n    if (bg.startsWith('#')) {\n        if (bg.length === 4) {\n        r = parseInt(bg[1] + bg[1], 16)\n        g = parseInt(bg[2] + bg[2], 16)\n        b = parseInt(bg[3] + bg[3], 16)\n        } else if (bg.length === 7) {\n        r = parseInt(bg.slice(1, 3), 16)\n        g = parseInt(bg.slice(3, 5), 16)\n        b = parseInt(bg.slice(5, 7), 16)\n        }\n    } else if (bg.startsWith('rgb')) {\n        const arr = bg.match(/\\d+/g)\n        if (arr && arr.length >= 3) {\n        r = parseInt(arr[0])\n        g = parseInt(arr[1])\n        b = parseInt(arr[2])\n        }\n    }\n    if (r === undefined || g === undefined || b === undefined) return '#eee'\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b)\n    return luminance > 180 ? '#222' : '#333'\n}\n\nfunction getCssVar(name) {\n    return getComputedStyle(document.documentElement).getPropertyValue(name).trim()\n}\nfunction isTransparent(bg) {\n    if (!bg) return true\n    if (bg === 'transparent') return true\n    if (bg.startsWith('rgba')) {\n        const arr = bg.match(/\\d+(\\.\\d+)?/g)\n        if (arr && arr.length === 4 && parseFloat(arr[3]) === 0) return true\n    }\n    return false\n}\n\nasync function renderChart() {\n    console.log('Start rendering chart')\n    console.log('value of hasSeries:', hasSeries.value)\n    if (!hasSeries.value) return\n    if (chartInstance) {\n        chartInstance.dispose()\n        chartInstance = null\n    }\n    const themeName = props.colorTheme\n    await loadAndRegisterTheme(props.colorTheme)\n    console.log('Rendering chart with theme:', themeName)\n    chartInstance = echarts.init(chartRef.value, themeName)\n    if (props.option) {\n        const option = JSON.parse(JSON.stringify(props.option))\n        // legend位置自适应处理\n        if (option.legend && option.legend.top) {\n            const pos = option.legend.top\n            if (pos === 'left' || pos === 'right') {\n                option.legend.orient = 'vertical'\n                option.legend.top = 40\n                option.legend.left = pos === 'left' ? 0 : undefined\n                option.legend.right = pos === 'right' ? 0 : undefined\n                option.legend.width = 80\n            } else if (pos === 'top') {\n                option.legend.orient = 'horizontal'\n                option.legend.top = option.title ? 36 : 16 // 避免与标题重叠\n                option.legend.left = 'center'\n                option.legend.right = undefined\n                option.legend.width = undefined\n            } else if (pos === 'bottom') {\n                option.legend.orient = 'horizontal'\n                option.legend.top = undefined\n                option.legend.left = 'center'\n                option.legend.right = undefined\n                option.legend.bottom = 0\n                option.legend.width = undefined\n            }\n        }\n        // 动态处理x轴标签过长和过密\n        // x轴标签过长处理\n        if (option.xAxis && option.xAxis.data && Array.isArray(option.xAxis.data)) {\n            const labelCount = option.xAxis.data.length\n            if (!option.xAxis.axisLabel) option.xAxis.axisLabel = {}\n            if (labelCount > 12) {\n                option.xAxis.axisLabel.rotate = 45\n            }\n            if (labelCount > 40) {\n                option.xAxis.axisLabel.interval = Math.ceil(labelCount / 20)\n            } else {\n                option.xAxis.axisLabel.interval = 0\n            }\n            option.xAxis.axisLabel.overflow = 'truncate'\n            option.xAxis.axisLabel.width = 80\n            option.xAxis.axisLabel.ellipsis = '...'\n        }\n        console.log('[Rendering Theme]Setting chart option:', option)\n        chartInstance.setOption(option, { notMerge: true, replaceMerge: ['series'] })\n    }\n}\n\nonMounted(() => {\n    startIconLoop()\n    renderChart()\n    // 监听容器大小变化，自适应图表\n    if (window.ResizeObserver) {\n        resizeObserver = new ResizeObserver(() => {\n            if (chartInstance) chartInstance.resize()\n        })\n        if (chartRef.value) resizeObserver.observe(chartRef.value)\n    } else {\n        window.addEventListener('resize', () => {\n            if (chartInstance) chartInstance.resize()\n        })\n    }\n})\n\nonBeforeUnmount(() => {\n    if (chartInstance) chartInstance.dispose()\n    clearInterval(iconTimer)\n    clearTimeout(fadeTimer)\n    if (resizeObserver && chartRef.value) resizeObserver.unobserve(chartRef.value)\n})\n\nwatch([() => props.option, () => props.colorTheme], renderChart, { deep: true })\nonMounted(renderChart)\nonBeforeUnmount(() => {\n    if (chartInstance) chartInstance.dispose()\n})\n</script>\n\n<style scoped>\n.chart-display {\n    width: 100%;\n    height: 100%;\n    min-height: clamp(300px, 40vh, 600px);\n    max-width: 100vw;\n    max-height: 80vh;\n    background: var(--bg-color, #fff);\n    border-radius: clamp(8px, 2vw, 12px);\n    box-shadow: 0 0 1px 1px var(--text-color);\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: clamp(10px, 2vw, 20px) clamp(32px, 4vw, 48px); /* 增大左右内边距 */\n    overflow-x: auto; /* 横向可滚动，防止legend溢出 */\n    overflow-y: auto;\n}\n\n.chart-container {\n    width: 100% !important;\n    height: 100% !important;\n    min-height: 320px;\n    min-width: 0;\n    max-width: 100vw;\n    max-height: 80vh;\n    overflow: visible; /* 允许legend溢出显示 */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.empty-tip {\n    color: #888;\n    text-align: center;\n    letter-spacing: 1px;\n    padding: 24px 10px 10px 10px;\n    user-select: none;\n    background: none;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n.empty-svg {\n    margin-bottom: 15px;\n    opacity: 0.92;\n    animation: floatX 3.2s ease-in-out infinite;\n    will-change: transform;\n}\n.dynamic-line-svg .line-path {\n    stroke-dasharray: 120;\n    stroke-dashoffset: 120;\n    animation: line-draw 1.2s cubic-bezier(.4,1.6,.6,1) forwards;\n}\n.dynamic-line-svg .dot {\n    opacity: 0;\n    transform: scale(0.5);\n    animation: dot-pop 0.5s cubic-bezier(.4,1.6,.6,1) forwards;\n}\n.dynamic-line-svg .dot1 { animation-delay: 0.7s; }\n.dynamic-line-svg .dot2 { animation-delay: 0.85s; }\n.dynamic-line-svg .dot3 { animation-delay: 1.0s; }\n.dynamic-line-svg .dot4 { animation-delay: 1.15s; }\n.dynamic-line-svg .dot5 { animation-delay: 1.3s; }\n@keyframes line-draw {\n    to { stroke-dashoffset: 0; }\n}\n@keyframes dot-pop {\n    0% { opacity: 0; transform: scale(0.5); }\n    60% { opacity: 1; transform: scale(1.2); }\n    100% { opacity: 1; transform: scale(1); }\n}\n@keyframes floatX {\n    0% { transform: translateY(0) translateX(0); }\n    25% { transform: translateY(-8px) translateX(4px); }\n    50% { transform: translateY(-12px) translateX(-4px); }\n    75% { transform: translateY(-8px) translateX(4px); }\n    100% { transform: translateY(0) translateX(0); }\n}\n.empty-title {\n    font-size: 1.25em;\n    font-weight: bold;\n    color: #4F8EF7;\n    margin-bottom: 6px;\n}\n.empty-desc {\n    font-size: 1em;\n    color: #666;\n    margin-top: 2px;\n}\n.faststart {\n    color: #FFB300;\n    font-weight: bold;\n}\n\n/* 小屏幕适配 */\n@media (max-width: 767px) {\n    .chart-display {\n        height: 100%;\n        padding: 8px;\n        border-radius: 8px;\n    }\n    .empty-tip {\n        font-size: 0.95em;\n        padding: 10px 2px 6px 2px;\n    }\n    .empty-title {\n        font-size: 1.05em;\n    }\n    .empty-desc {\n        font-size: 0.95em;\n    }\n    .empty-svg svg {\n        width: 44px;\n        height: 44px;\n    }\n}\n</style>\n"],"mappings":";;EACKA,KAAK,EAAC;AAAe;;EAD1BC,GAAA;EAE2BD,KAAK,EAAC;;;EAFjCC,GAAA;EAQgBC,GAAG,EAAC,UAAU;EAACF,KAAK,EAAC;;;uBAPrCG,mBAAA,CAQM,OARNC,UAQM,G,CAPUC,MAAA,CAAAC,SAAS,I,cAArBH,mBAAA,CAKM,OALNI,UAKM,GAJFC,mBAAA,eAAkB,EAClBC,YAAA,CAAkEJ,MAAA;IAApD,WAAS,EAAEA,MAAA,CAAAK,QAAQ;IAAGC,QAAQ,EAAE,IAAI;IAAGC,IAAI,EAAE;gCAC3DC,mBAAA,CAA4C;IAAvCb,KAAK,EAAC;EAAa,GAAC,eAAa,sB,0BACtCa,mBAAA,CAA4J;IAAvJb,KAAK,EAAC;EAAY,IAN/Bc,gBAAA,CAMgC,6DAA2D,GAAAD,mBAAA,CAA+C;IAAzCb,KAAK,EAAC;EAAW,GAAC,kBAAgB,GANnIc,gBAAA,CAM0I,sBAAoB,E,yCAE1JX,mBAAA,CAAyD,OAAzDY,UAAyD,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}