{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n/* eslint-disable */\n/*TODO For backend */\nimport { onMounted } from 'vue';\n\n// 批量同步所有本地文件\nasync function syncAllFiles() {\n  const localFiles = files.value.filter(file => file.status === 'local');\n  if (localFiles.length === 0) {\n    alert('No files to sync');\n    return;\n  }\n  if (!isBackendConnected.value) {\n    alert('Backend not connected, unable to sync');\n    return;\n  }\n  if (confirm(`Are you sure you want to sync ${localFiles.length} files to the backend?`)) {\n    for (let i = 0; i < localFiles.length; i++) {\n      const fileIndex = files.value.findIndex(f => f.id === localFiles[i].id);\n      if (fileIndex !== -1) {\n        await syncFile(fileIndex);\n      }\n    }\n  }\n}\n\n// 刷新文件列表\nasync function refreshFiles() {\n  await checkConnectionStatus();\n  await loadFiles();\n}\n\n// 处理文件\nasync function processFiles(newFiles) {\n  const validFiles = newFiles.filter(file => {\n    const ext = file.name.split('.').pop().toLowerCase();\n    return ['csv', 'xlsx', 'xls'].includes(ext);\n  });\n  if (validFiles.length !== newFiles.length) {\n    alert('Only CSV, XLSX, XLS format files are supported');\n  }\n  for (const file of validFiles) {\n    try {\n      // 添加文件到列表（正在上传状态）\n      const fileItem = {\n        id: Date.now() + Math.random(),\n        name: file.name,\n        size: file.size,\n        status: 'uploading',\n        isEditing: false,\n        newName: file.name,\n        rows: 0,\n        columns: 0,\n        createdAt: new Date().toISOString(),\n        uploadProgress: 0 // 添加上传进度\n      };\n      files.value.push(fileItem);\n\n      // 调用智能上传 API，支持进度回调\n      const uploadedFile = await uploadFile(file, progress => {\n        // 更新上传进度\n        const index = files.value.findIndex(f => f.id === fileItem.id);\n        if (index !== -1) {\n          files.value[index].uploadProgress = progress.percentage;\n        }\n      });\n\n      // 更新文件状态\n      const index = files.value.findIndex(f => f.id === fileItem.id);\n      if (index !== -1) {\n        files.value[index] = {\n          ...uploadedFile,\n          isEditing: false,\n          newName: uploadedFile.name,\n          uploadProgress: 100\n        };\n      }\n    } catch (error) {\n      console.error('File processing failed:', error);\n      // 更新失败状态\n      const index = files.value.findIndex(f => f.name === file.name);\n      if (index !== -1) {\n        files.value[index].status = 'error';\n        files.value[index].uploadProgress = 0;\n      }\n    }\n  }\n}\n\n// 取消文件上传\nfunction cancelFileUpload(idx) {\n  const file = files.value[idx];\n  if (file.status === 'uploading') {\n    const success = cancelUpload(file.id);\n    if (success) {\n      file.status = 'error';\n      file.uploadProgress = 0;\n      console.log(`已取消上传: ${file.name}`);\n    }\n  }\n}\n\n// 同步文件到后端\nasync function syncFile(idx) {\n  const file = files.value[idx];\n  try {\n    file.status = 'uploading';\n    const syncedFile = await syncFileToBackend(file.id);\n    files.value[idx] = {\n      ...syncedFile,\n      isEditing: false,\n      newName: syncedFile.name\n    };\n  } catch (error) {\n    console.error('Sync failed:', error);\n    alert('Sync failed: ' + error.message);\n    file.status = 'local';\n  }\n}\n\n// 页面加载时检查后端连接并加载文件\nonMounted(async () => {\n  await checkConnectionStatus();\n  await loadFiles();\n});\n\n// 检查后端连接状态\nasync function checkConnectionStatus() {\n  isBackendConnected.value = await checkBackendConnection();\n}","map":{"version":3,"names":["onMounted","syncAllFiles","localFiles","files","value","filter","file","status","length","alert","isBackendConnected","confirm","i","fileIndex","findIndex","f","id","syncFile","refreshFiles","checkConnectionStatus","loadFiles","processFiles","newFiles","validFiles","ext","name","split","pop","toLowerCase","includes","fileItem","Date","now","Math","random","size","isEditing","newName","rows","columns","createdAt","toISOString","uploadProgress","push","uploadedFile","uploadFile","progress","index","percentage","error","console","cancelFileUpload","idx","success","cancelUpload","log","syncedFile","syncFileToBackend","message","checkBackendConnection"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/services/FileUpload.js"],"sourcesContent":["/* eslint-disable */\n/*TODO For backend */\nimport { onMounted } from 'vue'\n\n// 批量同步所有本地文件\nasync function syncAllFiles() {\n    const localFiles = files.value.filter(file => file.status === 'local')\n\n    if (localFiles.length === 0) {\n        alert('No files to sync')\n        return\n    }\n\n    if (!isBackendConnected.value) {\n        alert('Backend not connected, unable to sync')\n        return\n    }\n\n    if (confirm(`Are you sure you want to sync ${localFiles.length} files to the backend?`)) {\n        for (let i = 0; i < localFiles.length; i++) {\n            const fileIndex = files.value.findIndex(f => f.id === localFiles[i].id)\n            if (fileIndex !== -1) {\n                await syncFile(fileIndex)\n            }\n        }\n    }\n}\n\n// 刷新文件列表\nasync function refreshFiles() {\n    await checkConnectionStatus()\n    await loadFiles()\n}\n\n// 处理文件\nasync function processFiles(newFiles) {\n    const validFiles = newFiles.filter(file => {\n        const ext = file.name.split('.').pop().toLowerCase()\n        return ['csv', 'xlsx', 'xls'].includes(ext)\n    })\n\n    if (validFiles.length !== newFiles.length) {\n        alert('Only CSV, XLSX, XLS format files are supported')\n    }\n\n    for (const file of validFiles) {\n        try {\n            // 添加文件到列表（正在上传状态）\n            const fileItem = {\n                id: Date.now() + Math.random(),\n                name: file.name,\n                size: file.size,\n                status: 'uploading',\n                isEditing: false,\n                newName: file.name,\n                rows: 0,\n                columns: 0,\n                createdAt: new Date().toISOString(),\n                uploadProgress: 0 // 添加上传进度\n            }\n            files.value.push(fileItem)\n\n            // 调用智能上传 API，支持进度回调\n            const uploadedFile = await uploadFile(file, (progress) => {\n                // 更新上传进度\n                const index = files.value.findIndex(f => f.id === fileItem.id)\n                if (index !== -1) {\n                    files.value[index].uploadProgress = progress.percentage\n                }\n            })\n\n            // 更新文件状态\n            const index = files.value.findIndex(f => f.id === fileItem.id)\n            if (index !== -1) {\n                files.value[index] = {\n                    ...uploadedFile,\n                    isEditing: false,\n                    newName: uploadedFile.name,\n                    uploadProgress: 100\n                }\n            }\n        } catch (error) {\n            console.error('File processing failed:', error)\n            // 更新失败状态\n            const index = files.value.findIndex(f => f.name === file.name)\n            if (index !== -1) {\n                files.value[index].status = 'error'\n                files.value[index].uploadProgress = 0\n            }\n        }\n    }\n}\n\n// 取消文件上传\nfunction cancelFileUpload(idx) {\n    const file = files.value[idx]\n    if (file.status === 'uploading') {\n        const success = cancelUpload(file.id)\n        if (success) {\n            file.status = 'error'\n            file.uploadProgress = 0\n            console.log(`已取消上传: ${file.name}`)\n        }\n    }\n}\n\n// 同步文件到后端\nasync function syncFile(idx) {\n    const file = files.value[idx]\n    try {\n        file.status = 'uploading'\n        const syncedFile = await syncFileToBackend(file.id)\n        files.value[idx] = {\n            ...syncedFile,\n            isEditing: false,\n            newName: syncedFile.name\n        }\n    } catch (error) {\n        console.error('Sync failed:', error)\n        alert('Sync failed: ' + error.message)\n        file.status = 'local'\n    }\n}\n\n\n// 页面加载时检查后端连接并加载文件\nonMounted(async () => {\n    await checkConnectionStatus()\n    await loadFiles()\n})\n\n// 检查后端连接状态\nasync function checkConnectionStatus() {\n    isBackendConnected.value = await checkBackendConnection()\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}