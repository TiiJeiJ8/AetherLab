{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* eslint-disable */\n\n// 平行坐标系图配置生成器\n// 平行坐标系图配置生成器\nexport default function parallelOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n  // 解包数据\n  const {\n    dimensions,\n    name\n  } = seriesData;\n  if (!dimensions || !name || !Array.isArray(dimensions) || !Array.isArray(name)) {\n    return {};\n  }\n\n  // 1. 获取所有维度名（不包含 Category）\n  // 假设 name[0] 里所有 key，去掉 'Category' 或其它分组字段\n  const allKeys = Object.keys(name[0]);\n  const groupKey = 'Category'; // 可根据实际情况调整\n  const dimensionNames = allKeys.filter(k => k !== groupKey);\n\n  // 2. 构造 parallelAxis（只用 dimensions 字段）\n  const parallelAxis = dimensionNames.map((dim, idx) => {\n    // 判断类型\n    const isNumber = typeof name[0][dim] === 'number';\n    return {\n      dim: idx,\n      name: dim,\n      type: isNumber ? 'value' : 'category'\n    };\n  });\n\n  // 3. 按 Category 分组，生成 series\n  // 先将所有数据合并为一个数组\n  const allData = Array.isArray(name) ? name : [];\n  // 分组\n  const groupMap = {};\n  allData.forEach(item => {\n    const key = item[groupKey] || '未分类';\n    if (!groupMap[key]) groupMap[key] = [];\n    groupMap[key].push(item);\n  });\n  const series = Object.entries(groupMap).map(([cat, arr]) => ({\n    name: cat,\n    type: 'parallel',\n    lineStyle: {\n      width: 2\n    },\n    data: arr.map(item => dimensionNames.map(dim => item[dim]))\n  }));\n\n  // 4. 组装 option\n  const option = {\n    parallelAxis,\n    parallel: {\n      left: '5%',\n      right: '13%',\n      bottom: '10%',\n      parallelAxisDefault: {\n        type: 'value',\n        nameLocation: 'end',\n        nameGap: 20\n      }\n    },\n    series,\n    ...customOption\n  };\n  return option;\n}","map":{"version":3,"names":["parallelOption","config","fileDataMap","xData","yDataArr","selectedChartType","seriesData","customOption","dimensions","name","Array","isArray","allKeys","Object","keys","groupKey","dimensionNames","filter","k","parallelAxis","map","dim","idx","isNumber","type","allData","groupMap","forEach","item","key","push","series","entries","cat","arr","lineStyle","width","data","option","parallel","left","right","bottom","parallelAxisDefault","nameLocation","nameGap"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/chartOptions/parallel.js"],"sourcesContent":["/* eslint-disable */\n\n// 平行坐标系图配置生成器\n// 平行坐标系图配置生成器\nexport default function parallelOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n    // 解包数据\n    const { dimensions, name } = seriesData;\n\n    if (!dimensions || !name || !Array.isArray(dimensions) || !Array.isArray(name)) {\n        return {};\n    }\n\n\n    // 1. 获取所有维度名（不包含 Category）\n    // 假设 name[0] 里所有 key，去掉 'Category' 或其它分组字段\n    const allKeys = Object.keys(name[0]);\n    const groupKey = 'Category'; // 可根据实际情况调整\n    const dimensionNames = allKeys.filter(k => k !== groupKey);\n\n    // 2. 构造 parallelAxis（只用 dimensions 字段）\n    const parallelAxis = dimensionNames.map((dim, idx) => {\n        // 判断类型\n        const isNumber = typeof name[0][dim] === 'number';\n        return {\n            dim: idx,\n            name: dim,\n            type: isNumber ? 'value' : 'category'\n        };\n    });\n\n    // 3. 按 Category 分组，生成 series\n    // 先将所有数据合并为一个数组\n    const allData = Array.isArray(name) ? name : [];\n    // 分组\n    const groupMap = {};\n    allData.forEach(item => {\n        const key = item[groupKey] || '未分类';\n        if (!groupMap[key]) groupMap[key] = [];\n        groupMap[key].push(item);\n    });\n\n    const series = Object.entries(groupMap).map(([cat, arr]) => ({\n        name: cat,\n        type: 'parallel',\n        lineStyle: {\n            width: 2\n        },\n        data: arr.map(item => dimensionNames.map(dim => item[dim]))\n    }));\n\n    // 4. 组装 option\n    const option = {\n        parallelAxis,\n        parallel: {\n            left: '5%',\n            right: '13%',\n            bottom: '10%',\n            parallelAxisDefault: {\n                type: 'value',\n                nameLocation: 'end',\n                nameGap: 20\n            }\n        },\n        series,\n        ...customOption\n    };\n\n    return option;\n}"],"mappings":";;;;;AAAA;;AAEA;AACA;AACA,eAAe,SAASA,cAAcA,CAACC,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,YAAY,GAAG,CAAC,CAAC,EAAE;EAC3H;EACA,MAAM;IAAEC,UAAU;IAAEC;EAAK,CAAC,GAAGH,UAAU;EAEvC,IAAI,CAACE,UAAU,IAAI,CAACC,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IAC5E,OAAO,CAAC,CAAC;EACb;;EAGA;EACA;EACA,MAAMG,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMM,QAAQ,GAAG,UAAU,CAAC,CAAC;EAC7B,MAAMC,cAAc,GAAGJ,OAAO,CAACK,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,QAAQ,CAAC;;EAE1D;EACA,MAAMI,YAAY,GAAGH,cAAc,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClD;IACA,MAAMC,QAAQ,GAAG,OAAOd,IAAI,CAAC,CAAC,CAAC,CAACY,GAAG,CAAC,KAAK,QAAQ;IACjD,OAAO;MACHA,GAAG,EAAEC,GAAG;MACRb,IAAI,EAAEY,GAAG;MACTG,IAAI,EAAED,QAAQ,GAAG,OAAO,GAAG;IAC/B,CAAC;EACL,CAAC,CAAC;;EAEF;EACA;EACA,MAAME,OAAO,GAAGf,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EAC/C;EACA,MAAMiB,QAAQ,GAAG,CAAC,CAAC;EACnBD,OAAO,CAACE,OAAO,CAACC,IAAI,IAAI;IACpB,MAAMC,GAAG,GAAGD,IAAI,CAACb,QAAQ,CAAC,IAAI,KAAK;IACnC,IAAI,CAACW,QAAQ,CAACG,GAAG,CAAC,EAAEH,QAAQ,CAACG,GAAG,CAAC,GAAG,EAAE;IACtCH,QAAQ,CAACG,GAAG,CAAC,CAACC,IAAI,CAACF,IAAI,CAAC;EAC5B,CAAC,CAAC;EAEF,MAAMG,MAAM,GAAGlB,MAAM,CAACmB,OAAO,CAACN,QAAQ,CAAC,CAACN,GAAG,CAAC,CAAC,CAACa,GAAG,EAAEC,GAAG,CAAC,MAAM;IACzDzB,IAAI,EAAEwB,GAAG;IACTT,IAAI,EAAE,UAAU;IAChBW,SAAS,EAAE;MACPC,KAAK,EAAE;IACX,CAAC;IACDC,IAAI,EAAEH,GAAG,CAACd,GAAG,CAACQ,IAAI,IAAIZ,cAAc,CAACI,GAAG,CAACC,GAAG,IAAIO,IAAI,CAACP,GAAG,CAAC,CAAC;EAC9D,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMiB,MAAM,GAAG;IACXnB,YAAY;IACZoB,QAAQ,EAAE;MACNC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,KAAK;MACZC,MAAM,EAAE,KAAK;MACbC,mBAAmB,EAAE;QACjBnB,IAAI,EAAE,OAAO;QACboB,YAAY,EAAE,KAAK;QACnBC,OAAO,EAAE;MACb;IACJ,CAAC;IACDd,MAAM;IACN,GAAGxB;EACP,CAAC;EAED,OAAO+B,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}