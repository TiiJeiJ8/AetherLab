{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, watch } from 'vue';\nexport default {\n  __name: 'ChartAdvancedConfig',\n  props: {\n    advancedConfig: Array,\n    modelValue: Object\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n\n    /* eslint-disable */\n    // 折线样式与数据点样式相关方法\n    function resetPointStyle(line, pt) {\n      pt.symbol = 'circle';\n      pt.color = line.lineColor;\n    }\n    function batchSetPointStyle(line) {\n      // 简单示例：全部点设为统一样式\n      line.points.forEach(pt => {\n        pt.symbol = line.pointSymbol || 'circle';\n        pt.color = line.pointColor || line.lineColor;\n      });\n    }\n    /* no-undef */\n    /* eslint-disable */\n    const props = __props;\n    const emit = __emit;\n    const localConfig = ref({\n      ...props.modelValue\n    });\n    const isCollapsed = ref(true);\n    watch(() => props.modelValue, val => {\n      localConfig.value = {\n        ...val\n      };\n    });\n    function updateField(key, value) {\n      localConfig.value[key] = value;\n      emit('update:modelValue', {\n        ...localConfig.value\n      });\n    }\n    function toggleCollapse() {\n      isCollapsed.value = !isCollapsed.value;\n    }\n    const __returned__ = {\n      resetPointStyle,\n      batchSetPointStyle,\n      props,\n      emit,\n      localConfig,\n      isCollapsed,\n      updateField,\n      toggleCollapse,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","resetPointStyle","line","pt","symbol","color","lineColor","batchSetPointStyle","points","forEach","pointSymbol","pointColor","props","__props","emit","__emit","localConfig","modelValue","isCollapsed","val","value","updateField","key","toggleCollapse"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/components/Chart/ChartAdvancedConfig.vue"],"sourcesContent":["<template>\n<div class=\"advanced-section\">\n    <div class=\"section-header adv-header\" @click=\"toggleCollapse\">\n        <h4>Advanced Settings</h4>\n        <span class=\"collapse-icon\" :class=\"{ collapsed: isCollapsed }\">&#9660;</span>\n    </div>\n    <transition name=\"collapse\">\n        <div v-show=\"!isCollapsed\" class=\"adv-content\">\n            <div v-for=\"item in advancedConfig\" :key=\"item.key\" class=\"config-item\">\n                <template v-if=\"item.type === 'lineSeriesStylePanel'\">\n                    <div class=\"line-style-panel\">\n                        <h4 style=\"margin-bottom:8px;\">Line Style & Data Point Style</h4>\n                        <div v-for=\"(line, idx) in localConfig.lineSeriesStyles || []\" :key=\"line.name\" class=\"line-style-block\">\n                            <div style=\"font-weight:bold;margin-bottom:4px;\">Series {{ idx+1 }} ({{ line.name }})</div>\n                            <div style=\"display:flex;gap:8px;align-items:center;\">\n                                <label>Line Type</label>\n                                <select v-model=\"line.lineType\">\n                                    <option value=\"solid\">Solid</option>\n                                    <option value=\"dashed\">Dashed</option>\n                                    <option value=\"dotted\">Dotted</option>\n                                </select>\n                                <label>Color</label>\n                                <input type=\"color\" v-model=\"line.lineColor\" style=\"width:32px;height:24px;\" />\n                                <br />\n                                <label>Line Width</label>\n                                <input type=\"number\" v-model=\"line.lineWidth\" min=\"1\" max=\"10\" style=\"width:48px;\" />\n                            </div>\n                            <div style=\"margin-top:6px;\">\n                                <input type=\"checkbox\" v-model=\"line.pointUnified\" id=\"pointUnified-{{idx}}\" />\n                                <label :for=\"'pointUnified-'+idx\">Unified style for all points</label>\n                                <br />\n                                <template v-if=\"line.pointUnified\">\n                                    <label style=\"margin-left:12px;\">Dot Shape</label>\n                                    <select v-model=\"line.pointSymbol\">\n                                        <option value=\"circle\">Circle</option>\n                                        <option value=\"rect\">Rectangle</option>\n                                        <option value=\"triangle\">Triangle</option>\n                                    </select>\n                                    <label style=\"margin-left:12px;\">Color</label>\n                                    <input type=\"color\" v-model=\"line.pointColor\" style=\"width:32px;height:24px;\" />\n                                    <br />\n                                    <label style=\"margin-left:12px;\">Size</label>\n                                    <input type=\"number\" v-model.number=\"line.pointSize\" min=\"1\" max=\"30\" style=\"width:48px;\" />\n                                </template>\n                                <template v-else>\n                                    <div style=\"max-height:120px;overflow:auto;margin-top:6px;\">\n                                        <table style=\"width:100%;font-size:13px;\">\n                                            <thead><tr><th>Index</th><th>Value</th><th>Dot Shape</th><th>Color</th><th>Size</th><th>Action</th></tr></thead>\n                                            <tbody>\n                                                <tr v-for=\"pt in line.points\" :key=\"pt.index\">\n                                                    <td>{{ pt.index }}</td>\n                                                    <td>{{ pt.value }}</td>\n                                                    <td>\n                                                        <select v-model=\"pt.symbol\">\n                                                            <option value=\"circle\">Circle</option>\n                                                            <option value=\"rect\">Rectangle</option>\n                                                            <option value=\"triangle\">Triangle</option>\n                                                        </select>\n                                                    </td>\n                                                    <td><input type=\"color\" v-model=\"pt.color\" style=\"width:32px;height:24px;\" /></td>\n                                                    <td><input type=\"number\" v-model.number=\"pt.size\" min=\"1\" max=\"30\" style=\"width:48px;\" /></td>\n                                                    <td><button @click=\"resetPointStyle(line, pt)\">Reset</button></td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                    <button @click=\"batchSetPointStyle(line)\">Batch Set</button>\n                                </template>\n                            </div>\n                        </div>\n                    </div>\n                </template>\n                <template v-else>\n                    <!-- 组件标题 -->\n                    <label>{{ item.label }}</label>\n                    <input v-if=\"item.type === 'number'\" type=\"number\"\n                    :min=\"item.min\" :max=\"item.max\"\n                    :value=\"localConfig[item.key]\"\n                    @input=\"updateField(item.key, $event.target.valueAsNumber)\" />\n                    <input v-if=\"item.type === 'checkbox'\" type=\"checkbox\"\n                    :checked=\"localConfig[item.key]\"\n                    @change=\"updateField(item.key, $event.target.checked)\" />\n                    <input v-if=\"item.type === 'text'\" type=\"text\"\n                    :value=\"localConfig[item.key]\"\n                    @input=\"updateField(item.key, $event.target.value)\" />\n                    <select v-if=\"item.type === 'select'\" :value=\"localConfig[item.key]\" @change=\"updateField(item.key, $event.target.value)\">\n                        <option v-for=\"option in item.options\" :key=\"option.value\" :value=\"option.value\">{{ option.label }}</option>\n                    </select>\n                </template>\n            </div>\n        </div>\n    </transition>\n</div>\n</template>\n\n<script setup>\n/* eslint-disable */\n// 折线样式与数据点样式相关方法\nfunction resetPointStyle(line, pt) {\n    pt.symbol = 'circle';\n    pt.color = line.lineColor;\n}\nfunction batchSetPointStyle(line) {\n    // 简单示例：全部点设为统一样式\n    line.points.forEach(pt => {\n        pt.symbol = line.pointSymbol || 'circle';\n        pt.color = line.pointColor || line.lineColor;\n    });\n}\n/* no-undef */\n/* eslint-disable */\nimport { ref, watch } from 'vue'\nconst props = defineProps({\n    advancedConfig: Array,\n    modelValue: Object\n})\nconst emit = defineEmits(['update:modelValue'])\n\nconst localConfig = ref({ ...props.modelValue })\nconst isCollapsed = ref(true)\n\nwatch(() => props.modelValue, (val) => {\n    localConfig.value = { ...val }\n})\n\nfunction updateField(key, value) {\n    localConfig.value[key] = value\n    emit('update:modelValue', { ...localConfig.value })\n}\n\nfunction toggleCollapse() {\n    isCollapsed.value = !isCollapsed.value\n}\n</script>\n\n<style scoped>\n.advanced-section {\n    margin-bottom: 16px;\n    border-radius: 8px;\n    background: var(--bg-secondary);\n    box-shadow: 0 1px 2px rgba(0,0,0,0.03);\n}\n.adv-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 8px 12px;\n    user-select: none;\n}\n.collapse-icon {\n    font-size: 16px;\n    margin-left: 8px;\n    transition: transform 0.2s;\n}\n.collapse-icon.collapsed {\n    transform: rotate(-90deg);\n}\n.adv-content {\n    padding: 8px 16px 12px 16px;\n}\n.config-item {\n    margin-bottom: 12px;\n}\n.collapse-enter-active, .collapse-leave-active {\n    transition: max-height 0.25s cubic-bezier(.4,0,.2,1), opacity 0.2s;\n}\n.collapse-enter-from, .collapse-leave-to {\n    max-height: 0;\n    opacity: 0;\n    overflow: hidden;\n}\n.collapse-enter-to, .collapse-leave-from {\n    max-height: 300px;\n    opacity: 1;\n}\ninput[type=\"number\"], input[type=\"text\"] {\n    background: var(--bg-secondary);\n    color: var(--text-main);\n    border: 1px solid var(--text-secondary);\n    border-radius: 6px;\n    padding: 2px 8px;\n    font-size: 14px;\n    outline: none;\n    transition: border-color 0.2s;\n}\ninput[type=\"checkbox\"] {\n    accent-color: #3b82f6;\n}\n</style>\n"],"mappings":";;AA+GA,SAASA,GAAG,EAAEC,KAAK,QAAQ,KAAI;;;;;;;;;;;;;;IAf/B;IACA;IACA,SAASC,eAAeA,CAACC,IAAI,EAAEC,EAAE,EAAE;MAC/BA,EAAE,CAACC,MAAM,GAAG,QAAQ;MACpBD,EAAE,CAACE,KAAK,GAAGH,IAAI,CAACI,SAAS;IAC7B;IACA,SAASC,kBAAkBA,CAACL,IAAI,EAAE;MAC9B;MACAA,IAAI,CAACM,MAAM,CAACC,OAAO,CAACN,EAAE,IAAI;QACtBA,EAAE,CAACC,MAAM,GAAGF,IAAI,CAACQ,WAAW,IAAI,QAAQ;QACxCP,EAAE,CAACE,KAAK,GAAGH,IAAI,CAACS,UAAU,IAAIT,IAAI,CAACI,SAAS;MAChD,CAAC,CAAC;IACN;IACA;IACA;IAEA,MAAMM,KAAK,GAAGC,OAAA;IAId,MAAMC,IAAI,GAAGC,MAAA;IAEb,MAAMC,WAAW,GAAGjB,GAAG,CAAC;MAAE,GAAGa,KAAK,CAACK;IAAW,CAAC;IAC/C,MAAMC,WAAW,GAAGnB,GAAG,CAAC,IAAI;IAE5BC,KAAK,CAAC,MAAMY,KAAK,CAACK,UAAU,EAAGE,GAAG,IAAK;MACnCH,WAAW,CAACI,KAAK,GAAG;QAAE,GAAGD;MAAI;IACjC,CAAC;IAED,SAASE,WAAWA,CAACC,GAAG,EAAEF,KAAK,EAAE;MAC7BJ,WAAW,CAACI,KAAK,CAACE,GAAG,CAAC,GAAGF,KAAI;MAC7BN,IAAI,CAAC,mBAAmB,EAAE;QAAE,GAAGE,WAAW,CAACI;MAAM,CAAC;IACtD;IAEA,SAASG,cAAcA,CAAA,EAAG;MACtBL,WAAW,CAACE,KAAK,GAAG,CAACF,WAAW,CAACE,KAAI;IACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}