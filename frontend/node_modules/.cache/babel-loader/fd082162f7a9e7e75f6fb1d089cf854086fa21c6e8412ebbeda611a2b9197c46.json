{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx';\nconst API_BASE_URL = '/api';\nconst CACHE_KEY = 'fuck_charts_files';\n\n// 后端连接状态\nlet isBackendConnected = false;\n\n/**\n * 检测后端连接状态\n * @returns {Promise<boolean>} 连接状态\n */\nexport async function checkBackendConnection() {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000);\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      method: 'GET',\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    isBackendConnected = response.ok;\n    return isBackendConnected;\n  } catch (error) {\n    console.log('后端连接检测:', error.message);\n    isBackendConnected = false;\n    return false;\n  }\n}\n\n/**\n * 获取后端连接状态\n * @returns {boolean} 连接状态\n */\nexport function getBackendStatus() {\n  return isBackendConnected;\n}\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n  try {\n    const cached = localStorage.getItem(CACHE_KEY);\n    return cached ? JSON.parse(cached) : [];\n  } catch (error) {\n    console.error('读取缓存失败:', error);\n    return [];\n  }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n  try {\n    const cached = getCachedFiles();\n    cached.push(fileInfo);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cached));\n  } catch (error) {\n    console.error('保存到缓存失败:', error);\n  }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n  try {\n    const cached = getCachedFiles();\n    const filtered = cached.filter(file => file.id !== fileId);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(filtered));\n  } catch (error) {\n    console.error('从缓存删除失败:', error);\n  }\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = e.target.result;\n        let workbook, worksheet, jsonData;\n        if (file.name.toLowerCase().endsWith('.csv')) {\n          // CSV文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'string',\n            codepage: 65001 // UTF-8\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        } else {\n          // Excel文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'array',\n            cellDates: true,\n            cellNF: false,\n            cellText: false\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        }\n\n        // 过滤空行\n        jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''));\n\n        // 限制预览行数\n        const previewData = jsonData.slice(0, 100);\n        resolve({\n          data: previewData,\n          totalRows: jsonData.length,\n          totalColumns: jsonData[0] ? jsonData[0].length : 0,\n          headers: jsonData[0] || []\n        });\n      } catch (error) {\n        console.error('文件解析失败:', error);\n        reject(new Error('文件解析失败：' + error.message));\n      }\n    };\n    reader.onerror = () => reject(new Error('文件读取失败'));\n    if (file.name.toLowerCase().endsWith('.csv')) {\n      reader.readAsText(file, 'UTF-8');\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  });\n}\n\n/**\n * 分块上传配置\n */\nconst CHUNK_SIZE = 2 * 1024 * 1024; // 2MB 每块\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024; // 10MB 大文件阈值\n\n/**\n * 计算文件MD5值（用于分块上传去重）\n * @param {File} file - 文件对象\n * @returns {Promise<string>} MD5值\n */\nasync function calculateFileHash(file) {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const buffer = e.target.result;\n      const hash = btoa(String.fromCharCode(...new Uint8Array(buffer))).slice(0, 32);\n      resolve(hash);\n    };\n    reader.readAsArrayBuffer(file.slice(0, 1024)); // 只读取前1KB用于快速hash\n  });\n}\n\n/**\n * 上传单个块\n * @param {Blob} chunk - 块数据\n * @param {number} chunkIndex - 块索引\n * @param {string} fileHash - 文件hash\n * @param {string} fileName - 文件名\n * @param {number} totalChunks - 总块数\n * @param {Function} onProgress - 进度回调\n * @returns {Promise} 上传结果\n */\nasync function uploadChunk(chunk, chunkIndex, fileHash, fileName, totalChunks, onProgress) {\n  const formData = new FormData();\n  formData.append('chunk', chunk);\n  formData.append('chunkIndex', chunkIndex);\n  formData.append('fileHash', fileHash);\n  formData.append('fileName', fileName);\n  formData.append('totalChunks', totalChunks);\n  const response = await fetch(`${API_BASE_URL}/files/upload-chunk`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`块 ${chunkIndex} 上传失败`);\n  }\n\n  // 更新进度\n  if (onProgress) {\n    const progress = (chunkIndex + 1) / totalChunks * 100;\n    onProgress(Math.round(progress));\n  }\n  return await response.json();\n}\n\n/**\n * 分块上传文件\n * @param {File} file - 文件对象\n * @param {Function} onProgress - 进度回调\n * @returns {Promise} 上传结果\n */\nasync function uploadFileInChunks(file, onProgress) {\n  const fileHash = await calculateFileHash(file);\n  const fileName = file.name;\n  const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n  console.log(`开始分块上传: ${fileName}, 总块数: ${totalChunks}`);\n\n  // 1. 检查文件是否已存在（秒传）\n  try {\n    const checkResponse = await fetch(`${API_BASE_URL}/files/check`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileHash,\n        fileName,\n        fileSize: file.size\n      })\n    });\n    if (checkResponse.ok) {\n      const result = await checkResponse.json();\n      if (result.exists) {\n        console.log('文件已存在，执行秒传');\n        onProgress && onProgress(100);\n        return result;\n      }\n    }\n  } catch (error) {\n    console.log('秒传检查失败，继续分块上传');\n  }\n\n  // 2. 获取已上传的块列表（断点续传）\n  let uploadedChunks = [];\n  try {\n    const resumeResponse = await fetch(`${API_BASE_URL}/files/chunks/${fileHash}`);\n    if (resumeResponse.ok) {\n      const result = await resumeResponse.json();\n      uploadedChunks = result.uploadedChunks || [];\n    }\n  } catch (error) {\n    console.log('无法获取已上传块列表，从头开始上传');\n  }\n\n  // 3. 上传缺失的块\n  const uploadPromises = [];\n  for (let i = 0; i < totalChunks; i++) {\n    if (uploadedChunks.includes(i)) {\n      continue; // 跳过已上传的块\n    }\n    const start = i * CHUNK_SIZE;\n    const end = Math.min(start + CHUNK_SIZE, file.size);\n    const chunk = file.slice(start, end);\n    uploadPromises.push(uploadChunk(chunk, i, fileHash, fileName, totalChunks, onProgress));\n  }\n\n  // 并发上传，但限制并发数\n  const concurrentLimit = 3;\n  const results = [];\n  for (let i = 0; i < uploadPromises.length; i += concurrentLimit) {\n    const batch = uploadPromises.slice(i, i + concurrentLimit);\n    const batchResults = await Promise.all(batch);\n    results.push(...batchResults);\n  }\n\n  // 4. 合并文件\n  const mergeResponse = await fetch(`${API_BASE_URL}/files/merge`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      fileHash,\n      fileName,\n      totalChunks,\n      fileSize: file.size\n    })\n  });\n  if (!mergeResponse.ok) {\n    throw new Error('文件合并失败');\n  }\n  const result = await mergeResponse.json();\n  console.log('分块上传完成:', result);\n  return result;\n}\n\n/**\n * 智能上传文件（根据后端连接状态决定上传或缓存）\n * @param {File} file - 要上传的文件对象\n * @param {Function} onProgress - 进度回调函数\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file, onProgress) {\n  try {\n    // 首先解析文件内容\n    console.log('开始解析文件:', file.name);\n    const parsedContent = await parseFileContent(file);\n    const fileInfo = {\n      id: Date.now() + Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      rows: parsedContent.totalRows,\n      columns: parsedContent.totalColumns,\n      headers: parsedContent.headers,\n      createdAt: new Date().toISOString(),\n      status: 'local',\n      data: parsedContent.data,\n      file: file // 保存原始文件对象用于后续上传\n    };\n\n    // 检查后端连接状态\n    const isConnected = await checkBackendConnection();\n    console.log('后端连接状态:', isConnected);\n    if (isConnected) {\n      // 后端连接时决定上传方式\n      try {\n        fileInfo.status = 'uploading';\n        console.log('正在上传到后端...');\n        let result;\n        // 判断是否使用分块上传\n        if (file.size > LARGE_FILE_THRESHOLD) {\n          console.log('大文件，使用分块上传');\n          result = await uploadFileInChunks(file, onProgress);\n        } else {\n          console.log('小文件，使用普通上传');\n          const formData = new FormData();\n          formData.append('file', file);\n          const response = await fetch(`${API_BASE_URL}/files/upload`, {\n            method: 'POST',\n            body: formData\n          });\n          if (!response.ok) {\n            throw new Error(`上传失败: ${response.status} ${response.statusText}`);\n          }\n          result = await response.json();\n          onProgress && onProgress(100);\n        }\n        fileInfo.status = 'uploaded';\n        fileInfo.serverId = result.fileId || result.id;\n        console.log('上传成功:', result);\n\n        // 同时保存到缓存\n        saveToCache(fileInfo);\n        return fileInfo;\n      } catch (error) {\n        console.error('后端上传失败:', error);\n        fileInfo.status = 'local'; // 改为本地缓存而不是error\n        saveToCache(fileInfo);\n        console.log('已保存到本地缓存');\n        return fileInfo;\n      }\n    } else {\n      // 后端未连接时保存到本地缓存\n      console.log('后端未连接，保存到本地缓存');\n      fileInfo.status = 'local';\n      saveToCache(fileInfo);\n      onProgress && onProgress(100);\n      return fileInfo;\n    }\n  } catch (error) {\n    console.error('文件处理失败:', error);\n    throw new Error('文件处理失败：' + error.message);\n  }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n  // 先从缓存查找\n  const cachedFiles = getCachedFiles();\n  const cachedFile = cachedFiles.find(file => file.id === fileId);\n  if (cachedFile && cachedFile.data) {\n    return {\n      data: cachedFile.data,\n      totalRows: cachedFile.rows,\n      totalColumns: cachedFile.columns,\n      headers: cachedFile.headers\n    };\n  }\n\n  // 如果缓存中没有，且后端连接，则从后端获取\n  if (isBackendConnected) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`);\n      if (!response.ok) {\n        throw new Error('Failed to get preview');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('获取文件预览失败:', error);\n      throw error;\n    }\n  }\n  throw new Error('文件预览不可用');\n}\n\n/**\n * 同步本地文件到后端\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToBackend(fileId) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo || !fileInfo.file) {\n    throw new Error('本地文件不存在');\n  }\n  if (!(await checkBackendConnection())) {\n    throw new Error('后端未连接');\n  }\n  try {\n    const formData = new FormData();\n    formData.append('file', fileInfo.file);\n    const response = await fetch(`${API_BASE_URL}/files/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('同步失败');\n    }\n    const result = await response.json();\n\n    // 更新缓存中的文件状态\n    fileInfo.status = 'uploaded';\n    fileInfo.serverId = result.fileId;\n    const updatedFiles = cachedFiles.map(file => file.id === fileId ? fileInfo : file);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles));\n    return fileInfo;\n  } catch (error) {\n    console.error('同步文件失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取所有文件列表（本地缓存 + 远程文件）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n  const cachedFiles = getCachedFiles();\n  if (!(await checkBackendConnection())) {\n    return cachedFiles;\n  }\n  try {\n    const response = await fetch(`${API_BASE_URL}/files`);\n    if (!response.ok) {\n      return cachedFiles;\n    }\n    const remoteFiles = await response.json();\n\n    // 合并本地和远程文件，避免重复\n    const allFiles = [...cachedFiles];\n    remoteFiles.forEach(remoteFile => {\n      const existsInCache = cachedFiles.some(cached => cached.serverId === remoteFile.id);\n      if (!existsInCache) {\n        allFiles.push({\n          ...remoteFile,\n          id: remoteFile.id,\n          serverId: remoteFile.id,\n          status: 'uploaded'\n        });\n      }\n    });\n    return allFiles;\n  } catch (error) {\n    console.error('获取远程文件列表失败:', error);\n    return cachedFiles;\n  }\n}\n\n/**\n * 智能删除文件（根据文件状态决定删除位置）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('文件不存在');\n  }\n\n  // 如果文件已上传到服务器，同时从服务器删除\n  if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n    if (await checkBackendConnection()) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          console.warn('从服务器删除文件失败');\n        }\n      } catch (error) {\n        console.error('从服务器删除文件失败:', error);\n      }\n    }\n  }\n\n  // 从本地缓存删除\n  removeFromCache(fileId);\n  return {\n    success: true\n  };\n}\n\n/**\n * 智能重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('文件不存在');\n  }\n\n  // 如果文件已上传到服务器，同时更新服务器\n  if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n    if (await checkBackendConnection()) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}/rename`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: newName\n          })\n        });\n        if (!response.ok) {\n          console.warn('服务器重命名失败');\n        }\n      } catch (error) {\n        console.error('服务器重命名失败:', error);\n      }\n    }\n  }\n\n  // 更新本地缓存\n  fileInfo.name = newName;\n  const updatedFiles = cachedFiles.map(file => file.id === fileId ? fileInfo : file);\n  localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles));\n  return {\n    success: true,\n    file: fileInfo\n  };\n}","map":{"version":3,"names":["XLSX","API_BASE_URL","CACHE_KEY","isBackendConnected","checkBackendConnection","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","clearTimeout","ok","error","console","log","message","getBackendStatus","getCachedFiles","cached","localStorage","getItem","JSON","parse","saveToCache","fileInfo","push","setItem","stringify","removeFromCache","fileId","filtered","filter","file","id","parseFileContent","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","worksheet","jsonData","name","toLowerCase","endsWith","read","type","codepage","Sheets","SheetNames","utils","sheet_to_json","header","defval","blankrows","cellDates","cellNF","cellText","row","some","cell","previewData","slice","totalRows","length","totalColumns","headers","Error","onerror","readAsText","readAsArrayBuffer","CHUNK_SIZE","LARGE_FILE_THRESHOLD","calculateFileHash","buffer","hash","btoa","String","fromCharCode","Uint8Array","uploadChunk","chunk","chunkIndex","fileHash","fileName","totalChunks","onProgress","formData","FormData","append","body","progress","Math","round","json","uploadFileInChunks","ceil","size","checkResponse","fileSize","exists","uploadedChunks","resumeResponse","uploadPromises","i","includes","start","end","min","concurrentLimit","results","batch","batchResults","all","mergeResponse","uploadFile","parsedContent","Date","now","random","toString","substr","rows","columns","createdAt","toISOString","status","isConnected","statusText","serverId","getFilePreview","cachedFiles","cachedFile","find","syncFileToBackend","updatedFiles","map","getAllFiles","remoteFiles","allFiles","forEach","remoteFile","existsInCache","deleteFile","warn","success","renameFile","newName"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx'\n\nconst API_BASE_URL = '/api'\nconst CACHE_KEY = 'fuck_charts_files'\n\n// 后端连接状态\nlet isBackendConnected = false\n\n/**\n * 检测后端连接状态\n * @returns {Promise<boolean>} 连接状态\n */\nexport async function checkBackendConnection() {\n    try {\n        const controller = new AbortController()\n        const timeoutId = setTimeout(() => controller.abort(), 3000)\n\n        const response = await fetch(`${API_BASE_URL}/health`, {\n            method: 'GET',\n            signal: controller.signal\n        })\n\n        clearTimeout(timeoutId)\n        isBackendConnected = response.ok\n        return isBackendConnected\n    } catch (error) {\n        console.log('后端连接检测:', error.message)\n        isBackendConnected = false\n        return false\n    }\n}\n\n/**\n * 获取后端连接状态\n * @returns {boolean} 连接状态\n */\nexport function getBackendStatus() {\n    return isBackendConnected\n}\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n    try {\n        const cached = localStorage.getItem(CACHE_KEY)\n        return cached ? JSON.parse(cached) : []\n    } catch (error) {\n        console.error('读取缓存失败:', error)\n        return []\n    }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n    try {\n        const cached = getCachedFiles()\n        cached.push(fileInfo)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(cached))\n    } catch (error) {\n        console.error('保存到缓存失败:', error)\n    }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n    try {\n        const cached = getCachedFiles()\n        const filtered = cached.filter(file => file.id !== fileId)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(filtered))\n    } catch (error) {\n        console.error('从缓存删除失败:', error)\n    }\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n\n        reader.onload = (e) => {\n            try {\n                const data = e.target.result\n                let workbook, worksheet, jsonData\n\n                if (file.name.toLowerCase().endsWith('.csv')) {\n                    // CSV文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'string',\n                        codepage: 65001 // UTF-8\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                } else {\n                    // Excel文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'array',\n                        cellDates: true,\n                        cellNF: false,\n                        cellText: false\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                }\n\n                // 过滤空行\n                jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''))\n\n                // 限制预览行数\n                const previewData = jsonData.slice(0, 100)\n\n                resolve({\n                    data: previewData,\n                    totalRows: jsonData.length,\n                    totalColumns: jsonData[0] ? jsonData[0].length : 0,\n                    headers: jsonData[0] || []\n                })\n            } catch (error) {\n                console.error('文件解析失败:', error)\n                reject(new Error('文件解析失败：' + error.message))\n            }\n        }\n\n        reader.onerror = () => reject(new Error('文件读取失败'))\n\n        if (file.name.toLowerCase().endsWith('.csv')) {\n            reader.readAsText(file, 'UTF-8')\n        } else {\n            reader.readAsArrayBuffer(file)\n        }\n    })\n}\n\n/**\n * 分块上传配置\n */\nconst CHUNK_SIZE = 2 * 1024 * 1024 // 2MB 每块\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024 // 10MB 大文件阈值\n\n/**\n * 计算文件MD5值（用于分块上传去重）\n * @param {File} file - 文件对象\n * @returns {Promise<string>} MD5值\n */\nasync function calculateFileHash(file) {\n    return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = (e) => {\n            const buffer = e.target.result\n            const hash = btoa(String.fromCharCode(...new Uint8Array(buffer))).slice(0, 32)\n            resolve(hash)\n        }\n        reader.readAsArrayBuffer(file.slice(0, 1024)) // 只读取前1KB用于快速hash\n    })\n}\n\n/**\n * 上传单个块\n * @param {Blob} chunk - 块数据\n * @param {number} chunkIndex - 块索引\n * @param {string} fileHash - 文件hash\n * @param {string} fileName - 文件名\n * @param {number} totalChunks - 总块数\n * @param {Function} onProgress - 进度回调\n * @returns {Promise} 上传结果\n */\nasync function uploadChunk(chunk, chunkIndex, fileHash, fileName, totalChunks, onProgress) {\n    const formData = new FormData()\n    formData.append('chunk', chunk)\n    formData.append('chunkIndex', chunkIndex)\n    formData.append('fileHash', fileHash)\n    formData.append('fileName', fileName)\n    formData.append('totalChunks', totalChunks)\n\n    const response = await fetch(`${API_BASE_URL}/files/upload-chunk`, {\n        method: 'POST',\n        body: formData\n    })\n\n    if (!response.ok) {\n        throw new Error(`块 ${chunkIndex} 上传失败`)\n    }\n\n    // 更新进度\n    if (onProgress) {\n        const progress = ((chunkIndex + 1) / totalChunks) * 100\n        onProgress(Math.round(progress))\n    }\n\n    return await response.json()\n}\n\n/**\n * 分块上传文件\n * @param {File} file - 文件对象\n * @param {Function} onProgress - 进度回调\n * @returns {Promise} 上传结果\n */\nasync function uploadFileInChunks(file, onProgress) {\n    const fileHash = await calculateFileHash(file)\n    const fileName = file.name\n    const totalChunks = Math.ceil(file.size / CHUNK_SIZE)\n\n    console.log(`开始分块上传: ${fileName}, 总块数: ${totalChunks}`)\n\n    // 1. 检查文件是否已存在（秒传）\n    try {\n        const checkResponse = await fetch(`${API_BASE_URL}/files/check`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                fileHash,\n                fileName,\n                fileSize: file.size\n            })\n        })\n\n        if (checkResponse.ok) {\n            const result = await checkResponse.json()\n            if (result.exists) {\n                console.log('文件已存在，执行秒传')\n                onProgress && onProgress(100)\n                return result\n            }\n        }\n    } catch (error) {\n        console.log('秒传检查失败，继续分块上传')\n    }\n\n    // 2. 获取已上传的块列表（断点续传）\n    let uploadedChunks = []\n    try {\n        const resumeResponse = await fetch(`${API_BASE_URL}/files/chunks/${fileHash}`)\n        if (resumeResponse.ok) {\n            const result = await resumeResponse.json()\n            uploadedChunks = result.uploadedChunks || []\n        }\n    } catch (error) {\n        console.log('无法获取已上传块列表，从头开始上传')\n    }\n\n    // 3. 上传缺失的块\n    const uploadPromises = []\n    for (let i = 0; i < totalChunks; i++) {\n        if (uploadedChunks.includes(i)) {\n            continue // 跳过已上传的块\n        }\n\n        const start = i * CHUNK_SIZE\n        const end = Math.min(start + CHUNK_SIZE, file.size)\n        const chunk = file.slice(start, end)\n\n        uploadPromises.push(uploadChunk(chunk, i, fileHash, fileName, totalChunks, onProgress))\n    }\n\n    // 并发上传，但限制并发数\n    const concurrentLimit = 3\n    const results = []\n    for (let i = 0; i < uploadPromises.length; i += concurrentLimit) {\n        const batch = uploadPromises.slice(i, i + concurrentLimit)\n        const batchResults = await Promise.all(batch)\n        results.push(...batchResults)\n    }\n\n    // 4. 合并文件\n    const mergeResponse = await fetch(`${API_BASE_URL}/files/merge`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            fileHash,\n            fileName,\n            totalChunks,\n            fileSize: file.size\n        })\n    })\n\n    if (!mergeResponse.ok) {\n        throw new Error('文件合并失败')\n    }\n\n    const result = await mergeResponse.json()\n    console.log('分块上传完成:', result)\n    return result\n}\n\n/**\n * 智能上传文件（根据后端连接状态决定上传或缓存）\n * @param {File} file - 要上传的文件对象\n * @param {Function} onProgress - 进度回调函数\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file, onProgress) {\n    try {\n        // 首先解析文件内容\n        console.log('开始解析文件:', file.name)\n        const parsedContent = await parseFileContent(file)\n\n        const fileInfo = {\n            id: Date.now() + Math.random().toString(36).substr(2, 9),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            rows: parsedContent.totalRows,\n            columns: parsedContent.totalColumns,\n            headers: parsedContent.headers,\n            createdAt: new Date().toISOString(),\n            status: 'local',\n            data: parsedContent.data,\n            file: file // 保存原始文件对象用于后续上传\n        }\n\n        // 检查后端连接状态\n        const isConnected = await checkBackendConnection()\n        console.log('后端连接状态:', isConnected)\n\n        if (isConnected) {\n            // 后端连接时决定上传方式\n            try {\n                fileInfo.status = 'uploading'\n                console.log('正在上传到后端...')\n\n                let result\n                // 判断是否使用分块上传\n                if (file.size > LARGE_FILE_THRESHOLD) {\n                    console.log('大文件，使用分块上传')\n                    result = await uploadFileInChunks(file, onProgress)\n                } else {\n                    console.log('小文件，使用普通上传')\n                    const formData = new FormData()\n                    formData.append('file', file)\n\n                    const response = await fetch(`${API_BASE_URL}/files/upload`, {\n                        method: 'POST',\n                        body: formData\n                    })\n\n                    if (!response.ok) {\n                        throw new Error(`上传失败: ${response.status} ${response.statusText}`)\n                    }\n\n                    result = await response.json()\n                    onProgress && onProgress(100)\n                }\n\n                fileInfo.status = 'uploaded'\n                fileInfo.serverId = result.fileId || result.id\n\n                console.log('上传成功:', result)\n\n                // 同时保存到缓存\n                saveToCache(fileInfo)\n\n                return fileInfo\n            } catch (error) {\n                console.error('后端上传失败:', error)\n                fileInfo.status = 'local' // 改为本地缓存而不是error\n                saveToCache(fileInfo)\n                console.log('已保存到本地缓存')\n                return fileInfo\n            }\n        } else {\n            // 后端未连接时保存到本地缓存\n            console.log('后端未连接，保存到本地缓存')\n            fileInfo.status = 'local'\n            saveToCache(fileInfo)\n            onProgress && onProgress(100)\n            return fileInfo\n        }\n    } catch (error) {\n        console.error('文件处理失败:', error)\n        throw new Error('文件处理失败：' + error.message)\n    }\n}\n\n/**\n * 获取文件预览数据\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n    // 先从缓存查找\n    const cachedFiles = getCachedFiles()\n    const cachedFile = cachedFiles.find(file => file.id === fileId)\n\n    if (cachedFile && cachedFile.data) {\n        return {\n            data: cachedFile.data,\n            totalRows: cachedFile.rows,\n            totalColumns: cachedFile.columns,\n            headers: cachedFile.headers\n        }\n    }\n\n    // 如果缓存中没有，且后端连接，则从后端获取\n    if (isBackendConnected) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/files/${fileId}/preview`)\n            if (!response.ok) {\n                throw new Error('Failed to get preview')\n            }\n            return await response.json()\n        } catch (error) {\n            console.error('获取文件预览失败:', error)\n            throw error\n        }\n    }\n\n    throw new Error('文件预览不可用')\n}\n\n/**\n * 同步本地文件到后端\n * @param {string} fileId - 文件ID\n * @returns {Promise} 同步结果\n */\nexport async function syncFileToBackend(fileId) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo || !fileInfo.file) {\n        throw new Error('本地文件不存在')\n    }\n\n    if (!await checkBackendConnection()) {\n        throw new Error('后端未连接')\n    }\n\n    try {\n        const formData = new FormData()\n        formData.append('file', fileInfo.file)\n\n        const response = await fetch(`${API_BASE_URL}/files/upload`, {\n            method: 'POST',\n            body: formData\n        })\n\n        if (!response.ok) {\n            throw new Error('同步失败')\n        }\n\n        const result = await response.json()\n\n        // 更新缓存中的文件状态\n        fileInfo.status = 'uploaded'\n        fileInfo.serverId = result.fileId\n\n        const updatedFiles = cachedFiles.map(file =>\n            file.id === fileId ? fileInfo : file\n        )\n        localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles))\n\n        return fileInfo\n    } catch (error) {\n        console.error('同步文件失败:', error)\n        throw error\n    }\n}\n\n/**\n * 获取所有文件列表（本地缓存 + 远程文件）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n    const cachedFiles = getCachedFiles()\n\n    if (!await checkBackendConnection()) {\n        return cachedFiles\n    }\n\n    try {\n        const response = await fetch(`${API_BASE_URL}/files`)\n        if (!response.ok) {\n            return cachedFiles\n        }\n\n        const remoteFiles = await response.json()\n\n        // 合并本地和远程文件，避免重复\n        const allFiles = [...cachedFiles]\n\n        remoteFiles.forEach(remoteFile => {\n            const existsInCache = cachedFiles.some(cached =>\n                cached.serverId === remoteFile.id\n            )\n\n            if (!existsInCache) {\n                allFiles.push({\n                    ...remoteFile,\n                    id: remoteFile.id,\n                    serverId: remoteFile.id,\n                    status: 'uploaded'\n                })\n            }\n        })\n\n        return allFiles\n    } catch (error) {\n        console.error('获取远程文件列表失败:', error)\n        return cachedFiles\n    }\n}\n\n/**\n * 智能删除文件（根据文件状态决定删除位置）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo) {\n        throw new Error('文件不存在')\n    }\n\n    // 如果文件已上传到服务器，同时从服务器删除\n    if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n        if (await checkBackendConnection()) {\n            try {\n                const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}`, {\n                    method: 'DELETE'\n                })\n                if (!response.ok) {\n                    console.warn('从服务器删除文件失败')\n                }\n            } catch (error) {\n                console.error('从服务器删除文件失败:', error)\n            }\n        }\n    }\n\n    // 从本地缓存删除\n    removeFromCache(fileId)\n\n    return { success: true }\n}\n\n/**\n * 智能重命名文件\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n\n    if (!fileInfo) {\n        throw new Error('文件不存在')\n    }\n\n    // 如果文件已上传到服务器，同时更新服务器\n    if (fileInfo.status === 'uploaded' && fileInfo.serverId) {\n        if (await checkBackendConnection()) {\n            try {\n                const response = await fetch(`${API_BASE_URL}/files/${fileInfo.serverId}/rename`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ name: newName })\n                })\n                if (!response.ok) {\n                    console.warn('服务器重命名失败')\n                }\n            } catch (error) {\n                console.error('服务器重命名失败:', error)\n            }\n        }\n    }\n\n    // 更新本地缓存\n    fileInfo.name = newName\n    const updatedFiles = cachedFiles.map(file =>\n        file.id === fileId ? fileInfo : file\n    )\n    localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles))\n\n    return { success: true, file: fileInfo }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}