{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx';\nconst CACHE_KEY = 'fuck_charts_files';\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n  try {\n    const cached = localStorage.getItem(CACHE_KEY);\n    return cached ? JSON.parse(cached) : [];\n  } catch (error) {\n    console.error('读取缓存失败:', error);\n    return [];\n  }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n  try {\n    const cached = getCachedFiles();\n    cached.push(fileInfo);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cached));\n  } catch (error) {\n    console.error('保存到缓存失败:', error);\n  }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n  try {\n    const cached = getCachedFiles();\n    const filtered = cached.filter(file => file.id !== fileId);\n    localStorage.setItem(CACHE_KEY, JSON.stringify(filtered));\n  } catch (error) {\n    console.error('从缓存删除失败:', error);\n  }\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = e.target.result;\n        let workbook, worksheet, jsonData;\n        if (file.name.toLowerCase().endsWith('.csv')) {\n          // CSV文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'string',\n            codepage: 65001 // UTF-8\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        } else {\n          // Excel文件解析 - 支持中文字符\n          workbook = XLSX.read(data, {\n            type: 'array',\n            cellDates: true,\n            cellNF: false,\n            cellText: false\n          });\n          worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          jsonData = XLSX.utils.sheet_to_json(worksheet, {\n            header: 1,\n            defval: '',\n            blankrows: false\n          });\n        }\n\n        // 过滤空行\n        jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''));\n\n        //! 限制预览行数\n        const previewData = jsonData.slice(0, 100);\n        resolve({\n          data: jsonData,\n          totalRows: jsonData.length,\n          totalColumns: jsonData[0] ? jsonData[0].length : 0,\n          headers: jsonData[0] || [],\n          previewData: previewData // 单独返回预览行数\n        });\n      } catch (error) {\n        console.error('文件解析失败:', error);\n        reject(new Error('文件解析失败：' + error.message));\n      }\n    };\n    reader.onerror = () => reject(new Error('文件读取失败'));\n    if (file.name.toLowerCase().endsWith('.csv')) {\n      reader.readAsText(file, 'UTF-8');\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  });\n}\n\n/**\n * 上传文件（本地缓存模式，无后端）\n * @param {File} file - 要上传的文件对象\n * @param {Function} onProgress - 进度回调函数\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file, onProgress) {\n  try {\n    const parsedContent = await parseFileContent(file);\n    const fileInfo = {\n      id: Date.now() + Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      rows: parsedContent.totalRows,\n      columns: parsedContent.totalColumns,\n      headers: parsedContent.headers,\n      createdAt: new Date().toISOString(),\n      status: 'local',\n      data: parsedContent.data,\n      // 完整数据\n      previewData: parsedContent.previewData,\n      // 预览数据\n      file: file // 保存原始文件对象\n    };\n    saveToCache(fileInfo);\n    return fileInfo;\n  } catch (error) {\n    console.error('文件处理失败:', error);\n    throw new Error('文件处理失败：' + error.message);\n  }\n}\n\n/**\n * 获取文件预览数据（本地缓存模式）\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n  const cachedFiles = getCachedFiles();\n  const cachedFile = cachedFiles.find(file => file.id === fileId);\n  if (cachedFile && cachedFile.previewData) {\n    return {\n      data: cachedFile.previewData,\n      totalRows: cachedFile.rows,\n      totalColumns: cachedFile.columns,\n      headers: cachedFile.headers\n    };\n  }\n  throw new Error('文件预览不可用');\n}\n\n/**\n * 获取所有文件列表（本地缓存模式）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n  return getCachedFiles();\n}\n\n/**\n * 删除文件（本地缓存模式）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('文件不存在');\n  }\n  removeFromCache(fileId);\n  return {\n    success: true\n  };\n}\n\n/**\n * 重命名文件（本地缓存模式）\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n  const cachedFiles = getCachedFiles();\n  const fileInfo = cachedFiles.find(file => file.id === fileId);\n  if (!fileInfo) {\n    throw new Error('File not');\n  }\n  fileInfo.name = newName;\n  const updatedFiles = cachedFiles.map(file => file.id === fileId ? fileInfo : file);\n  localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles));\n  return {\n    success: true,\n    file: fileInfo\n  };\n}\n\n/**\n * 计算文件MD5哈希值\n * @param {File} file - 文件对象\n * @returns {Promise<string>} MD5哈希值\n */\nasync function calculateMD5(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const buffer = reader.result;\n      const hash = crypto.subtle.digest('MD5', buffer);\n      hash.then(hashArray => {\n        const hashHex = Array.from(new Uint8Array(hashArray)).map(b => b.toString(16).padStart(2, '0')).join('');\n        resolve(hashHex);\n      }).catch(reject);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}","map":{"version":3,"names":["XLSX","CACHE_KEY","getCachedFiles","cached","localStorage","getItem","JSON","parse","error","console","saveToCache","fileInfo","push","setItem","stringify","removeFromCache","fileId","filtered","filter","file","id","parseFileContent","Promise","resolve","reject","reader","FileReader","onload","e","data","target","result","workbook","worksheet","jsonData","name","toLowerCase","endsWith","read","type","codepage","Sheets","SheetNames","utils","sheet_to_json","header","defval","blankrows","cellDates","cellNF","cellText","row","some","cell","previewData","slice","totalRows","length","totalColumns","headers","Error","message","onerror","readAsText","readAsArrayBuffer","uploadFile","onProgress","parsedContent","Date","now","Math","random","toString","substr","size","rows","columns","createdAt","toISOString","status","getFilePreview","cachedFiles","cachedFile","find","getAllFiles","deleteFile","success","renameFile","newName","updatedFiles","map","calculateMD5","buffer","hash","crypto","subtle","digest","then","hashArray","hashHex","Array","from","Uint8Array","b","padStart","join","catch"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/services/FileServices.js"],"sourcesContent":["/* eslint-disable */\n/**\n * 文件上传与管理相关的 API 服务\n * 支持前端缓存和后端同步的双模式工作\n */\nimport * as XLSX from 'xlsx'\nconst CACHE_KEY = 'fuck_charts_files'\n\n\n\n/**\n * 从本地缓存获取文件列表\n * @returns {Array} 缓存的文件列表\n */\nexport function getCachedFiles() {\n    try {\n        const cached = localStorage.getItem(CACHE_KEY)\n        return cached ? JSON.parse(cached) : []\n    } catch (error) {\n        console.error('读取缓存失败:', error)\n        return []\n    }\n}\n\n/**\n * 保存文件到本地缓存\n * @param {Object} fileInfo - 文件信息\n */\nexport function saveToCache(fileInfo) {\n    try {\n        const cached = getCachedFiles()\n        cached.push(fileInfo)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(cached))\n    } catch (error) {\n        console.error('保存到缓存失败:', error)\n    }\n}\n\n/**\n * 从缓存中删除文件\n * @param {string} fileId - 文件ID\n */\nexport function removeFromCache(fileId) {\n    try {\n        const cached = getCachedFiles()\n        const filtered = cached.filter(file => file.id !== fileId)\n        localStorage.setItem(CACHE_KEY, JSON.stringify(filtered))\n    } catch (error) {\n        console.error('从缓存删除失败:', error)\n    }\n}\n\n/**\n * 解析Excel/CSV文件\n * @param {File} file - 文件对象\n * @returns {Promise<Object>} 解析结果\n */\nexport async function parseFileContent(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n\n        reader.onload = (e) => {\n            try {\n                const data = e.target.result\n                let workbook, worksheet, jsonData\n\n                if (file.name.toLowerCase().endsWith('.csv')) {\n                    // CSV文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'string',\n                        codepage: 65001 // UTF-8\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                } else {\n                    // Excel文件解析 - 支持中文字符\n                    workbook = XLSX.read(data, {\n                        type: 'array',\n                        cellDates: true,\n                        cellNF: false,\n                        cellText: false\n                    })\n                    worksheet = workbook.Sheets[workbook.SheetNames[0]]\n                    jsonData = XLSX.utils.sheet_to_json(worksheet, {\n                        header: 1,\n                        defval: '',\n                        blankrows: false\n                    })\n                }\n\n                // 过滤空行\n                jsonData = jsonData.filter(row => row.some(cell => cell !== null && cell !== ''))\n\n                //! 限制预览行数\n                const previewData = jsonData.slice(0, 100)\n\n                resolve({\n                    data: jsonData,\n                    totalRows: jsonData.length,\n                    totalColumns: jsonData[0] ? jsonData[0].length : 0,\n                    headers: jsonData[0] || [],\n                    previewData: previewData // 单独返回预览行数\n                })\n            } catch (error) {\n                console.error('文件解析失败:', error)\n                reject(new Error('文件解析失败：' + error.message))\n            }\n        }\n\n        reader.onerror = () => reject(new Error('文件读取失败'))\n\n        if (file.name.toLowerCase().endsWith('.csv')) {\n            reader.readAsText(file, 'UTF-8')\n        } else {\n            reader.readAsArrayBuffer(file)\n        }\n    })\n}\n\n/**\n * 上传文件（本地缓存模式，无后端）\n * @param {File} file - 要上传的文件对象\n * @param {Function} onProgress - 进度回调函数\n * @returns {Promise} 上传结果\n */\nexport async function uploadFile(file, onProgress) {\n    try {\n        const parsedContent = await parseFileContent(file)\n        const fileInfo = {\n            id: Date.now() + Math.random().toString(36).substr(2, 9),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            rows: parsedContent.totalRows,\n            columns: parsedContent.totalColumns,\n            headers: parsedContent.headers,\n            createdAt: new Date().toISOString(),\n            status: 'local',\n            data: parsedContent.data, // 完整数据\n            previewData: parsedContent.previewData, // 预览数据\n            file: file // 保存原始文件对象\n        }\n        saveToCache(fileInfo)\n        return fileInfo\n    } catch (error) {\n        console.error('文件处理失败:', error)\n        throw new Error('文件处理失败：' + error.message)\n    }\n}\n\n/**\n * 获取文件预览数据（本地缓存模式）\n * @param {string} fileId - 文件ID\n * @returns {Promise} 文件预览数据\n */\nexport async function getFilePreview(fileId) {\n    const cachedFiles = getCachedFiles()\n    const cachedFile = cachedFiles.find(file => file.id === fileId)\n    if (cachedFile && cachedFile.previewData) {\n        return {\n            data: cachedFile.previewData,\n            totalRows: cachedFile.rows,\n            totalColumns: cachedFile.columns,\n            headers: cachedFile.headers\n        }\n    }\n    throw new Error('文件预览不可用')\n}\n\n\n\n/**\n * 获取所有文件列表（本地缓存模式）\n * @returns {Promise<Array>} 文件列表\n */\nexport async function getAllFiles() {\n    return getCachedFiles()\n}\n\n/**\n * 删除文件（本地缓存模式）\n * @param {string} fileId - 要删除的文件ID\n */\nexport async function deleteFile(fileId) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n    if (!fileInfo) {\n        throw new Error('文件不存在')\n    }\n    removeFromCache(fileId)\n    return { success: true }\n}\n\n/**\n * 重命名文件（本地缓存模式）\n * @param {string} fileId - 文件ID\n * @param {string} newName - 新文件名\n */\nexport async function renameFile(fileId, newName) {\n    const cachedFiles = getCachedFiles()\n    const fileInfo = cachedFiles.find(file => file.id === fileId)\n    if (!fileInfo) {\n        throw new Error('File not')\n    }\n    fileInfo.name = newName\n    const updatedFiles = cachedFiles.map(file =>\n        file.id === fileId ? fileInfo : file\n    )\n    localStorage.setItem(CACHE_KEY, JSON.stringify(updatedFiles))\n    return { success: true, file: fileInfo }\n}\n\n/**\n * 计算文件MD5哈希值\n * @param {File} file - 文件对象\n * @returns {Promise<string>} MD5哈希值\n */\nasync function calculateMD5(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = () => {\n            const buffer = reader.result\n            const hash = crypto.subtle.digest('MD5', buffer)\n            hash.then(hashArray => {\n                const hashHex = Array.from(new Uint8Array(hashArray))\n                    .map(b => b.toString(16).padStart(2, '0'))\n                    .join('')\n                resolve(hashHex)\n            }).catch(reject)\n        }\n        reader.onerror = reject\n        reader.readAsArrayBuffer(file)\n    })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}