{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* eslint-disable */\n\n/**\n * 数据映射管理器\n * 处理多文件数据组合和映射\n */\nexport class DataMappingManager {\n  constructor() {\n    this.mappings = {\n      xAxis: null,\n      yAxis: null,\n      series: null,\n      size: null,\n      color: null\n    };\n    this.filters = {\n      type: 'all',\n      // all, range, condition\n      range: {\n        start: 0,\n        end: -1\n      },\n      conditions: []\n    };\n    this.previewData = [];\n  }\n\n  // 设置映射\n  setMapping(type, dragData) {\n    this.mappings[type] = dragData;\n    this.updatePreviewData();\n  }\n\n  // 移除映射\n  removeMapping(type) {\n    this.mappings[type] = null;\n    this.updatePreviewData();\n  }\n\n  // 获取映射\n  getMapping(type) {\n    return this.mappings[type];\n  }\n\n  // 获取所有映射\n  getAllMappings() {\n    return {\n      ...this.mappings\n    };\n  }\n\n  // 设置过滤器\n  setFilter(filterConfig) {\n    this.filters = {\n      ...this.filters,\n      ...filterConfig\n    };\n    this.updatePreviewData();\n  }\n\n  // 获取过滤器\n  getFilter() {\n    return {\n      ...this.filters\n    };\n  }\n\n  // 更新预览数据\n  async updatePreviewData() {\n    try {\n      const data = await this.generateCombinedData();\n      this.previewData = data;\n      return data;\n    } catch (error) {\n      console.error('Failed to update preview data:', error);\n      this.previewData = [];\n      return [];\n    }\n  }\n\n  // 生成组合数据\n  async generateCombinedData() {\n    const activeMappings = Object.entries(this.mappings).filter(([_, mapping]) => mapping !== null);\n    if (activeMappings.length === 0) {\n      return [];\n    }\n\n    // 获取所有相关文件的数据\n    const fileDataMap = new Map();\n    for (const [_, mapping] of activeMappings) {\n      if (!fileDataMap.has(mapping.fileId)) {\n        const fileData = await this.loadFileData(mapping.fileId);\n        fileDataMap.set(mapping.fileId, fileData);\n      }\n    }\n\n    // 生成组合数据集\n    return this.combineDataSources(fileDataMap, activeMappings);\n  }\n\n  // 加载文件数据\n  async loadFileData(fileId) {\n    try {\n      // 从缓存的文件中获取数据\n      const cachedFiles = JSON.parse(localStorage.getItem('fuck_charts_files') || '[]');\n      const file = cachedFiles.find(f => f.id === fileId);\n      if (file && file.data) {\n        return file.data;\n      }\n\n      // 如果缓存中没有，返回模拟数据\n      return [{\n        id: 1,\n        name: 'A',\n        value: 100,\n        category: 'Type1'\n      }, {\n        id: 2,\n        name: 'B',\n        value: 200,\n        category: 'Type2'\n      }, {\n        id: 3,\n        name: 'C',\n        value: 150,\n        category: 'Type1'\n      }, {\n        id: 4,\n        name: 'D',\n        value: 300,\n        category: 'Type2'\n      }];\n    } catch (error) {\n      console.error('Error loading file data:', error);\n      return [];\n    }\n  }\n\n  // 组合数据源\n  combineDataSources(fileDataMap, activeMappings) {\n    // 找到主数据源（通常是第一个映射的文件）\n    const primaryFileId = activeMappings[0][1].fileId;\n    const primaryData = fileDataMap.get(primaryFileId);\n    if (!primaryData || primaryData.length === 0) {\n      return [];\n    }\n\n    // 基于主数据源构建结果\n    let combinedData = primaryData.map(row => {\n      const newRow = {};\n\n      // 为每个映射添加对应的数据\n      activeMappings.forEach(([mappingType, mapping]) => {\n        if (mapping.fileId === primaryFileId) {\n          // 同一文件的数据直接使用\n          newRow[mappingType] = row[mapping.columnName];\n        } else {\n          // 不同文件的数据需要关联（这里简化处理）\n          const otherFileData = fileDataMap.get(mapping.fileId);\n          if (otherFileData && otherFileData.length > 0) {\n            // 简单映射：按索引关联\n            const index = primaryData.indexOf(row);\n            const otherRow = otherFileData[index % otherFileData.length];\n            newRow[mappingType] = otherRow ? otherRow[mapping.columnName] : null;\n          }\n        }\n      });\n      return newRow;\n    });\n\n    // 应用过滤器\n    combinedData = this.applyFilters(combinedData);\n    return combinedData;\n  }\n\n  // 应用过滤器\n  applyFilters(data) {\n    let filteredData = [...data];\n    switch (this.filters.type) {\n      case 'range':\n        const {\n          start,\n          end\n        } = this.filters.range;\n        const endIndex = end === -1 ? data.length : Math.min(end, data.length);\n        filteredData = data.slice(start, endIndex);\n        break;\n      case 'condition':\n        filteredData = data.filter(row => {\n          return this.filters.conditions.every(condition => {\n            return this.evaluateCondition(row, condition);\n          });\n        });\n        break;\n      default:\n        // 'all' - 不过滤\n        break;\n    }\n    return filteredData;\n  }\n\n  // 评估过滤条件\n  evaluateCondition(row, condition) {\n    const {\n      field,\n      operator,\n      value\n    } = condition;\n    const fieldValue = row[field];\n    switch (operator) {\n      case 'equals':\n        return fieldValue === value;\n      case 'not_equals':\n        return fieldValue !== value;\n      case 'greater_than':\n        return Number(fieldValue) > Number(value);\n      case 'less_than':\n        return Number(fieldValue) < Number(value);\n      case 'contains':\n        return String(fieldValue).includes(String(value));\n      case 'not_contains':\n        return !String(fieldValue).includes(String(value));\n      default:\n        return true;\n    }\n  }\n\n  // 生成ECharts配置\n  generateChartOption(chartType) {\n    const data = this.previewData;\n    if (!data || data.length === 0) {\n      return null;\n    }\n    const baseOption = {\n      animation: true,\n      animationDuration: 1000,\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross'\n        }\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      }\n    };\n    switch (chartType) {\n      case 'bar':\n        return this.generateBarOption(data, baseOption);\n      case 'line':\n        return this.generateLineOption(data, baseOption);\n      case 'pie':\n        return this.generatePieOption(data, baseOption);\n      case 'scatter':\n        return this.generateScatterOption(data, baseOption);\n      default:\n        return baseOption;\n    }\n  }\n\n  // 生成柱状图配置\n  generateBarOption(data, baseOption) {\n    const xAxisData = data.map(row => row.xAxis || '');\n    const yAxisData = data.map(row => Number(row.yAxis) || 0);\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'category',\n        data: xAxisData\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'bar',\n        data: yAxisData,\n        itemStyle: {\n          color: '#5470c6'\n        }\n      }]\n    };\n  }\n\n  // 生成折线图配置\n  generateLineOption(data, baseOption) {\n    const xAxisData = data.map(row => row.xAxis || '');\n    const yAxisData = data.map(row => Number(row.yAxis) || 0);\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'category',\n        data: xAxisData\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'line',\n        data: yAxisData,\n        smooth: true,\n        lineStyle: {\n          color: '#5470c6'\n        }\n      }]\n    };\n  }\n\n  // 生成饼图配置\n  generatePieOption(data, baseOption) {\n    const pieData = data.map(row => ({\n      name: row.xAxis || '',\n      value: Number(row.yAxis) || 0\n    }));\n    return {\n      ...baseOption,\n      tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\n      },\n      series: [{\n        type: 'pie',\n        radius: '60%',\n        data: pieData,\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }]\n    };\n  }\n\n  // 生成散点图配置\n  generateScatterOption(data, baseOption) {\n    const scatterData = data.map(row => [Number(row.xAxis) || 0, Number(row.yAxis) || 0]);\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'value'\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'scatter',\n        data: scatterData,\n        symbolSize: 8,\n        itemStyle: {\n          color: '#5470c6'\n        }\n      }]\n    };\n  }\n\n  // 清空所有映射\n  clearAll() {\n    this.mappings = {\n      xAxis: null,\n      yAxis: null,\n      series: null,\n      size: null,\n      color: null\n    };\n    this.filters = {\n      type: 'all',\n      range: {\n        start: 0,\n        end: -1\n      },\n      conditions: []\n    };\n    this.previewData = [];\n  }\n\n  // 导出配置\n  exportConfig() {\n    return {\n      mappings: this.getAllMappings(),\n      filters: this.getFilter(),\n      timestamp: Date.now()\n    };\n  }\n\n  // 导入配置\n  importConfig(config) {\n    if (config.mappings) {\n      this.mappings = {\n        ...this.mappings,\n        ...config.mappings\n      };\n    }\n    if (config.filters) {\n      this.filters = {\n        ...this.filters,\n        ...config.filters\n      };\n    }\n    this.updatePreviewData();\n  }\n}\n\n// 全局数据映射管理器实例\nexport const globalDataMapper = new DataMappingManager();\n\n/**\n * 数据类型检测工具\n */\nexport function detectColumnType(values) {\n  if (!values || values.length === 0) {\n    return 'unknown';\n  }\n  const nonEmptyValues = values.filter(v => v !== null && v !== undefined && v !== '');\n  if (nonEmptyValues.length === 0) {\n    return 'unknown';\n  }\n\n  // 检测数字类型\n  const numericValues = nonEmptyValues.filter(v => !isNaN(Number(v)));\n  if (numericValues.length === nonEmptyValues.length) {\n    return 'number';\n  }\n\n  // 检测日期类型\n  const dateValues = nonEmptyValues.filter(v => !isNaN(Date.parse(v)));\n  if (dateValues.length === nonEmptyValues.length) {\n    return 'date';\n  }\n\n  // 默认字符串类型\n  return 'string';\n}\n\n/**\n * 生成列的样本数据\n */\nexport function generateSampleData(values, count = 5) {\n  if (!values || values.length === 0) {\n    return [];\n  }\n  const samples = [];\n  const step = Math.max(1, Math.floor(values.length / count));\n  for (let i = 0; i < values.length && samples.length < count; i += step) {\n    samples.push(values[i]);\n  }\n  return samples;\n}","map":{"version":3,"names":["DataMappingManager","constructor","mappings","xAxis","yAxis","series","size","color","filters","type","range","start","end","conditions","previewData","setMapping","dragData","updatePreviewData","removeMapping","getMapping","getAllMappings","setFilter","filterConfig","getFilter","data","generateCombinedData","error","console","activeMappings","Object","entries","filter","_","mapping","length","fileDataMap","Map","has","fileId","fileData","loadFileData","set","combineDataSources","cachedFiles","JSON","parse","localStorage","getItem","file","find","f","id","name","value","category","primaryFileId","primaryData","get","combinedData","map","row","newRow","forEach","mappingType","columnName","otherFileData","index","indexOf","otherRow","applyFilters","filteredData","endIndex","Math","min","slice","every","condition","evaluateCondition","field","operator","fieldValue","Number","String","includes","generateChartOption","chartType","baseOption","animation","animationDuration","tooltip","trigger","axisPointer","grid","left","right","bottom","containLabel","generateBarOption","generateLineOption","generatePieOption","generateScatterOption","xAxisData","yAxisData","itemStyle","smooth","lineStyle","pieData","formatter","radius","emphasis","shadowBlur","shadowOffsetX","shadowColor","scatterData","symbolSize","clearAll","exportConfig","timestamp","Date","now","importConfig","config","globalDataMapper","detectColumnType","values","nonEmptyValues","v","undefined","numericValues","isNaN","dateValues","generateSampleData","count","samples","step","max","floor","i","push"],"sources":["D:/Learning Material/Git/Fuck-Charts/newArchitecture/frontend_vue_design/src/utils/dataMappingUtils.js"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 数据映射管理器\n * 处理多文件数据组合和映射\n */\nexport class DataMappingManager {\n  constructor() {\n    this.mappings = {\n      xAxis: null,\n      yAxis: null,\n      series: null,\n      size: null,\n      color: null\n    }\n    this.filters = {\n      type: 'all', // all, range, condition\n      range: { start: 0, end: -1 },\n      conditions: []\n    }\n    this.previewData = []\n  }\n\n  // 设置映射\n  setMapping(type, dragData) {\n    this.mappings[type] = dragData\n    this.updatePreviewData()\n  }\n\n  // 移除映射\n  removeMapping(type) {\n    this.mappings[type] = null\n    this.updatePreviewData()\n  }\n\n  // 获取映射\n  getMapping(type) {\n    return this.mappings[type]\n  }\n\n  // 获取所有映射\n  getAllMappings() {\n    return { ...this.mappings }\n  }\n\n  // 设置过滤器\n  setFilter(filterConfig) {\n    this.filters = { ...this.filters, ...filterConfig }\n    this.updatePreviewData()\n  }\n\n  // 获取过滤器\n  getFilter() {\n    return { ...this.filters }\n  }\n\n  // 更新预览数据\n  async updatePreviewData() {\n    try {\n      const data = await this.generateCombinedData()\n      this.previewData = data\n      return data\n    } catch (error) {\n      console.error('Failed to update preview data:', error)\n      this.previewData = []\n      return []\n    }\n  }\n\n  // 生成组合数据\n  async generateCombinedData() {\n    const activeMappings = Object.entries(this.mappings)\n      .filter(([_, mapping]) => mapping !== null)\n    \n    if (activeMappings.length === 0) {\n      return []\n    }\n\n    // 获取所有相关文件的数据\n    const fileDataMap = new Map()\n    \n    for (const [_, mapping] of activeMappings) {\n      if (!fileDataMap.has(mapping.fileId)) {\n        const fileData = await this.loadFileData(mapping.fileId)\n        fileDataMap.set(mapping.fileId, fileData)\n      }\n    }\n\n    // 生成组合数据集\n    return this.combineDataSources(fileDataMap, activeMappings)\n  }\n\n  // 加载文件数据\n  async loadFileData(fileId) {\n    try {\n      // 从缓存的文件中获取数据\n      const cachedFiles = JSON.parse(localStorage.getItem('fuck_charts_files') || '[]')\n      const file = cachedFiles.find(f => f.id === fileId)\n      \n      if (file && file.data) {\n        return file.data\n      }\n      \n      // 如果缓存中没有，返回模拟数据\n      return [\n        { id: 1, name: 'A', value: 100, category: 'Type1' },\n        { id: 2, name: 'B', value: 200, category: 'Type2' },\n        { id: 3, name: 'C', value: 150, category: 'Type1' },\n        { id: 4, name: 'D', value: 300, category: 'Type2' }\n      ]\n    } catch (error) {\n      console.error('Error loading file data:', error)\n      return []\n    }\n  }\n\n  // 组合数据源\n  combineDataSources(fileDataMap, activeMappings) {\n    // 找到主数据源（通常是第一个映射的文件）\n    const primaryFileId = activeMappings[0][1].fileId\n    const primaryData = fileDataMap.get(primaryFileId)\n\n    if (!primaryData || primaryData.length === 0) {\n      return []\n    }\n\n    // 基于主数据源构建结果\n    let combinedData = primaryData.map(row => {\n      const newRow = {}\n      \n      // 为每个映射添加对应的数据\n      activeMappings.forEach(([mappingType, mapping]) => {\n        if (mapping.fileId === primaryFileId) {\n          // 同一文件的数据直接使用\n          newRow[mappingType] = row[mapping.columnName]\n        } else {\n          // 不同文件的数据需要关联（这里简化处理）\n          const otherFileData = fileDataMap.get(mapping.fileId)\n          if (otherFileData && otherFileData.length > 0) {\n            // 简单映射：按索引关联\n            const index = primaryData.indexOf(row)\n            const otherRow = otherFileData[index % otherFileData.length]\n            newRow[mappingType] = otherRow ? otherRow[mapping.columnName] : null\n          }\n        }\n      })\n\n      return newRow\n    })\n\n    // 应用过滤器\n    combinedData = this.applyFilters(combinedData)\n\n    return combinedData\n  }\n\n  // 应用过滤器\n  applyFilters(data) {\n    let filteredData = [...data]\n\n    switch (this.filters.type) {\n      case 'range':\n        const { start, end } = this.filters.range\n        const endIndex = end === -1 ? data.length : Math.min(end, data.length)\n        filteredData = data.slice(start, endIndex)\n        break\n      \n      case 'condition':\n        filteredData = data.filter(row => {\n          return this.filters.conditions.every(condition => {\n            return this.evaluateCondition(row, condition)\n          })\n        })\n        break\n      \n      default:\n        // 'all' - 不过滤\n        break\n    }\n\n    return filteredData\n  }\n\n  // 评估过滤条件\n  evaluateCondition(row, condition) {\n    const { field, operator, value } = condition\n    const fieldValue = row[field]\n\n    switch (operator) {\n      case 'equals':\n        return fieldValue === value\n      case 'not_equals':\n        return fieldValue !== value\n      case 'greater_than':\n        return Number(fieldValue) > Number(value)\n      case 'less_than':\n        return Number(fieldValue) < Number(value)\n      case 'contains':\n        return String(fieldValue).includes(String(value))\n      case 'not_contains':\n        return !String(fieldValue).includes(String(value))\n      default:\n        return true\n    }\n  }\n\n  // 生成ECharts配置\n  generateChartOption(chartType) {\n    const data = this.previewData\n    if (!data || data.length === 0) {\n      return null\n    }\n\n    const baseOption = {\n      animation: true,\n      animationDuration: 1000,\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross'\n        }\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      }\n    }\n\n    switch (chartType) {\n      case 'bar':\n        return this.generateBarOption(data, baseOption)\n      case 'line':\n        return this.generateLineOption(data, baseOption)\n      case 'pie':\n        return this.generatePieOption(data, baseOption)\n      case 'scatter':\n        return this.generateScatterOption(data, baseOption)\n      default:\n        return baseOption\n    }\n  }\n\n  // 生成柱状图配置\n  generateBarOption(data, baseOption) {\n    const xAxisData = data.map(row => row.xAxis || '')\n    const yAxisData = data.map(row => Number(row.yAxis) || 0)\n\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'category',\n        data: xAxisData\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'bar',\n        data: yAxisData,\n        itemStyle: {\n          color: '#5470c6'\n        }\n      }]\n    }\n  }\n\n  // 生成折线图配置\n  generateLineOption(data, baseOption) {\n    const xAxisData = data.map(row => row.xAxis || '')\n    const yAxisData = data.map(row => Number(row.yAxis) || 0)\n\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'category',\n        data: xAxisData\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'line',\n        data: yAxisData,\n        smooth: true,\n        lineStyle: {\n          color: '#5470c6'\n        }\n      }]\n    }\n  }\n\n  // 生成饼图配置\n  generatePieOption(data, baseOption) {\n    const pieData = data.map(row => ({\n      name: row.xAxis || '',\n      value: Number(row.yAxis) || 0\n    }))\n\n    return {\n      ...baseOption,\n      tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\n      },\n      series: [{\n        type: 'pie',\n        radius: '60%',\n        data: pieData,\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)'\n          }\n        }\n      }]\n    }\n  }\n\n  // 生成散点图配置\n  generateScatterOption(data, baseOption) {\n    const scatterData = data.map(row => [\n      Number(row.xAxis) || 0,\n      Number(row.yAxis) || 0\n    ])\n\n    return {\n      ...baseOption,\n      xAxis: {\n        type: 'value'\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        type: 'scatter',\n        data: scatterData,\n        symbolSize: 8,\n        itemStyle: {\n          color: '#5470c6'\n        }\n      }]\n    }\n  }\n\n  // 清空所有映射\n  clearAll() {\n    this.mappings = {\n      xAxis: null,\n      yAxis: null,\n      series: null,\n      size: null,\n      color: null\n    }\n    this.filters = {\n      type: 'all',\n      range: { start: 0, end: -1 },\n      conditions: []\n    }\n    this.previewData = []\n  }\n\n  // 导出配置\n  exportConfig() {\n    return {\n      mappings: this.getAllMappings(),\n      filters: this.getFilter(),\n      timestamp: Date.now()\n    }\n  }\n\n  // 导入配置\n  importConfig(config) {\n    if (config.mappings) {\n      this.mappings = { ...this.mappings, ...config.mappings }\n    }\n    if (config.filters) {\n      this.filters = { ...this.filters, ...config.filters }\n    }\n    this.updatePreviewData()\n  }\n}\n\n// 全局数据映射管理器实例\nexport const globalDataMapper = new DataMappingManager()\n\n/**\n * 数据类型检测工具\n */\nexport function detectColumnType(values) {\n  if (!values || values.length === 0) {\n    return 'unknown'\n  }\n\n  const nonEmptyValues = values.filter(v => v !== null && v !== undefined && v !== '')\n  if (nonEmptyValues.length === 0) {\n    return 'unknown'\n  }\n\n  // 检测数字类型\n  const numericValues = nonEmptyValues.filter(v => !isNaN(Number(v)))\n  if (numericValues.length === nonEmptyValues.length) {\n    return 'number'\n  }\n\n  // 检测日期类型\n  const dateValues = nonEmptyValues.filter(v => !isNaN(Date.parse(v)))\n  if (dateValues.length === nonEmptyValues.length) {\n    return 'date'\n  }\n\n  // 默认字符串类型\n  return 'string'\n}\n\n/**\n * 生成列的样本数据\n */\nexport function generateSampleData(values, count = 5) {\n  if (!values || values.length === 0) {\n    return []\n  }\n\n  const samples = []\n  const step = Math.max(1, Math.floor(values.length / count))\n  \n  for (let i = 0; i < values.length && samples.length < count; i += step) {\n    samples.push(values[i])\n  }\n\n  return samples\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}