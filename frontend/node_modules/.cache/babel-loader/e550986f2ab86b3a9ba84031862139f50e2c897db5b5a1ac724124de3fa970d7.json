{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\n\n// 引入主题视觉编码分发器\nimport { getVisualMapInRangeColor } from \"../utils/themeDispatcher\";\n\n// 矩形树图图生成器\nexport default function treemapOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n  // 获取视觉编码色\n  let visualColors = getVisualMapInRangeColor(config.colorScheme);\n  // 递归获取所有节点 value\n  function getValueRange(data) {\n    let values = [];\n    function traverse(nodes) {\n      if (!nodes) return;\n      for (let i = 0; i < nodes.length; i++) {\n        if (typeof nodes[i].value === 'number') {\n          values.push(nodes[i].value);\n        }\n        if (nodes[i].children && nodes[i].children.length > 0) {\n          traverse(nodes[i].children);\n        }\n      }\n    }\n    traverse(data);\n    return {\n      min: values.length ? Math.min(...values) : 1,\n      max: values.length ? Math.max(...values) : 100\n    };\n  }\n  let visualMap = {};\n  const valueRange = getValueRange(seriesData);\n  if (config.legendVisible === true) {\n    visualMap = config.visualMap || {\n      show: true,\n      type: 'continuous',\n      inRange: {\n        color: visualColors\n      },\n      min: valueRange.min,\n      max: valueRange.max,\n      dimension: 'value',\n      orient,\n      left: 'center',\n      top: config.legendPosition || 'bottom'\n    };\n  } else {\n    visualMap = {\n      show: false,\n      type: 'continuous',\n      min: valueRange.min,\n      max: valueRange.max,\n      dimension: 'value',\n      orient,\n      left: 'center',\n      top: config.legendPosition || 'bottom'\n    };\n  }\n  let orient = 'horizontal';\n  if (config.position === 'left' || config.position === 'right') {\n    orient = 'vertical';\n  } else {\n    orient = 'horizontal';\n  }\n  return {\n    title: {\n      text: config.title || 'Chart of Treemap',\n      subtext: config.subtext || '',\n      left: 'center',\n      top: 'top',\n      textStyle: {\n        fontSize: 16,\n        fontWeight: 'bold'\n      },\n      subtextStyle: {\n        fontSize: 12\n      }\n    },\n    toolbox: {\n      show: true,\n      feature: {\n        dataView: {\n          show: true,\n          readOnly: false\n        },\n        restore: {\n          show: true\n        },\n        saveAsImage: {\n          show: true\n        }\n      }\n    },\n    tooltip: {},\n    visualMap: visualMap,\n    series: [{\n      type: 'treemap',\n      data: seriesData,\n      layoutAlgorithm: 'squarify',\n      visibleMin: config.visibleMin || 300,\n      // 最小可见面积\n      leafDepth: config.leafDepth || 2,\n      // 叶子节点的深度\n      label: {\n        show: true,\n        formatter: '{b}'\n      }\n    }],\n    ...customOption\n  };\n}","map":{"version":3,"names":["getVisualMapInRangeColor","treemapOption","config","fileDataMap","xData","yDataArr","selectedChartType","seriesData","customOption","visualColors","colorScheme","getValueRange","data","values","traverse","nodes","i","length","value","push","children","min","Math","max","visualMap","valueRange","legendVisible","show","type","inRange","color","dimension","orient","left","top","legendPosition","position","title","text","subtext","textStyle","fontSize","fontWeight","subtextStyle","toolbox","feature","dataView","readOnly","restore","saveAsImage","tooltip","series","layoutAlgorithm","visibleMin","leafDepth","label","formatter"],"sources":["D:/Learning Material/Git/Fuck-Charts/frontend/src/assets/JS/chartOptions/treemap.js"],"sourcesContent":["/* eslint-disable */\n\n// 引入主题视觉编码分发器\nimport { getVisualMapInRangeColor } from \"../utils/themeDispatcher\"\n\n// 矩形树图图生成器\nexport default function treemapOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption = {}) {\n    // 获取视觉编码色\n    let visualColors = getVisualMapInRangeColor(config.colorScheme);\n    // 递归获取所有节点 value\n    function getValueRange(data) {\n        let values = [];\n        function traverse(nodes) {\n            if (!nodes) return;\n            for (let i = 0; i < nodes.length; i++) {\n                if (typeof nodes[i].value === 'number') {\n                    values.push(nodes[i].value);\n                }\n                if (nodes[i].children && nodes[i].children.length > 0) {\n                    traverse(nodes[i].children);\n                }\n            }\n        }\n        traverse(data);\n        return {\n            min: values.length ? Math.min(...values) : 1,\n            max: values.length ? Math.max(...values) : 100\n        };\n    }\n\n    let visualMap = {};\n    const valueRange = getValueRange(seriesData);\n    if (config.legendVisible === true) {\n        visualMap = config.visualMap || {\n            show: true,\n            type: 'continuous',\n            inRange: {\n                color: visualColors\n            },\n            min: valueRange.min,\n            max: valueRange.max,\n            dimension: 'value',\n            orient,\n            left: 'center',\n            top: config.legendPosition || 'bottom',\n        };\n    }\n    else {\n        visualMap = {\n            show: false,\n            type: 'continuous',\n            min: valueRange.min,\n            max: valueRange.max,\n            dimension: 'value',\n            orient,\n            left: 'center',\n            top: config.legendPosition || 'bottom',\n        };\n    }\n\n    let orient = 'horizontal';\n\n    if (config.position === 'left' || config.position === 'right') {\n        orient = 'vertical';\n    }\n    else {\n        orient = 'horizontal';\n    }\n\n    return {\n        title: {\n            text: config.title || 'Chart of Treemap',\n            subtext: config.subtext || '',\n            left: 'center',\n            top: 'top',\n            textStyle: {\n                fontSize: 16,\n                fontWeight: 'bold',\n            },\n            subtextStyle: {\n                fontSize: 12,\n            },\n        },\n        toolbox: {\n            show: true,\n            feature: {\n                dataView: { show: true, readOnly: false },\n                restore: { show: true },\n                saveAsImage: { show: true },\n            }\n        },\n        tooltip: {},\n        visualMap: visualMap,\n        series: [\n            {\n                type: 'treemap',\n                data: seriesData,\n                layoutAlgorithm: 'squarify',\n                visibleMin: config.visibleMin || 300, // 最小可见面积\n                leafDepth: config.leafDepth || 2, // 叶子节点的深度\n                label: {\n                    show: true,\n                    formatter: '{b}',\n                },\n            },\n        ],\n        ...customOption,\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}