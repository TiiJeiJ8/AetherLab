{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"disabled\"];\nconst _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"dual-action-btn\", {\n      'active': $setup.isActive,\n      'auto': $setup.autoMode\n    }])\n  }, [_createElementVNode(\"button\", {\n    class: _normalizeClass([\"action-btn left-btn\", {\n      selected: $setup.autoMode\n    }]),\n    onClick: _cache[0] || (_cache[0] = $event => $setup.setAutoMode(true)),\n    disabled: $setup.autoMode\n  }, _cache[2] || (_cache[2] = [_createElementVNode(\"span\", {\n    class: \"btn-label\"\n  }, \"Auto Render\", -1 /* HOISTED */)]), 10 /* CLASS, PROPS */, _hoisted_1), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"action-btn right-btn\", {\n      selected: !$setup.autoMode\n    }]),\n    onClick: _cache[1] || (_cache[1] = $event => $setup.setAutoMode(false)),\n    disabled: !$setup.autoMode\n  }, _cache[3] || (_cache[3] = [_createElementVNode(\"span\", {\n    class: \"btn-label\"\n  }, \"Apply Config\", -1 /* HOISTED */)]), 10 /* CLASS, PROPS */, _hoisted_2), _createVNode(_Transition, {\n    name: \"slide-indicator\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", {\n      class: \"slide-indicator\",\n      style: _normalizeStyle($setup.indicatorStyle)\n    }, null, 4 /* STYLE */)]),\n    _: 1 /* STABLE */\n  })], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$setup","isActive","autoMode","_createElementVNode","selected","onClick","_cache","$event","setAutoMode","disabled","_hoisted_1","_hoisted_2","_createVNode","_Transition","name","default","_withCtx","style","_normalizeStyle","indicatorStyle","_"],"sources":["D:\\Learning Material\\Git\\Fuck-Charts\\frontend\\src\\components\\Common\\DualActionButton.vue"],"sourcesContent":["<template>\n  <div class=\"dual-action-btn\" :class=\"{ 'active': isActive, 'auto': autoMode }\">\n    <button\n      class=\"action-btn left-btn\"\n      :class=\"{ selected: autoMode }\"\n      @click=\"setAutoMode(true)\"\n      :disabled=\"autoMode\"\n    >\n      <span class=\"btn-label\">Auto Render</span>\n    </button>\n    <button\n      class=\"action-btn right-btn\"\n      :class=\"{ selected: !autoMode }\"\n      @click=\"setAutoMode(false)\"\n      :disabled=\"!autoMode\"\n    >\n      <span class=\"btn-label\">Apply Config</span>\n    </button>\n    <transition name=\"slide-indicator\">\n      <div class=\"slide-indicator\" :style=\"indicatorStyle\" />\n    </transition>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, computed } from 'vue'\nconst props = defineProps({\n  modelValue: Boolean, // true: auto, false: manual\n  keepActive: { type: Boolean, default: false }\n})\nconst emit = defineEmits(['update:modelValue', 'auto', 'apply'])\n\nconst autoMode = computed({\n  get: () => props.modelValue,\n  set: v => emit('update:modelValue', v)\n})\nconst isActive = ref(false)\n\nfunction setAutoMode(val) {\n  autoMode.value = val\n  isActive.value = true\n  if (val) emit('auto')\n  else emit('apply')\n  if (!props.keepActive) {\n    setTimeout(() => { isActive.value = false }, 400)\n  }\n}\n\nconst indicatorStyle = computed(() => ({\n  left: autoMode.value ? '0%' : '50%',\n  width: '50%'\n}))\n</script>\n\n<style scoped>\n.dual-action-btn {\n  display: flex;\n  position: relative;\n  width: 220px;\n  height: 40px;\n  background: var(--bg-color, #f5f6fa);\n  border-radius: 8px;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.07);\n  overflow: hidden;\n  transition: box-shadow 0.2s;\n}\n.dual-action-btn.active {\n  box-shadow: 0 2px 8px rgba(80, 120, 255, 0.18);\n}\n.action-btn {\n  flex: 1;\n  border: none;\n  background: transparent;\n  font-size: 1em;\n  font-weight: 500;\n  color: #555;\n  cursor: pointer;\n  outline: none;\n  transition: color 0.2s, background 0.2s;\n  z-index: 2;\n  height: 100%;\n}\n.action-btn.selected {\n  color: #2563eb;\n  font-weight: 700;\n  background: rgba(37,99,235,0.08);\n}\n.slide-indicator {\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 50%;\n  background: linear-gradient(90deg, #2563eb 60%, #60a5fa 100%);\n  border-radius: 8px;\n  z-index: 1;\n  transition: left 0.32s cubic-bezier(.4,1.6,.6,1), background 0.2s;\n  opacity: 0.18;\n}\n.left-btn { border-radius: 8px 0 0 8px; }\n.right-btn { border-radius: 0 8px 8px 0; }\n.btn-label {\n  pointer-events: none;\n}\n</style>\n"],"mappings":";mBAAA;mBAAA;;uBACEA,mBAAA,CAoBM;IApBDC,KAAK,EADZC,eAAA,EACa,iBAAiB;MAAA,UAAqBC,MAAA,CAAAC,QAAQ;MAAA,QAAUD,MAAA,CAAAE;IAAQ;MACzEC,mBAAA,CAOS;IANPL,KAAK,EAHXC,eAAA,EAGY,qBAAqB;MAAAK,QAAA,EACPJ,MAAA,CAAAE;IAAQ;IAC3BG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEP,MAAA,CAAAQ,WAAW;IAClBC,QAAQ,EAAET,MAAA,CAAAE;gCAEXC,mBAAA,CAA0C;IAApCL,KAAK,EAAC;EAAW,GAAC,aAAW,oB,0BARzCY,UAAA,GAUIP,mBAAA,CAOS;IANPL,KAAK,EAXXC,eAAA,EAWY,sBAAsB;MAAAK,QAAA,GACPJ,MAAA,CAAAE;IAAQ;IAC5BG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEP,MAAA,CAAAQ,WAAW;IAClBC,QAAQ,GAAGT,MAAA,CAAAE;gCAEZC,mBAAA,CAA2C;IAArCL,KAAK,EAAC;EAAW,GAAC,cAAY,oB,0BAhB1Ca,UAAA,GAkBIC,YAAA,CAEaC,WAAA;IAFDC,IAAI,EAAC;EAAiB;IAlBtCC,OAAA,EAAAC,QAAA,CAmBM,MAAuD,CAAvDb,mBAAA,CAAuD;MAAlDL,KAAK,EAAC,iBAAiB;MAAEmB,KAAK,EAnBzCC,eAAA,CAmB2ClB,MAAA,CAAAmB,cAAc;;IAnBzDC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}