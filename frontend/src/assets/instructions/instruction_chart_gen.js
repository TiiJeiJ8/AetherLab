/* eslint-disable */
import { name } from 'echarts-extension-amap'
import { generateEChartOption } from '../JS/utils/echartOptionUtils'
import { chartTypeConfig } from '../JS/Config/ChartTypeConfig.js'

// 生成架构关系图 option
export async function generateArchitectureGraphOption() {
    const config = {
        title: 'AetherLab Architecture',
        subtext: 'Graph is generated by generateEChartOption',
        legendVisible: false,
        forcePreventOverlap: true,
        forceRepulsion: 200,
        minNodeSize: 10,
        maxNodeSize: 60,
        isSizedEdges: true,
        minEdgeWidth: 1,
        maxEdgeWidth: 4,
        curveness: 0.3,
        forceEdgeLength: 80,
        roam: false,
    }
    const fileDataMap = {}
    const xData = []
    const yDataArr = []
    const selectedChartType = { value: 'Graph' }
    const seriesData = {
        nodes: [
            { name: 'User Interface Layer', category: 'Frontend', value: 10 },
            { name: 'Vue 3 Frontend', category: 'Frontend', value: 20 },
            { name: 'Component System', category: 'Frontend', value: 15 },
            { name: 'State Management Vuex', category: 'Frontend', value: 12 },
            { name: 'Routing Vue Router', category: 'Frontend', value: 10 },
            { name: 'Chart Components', category: 'Components', value: 18 },
            { name: 'Data Processing Components', category: 'Components', value: 16 },
            { name: 'UI Component Library', category: 'Components', value: 14 },
            { name: 'ECharts Visualization', category: 'Visualization', value: 25 },
            { name: '15+ Chart Types', category: 'Visualization', value: 22 },
            { name: 'HTTP Client', category: 'Communication', value: 12 },
            { name: 'Flask Backend API', category: 'Backend', value: 30 },
            { name: 'Data Processing Service', category: 'Backend', value: 20 },
            { name: 'Mathematical Modeling Service', category: 'Backend', value: 18 },
            { name: 'File Management System', category: 'Backend', value: 16 }
        ],
        edges: [
            { source: 'User Interface Layer', target: 'Vue 3 Frontend', weight: 5 },
            { source: 'Vue 3 Frontend', target: 'Component System', weight: 4 },
            { source: 'Vue 3 Frontend', target: 'State Management Vuex', weight: 3 },
            { source: 'Vue 3 Frontend', target: 'Routing Vue Router', weight: 3 },
            { source: 'Component System', target: 'Chart Components', weight: 4 },
            { source: 'Component System', target: 'Data Processing Components', weight: 4 },
            { source: 'Component System', target: 'UI Component Library', weight: 3 },
            { source: 'Chart Components', target: 'ECharts Visualization', weight: 5 },
            { source: 'ECharts Visualization', target: '15+ Chart Types', weight: 4 },
            { source: 'Vue 3 Frontend', target: 'HTTP Client', weight: 3 },
            { source: 'HTTP Client', target: 'Flask Backend API', weight: 5 },
            { source: 'Flask Backend API', target: 'Data Processing Service', weight: 4 },
            { source: 'Flask Backend API', target: 'Mathematical Modeling Service', weight: 4 },
            { source: 'Flask Backend API', target: 'File Management System', weight: 3 }
        ]
    }
    const customOption = {
        force: {
            repulsion: 350,
            edgeLength: 120
        },
        symbolSize: 60,
        label: {
            show: true,
            fontWeight: 'bold',
            fontSize: 11
        },
        toolbox: {
            show: true,
            feature: {
                restore: { show: true, title: 'Restore' },
                dataView: { show: true, title: 'Data View' },
                saveAsImage: { show: true, title: 'Save as Image' },
            }
        }
    }
    return await generateEChartOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption)
}

// 生成图表Gallery option
export async function generateChartGalleryOption() {
    const config = {
        title: 'Chart Gallery',
        subtext: 'Graph is generated by generateEChartOption',
        legendVisible: false,
        forcePreventOverlap: true,
        forceRepulsion: 300,
        minNodeSize: 10,
        maxNodeSize: 90,
        curveness: 0.3,
        forceEdgeLength: 80,
        isSizedEdges: true,
        minEdgeWidth: 3,
        roam: false,
    }
    const fileDataMap = {}
    const xData = []
    const yDataArr = []
    const selectedChartType = { value: 'Graph' }
    const seriesData = {
        nodes: [
            // 顶级入口
            { name: 'Chart Gallery', category: 'Gallery', value: 100 },
            // 分类入口（比具体图表高，但低于总入口）
            { name: 'Basic Charts', category: 'Basic Charts', value: 80 },
            { name: 'Geospatial Charts', category: 'Geospatial Charts', value: 70 },
            { name: 'Financial Charts', category: 'Financial Charts', value: 60 },
            { name: 'Statistical Charts', category: 'Statistical Charts', value: 55 },
            { name: 'Advanced Charts', category: 'Advanced Charts', value: 65 },
            { name: 'Network Charts', category: 'Network Charts', value: 50 },
            { name: 'Hierarchical Charts', category: 'Hierarchical Charts', value: 50 },
            { name: 'Flow Charts', category: 'Flow Charts', value: 50 },
            { name: 'Indicator Charts', category: 'Indicator Charts', value: 50 },
            { name: 'Polar Coordinate System', category: 'Coordinate System', value: 45 },
            // 基础图表
            { name: 'Line', category: 'Basic Charts', value: 50 },
            { name: 'Area', category: 'Basic Charts', value: 35 },
            { name: 'Bar', category: 'Basic Charts', value: 50 },
            { name: 'Pie', category: 'Basic Charts', value: 50 },
            { name: 'Scatter', category: 'Basic Charts', value: 50 },
            { name: 'Radar', category: 'Basic Charts', value: 30 },
            // 地理空间类
            { name: 'Geo of Map', category: 'Geospatial Charts', value: 37 },
            { name: 'Geo of Heatmap', category: 'Geospatial Charts', value: 33 },
            { name: 'Geo of Scatter', category: 'Geospatial Charts', value: 34 },
            { name: 'Geo of Pie', category: 'Geospatial Charts', value: 32 },
            // 金融类
            { name: 'Candlestick', category: 'Financial Charts', value: 39 },
            // 统计分析类
            { name: 'Box Plot', category: 'Statistical Charts', value: 35 },
            { name: 'Heatmap', category: 'Statistical Charts', value: 36 },
            // 进阶/高级图表
            { name: 'Nightingale Rose', category: 'Advanced Charts', value: 30 },
            { name: 'Doughnut', category: 'Advanced Charts', value: 28 },
            { name: 'Parallel', category: 'Advanced Charts', value: 26 },
            { name: 'Ripple', category: 'Advanced Charts', value: 28 },
            { name: 'Graph', category: 'Network Charts', value: 34 },
            { name: 'Tree', category: 'Hierarchical Charts', value: 31 },
            { name: 'TreeMap', category: 'Hierarchical Charts', value: 29 },
            { name: 'Sunburst', category: 'Hierarchical Charts', value: 27 },
            { name: 'Sankey Diagram', category: 'Flow Charts', value: 25 },
            { name: 'Funnel', category: 'Flow Charts', value: 24 },
            { name: 'ThemeRiver', category: 'Flow Charts', value: 22 },
            { name: 'Gauge', category: 'Indicator Charts', value: 23 },
        ],
        edges: [
            { source: 'Chart Gallery', target: 'Basic Charts', weight: 10 },
            { source: 'Chart Gallery', target: 'Geospatial Charts', weight: 8 },
            { source: 'Chart Gallery', target: 'Financial Charts', weight: 6 },
            { source: 'Chart Gallery', target: 'Statistical Charts', weight: 7 },
            { source: 'Chart Gallery', target: 'Advanced Charts', weight: 7 },
            { source: 'Chart Gallery', target: 'Network Charts', weight: 5 },
            { source: 'Chart Gallery', target: 'Hierarchical Charts', weight: 5 },
            { source: 'Chart Gallery', target: 'Flow Charts', weight: 5 },
            { source: 'Chart Gallery', target: 'Indicator Charts', weight: 5 },
            // { source: 'Chart Gallery', target: 'Polar Coordinate Charts' },
            // 分类到具体图表
            { source: 'Basic Charts', target: 'Line', weight: 9 },
            { source: 'Basic Charts', target: 'Area', weight: 6 },
            { source: 'Basic Charts', target: 'Bar', weight: 9 },
            { source: 'Basic Charts', target: 'Pie', weight: 9 },
            { source: 'Basic Charts', target: 'Scatter', weight: 8 },
            { source: 'Basic Charts', target: 'Radar', weight: 5 },
            { source: 'Geospatial Charts', target: 'Geo of Map', weight: 7 },
            { source: 'Geospatial Charts', target: 'Geo of Heatmap', weight: 5 },
            { source: 'Geospatial Charts', target: 'Geo of Scatter', weight: 6 },
            { source: 'Geospatial Charts', target: 'Geo of Pie', weight: 4 },
            { source: 'Financial Charts', target: 'Candlestick', weight: 7 },
            { source: 'Statistical Charts', target: 'Box Plot', weight: 6 },
            { source: 'Statistical Charts', target: 'Heatmap', weight: 7 },
            { source: 'Advanced Charts', target: 'Parallel', weight: 5 },
            { source: 'Advanced Charts', target: 'Nightingale Rose', weight: 6 },
            { source: 'Advanced Charts', target: 'Doughnut', weight: 6 },
            { source: 'Advanced Charts', target: 'Ripple', weight: 5 },
            { source: 'Network Charts', target: 'Graph', weight: 6 },
            { source: 'Hierarchical Charts', target: 'Tree', weight: 6 },
            { source: 'Hierarchical Charts', target: 'TreeMap', weight: 5 },
            { source: 'Hierarchical Charts', target: 'Sunburst', weight: 5 },
            { source: 'Flow Charts', target: 'Sankey Diagram', weight: 5 },
            { source: 'Flow Charts', target: 'Funnel', weight: 4 },
            { source: 'Flow Charts', target: 'ThemeRiver', weight: 3 },
            { source: 'Indicator Charts', target: 'Gauge', weight: 4 },
            { source: 'Line', target: 'Polar Coordinate System', weight: 4 },
            { source: 'Area', target: 'Polar Coordinate System', weight: 3 },
            { source: 'Bar', target: 'Polar Coordinate System', weight: 4 },
            { source: 'Scatter', target: 'Polar Coordinate System', weight: 4 },
            { source: 'Pie', target: 'Nightingale Rose', weight: 5 },
            { source: 'Pie', target: 'Doughnut', weight: 5 },
            { source: 'Ripple', target: 'Geo of Scatter', weight: 3 },
            { source: 'Ripple', target: 'Scatter', weight: 3 },
            { source: 'Scatter', target: 'Geo of Scatter', weight: 4 },
            { source: 'Line', target: 'Area', weight: 4 },
            { source: 'Geo of Pie', target: 'Nightingale Rose', weight: 3 },
            { source: 'Geo of Pie', target: 'Doughnut', weight: 3 },
        ]
    }
    const customOption = {
        force: {
            edgeLength: 120
        },
        symbolSize: 60,
        label: {
            show: true,
            fontWeight: 'bold',
            fontSize: 11
        },
        toolbox: {
            show: true,
            feature: {
                restore: { show: true, title: 'Restore' },
                saveAsImage: { show: true, title: 'Save as Image' },
            }
        }
    }
    return await generateEChartOption(config, fileDataMap, xData, yDataArr, selectedChartType, seriesData, customOption)
}

// 生成图表配置项树状图 option
// filter: { seriesType: 'heatmap' } 等
export function generateConfigTreeOption(chartTitle, filter = {}) {
    function normalizeName(name) {
        if (!name) return ''
        return String(name).replace(/[\s_-]/g, '').toLowerCase()
    }

    // 支持分支类型自动继承主类型参数
    function getTypeConfigByTitle(chartTitle) {
        if (!chartTitle) return null
        if (chartTypeConfig[chartTitle]) return chartTypeConfig[chartTitle]
        const norm = normalizeName(chartTitle)
        for (const key of Object.keys(chartTypeConfig)) {
            if (normalizeName(key) === norm) return chartTypeConfig[key]
        }
        // Branch type auto-inherit base type
        // Area (inherits Line)
        if (norm === 'area') {
            const base = chartTypeConfig['Line']
            if (!base) return null
            const deepClone = (obj) => JSON.parse(JSON.stringify(obj))
            const cfg = deepClone(base)
            if (cfg.advanced) {
                cfg.advanced = cfg.advanced.map(item => {
                    if (item.key === 'isArea') {
                        return {
                            ...item,
                            label: '[Area Branch Only] ' + (item.label || item.key),
                            description: (item.description || '') + ' (This param is auto-activated for Area type)',
                            highlight: true
                        }
                    }
                    if (item.key && item.key.startsWith('area')) {
                        return {
                            ...item,
                            label: '[Area Branch Only] ' + (item.label || item.key),
                            highlight: true
                        }
                    }
                    return item
                })
            }
            cfg.__branchInfo = {
                branch: 'Area',
                base: 'Line',
                note: 'Area type config is auto-inherited from Line, with branch-specific params (e.g. isArea: true) highlighted.'
            }
            return cfg
        }
        // Ripple (inherits Scatter)
        if (norm === 'ripple') {
            const base = chartTypeConfig['Scatter']
            if (!base) return null
            const deepClone = (obj) => JSON.parse(JSON.stringify(obj))
            const cfg = deepClone(base)
            if (cfg.advanced) {
                cfg.advanced = cfg.advanced.map(item => {
                    if (item.key === 'rippleEffect') {
                        return {
                            ...item,
                            label: '[Ripple Branch Only] ' + (item.label || item.key),
                            description: (item.description || '') + ' (This param is auto-activated for Ripple type)',
                            highlight: true
                        }
                    }
                    return item
                })
            }
            cfg.__branchInfo = {
                branch: 'Ripple',
                base: 'Scatter',
                note: 'Ripple type config is auto-inherited from Scatter, with rippleEffect highlighted.'
            }
            return cfg
        }
        // Nightingale (inherits Pie)
        if (norm === 'nightingalerose' || norm === 'nightingale') {
            const base = chartTypeConfig['Pie']
            if (!base) return null
            const deepClone = (obj) => JSON.parse(JSON.stringify(obj))
            const cfg = deepClone(base)
            if (cfg.advanced) {
                cfg.advanced = cfg.advanced.map(item => {
                    if (item.key === 'roseType') {
                        return {
                            ...item,
                            label: '[Nightingale Branch Only] ' + (item.label || item.key),
                            description: (item.description || '') + ' (This param is auto-activated for Nightingale type)',
                            highlight: true
                        }
                    }
                    return item
                })
            }
            cfg.__branchInfo = {
                branch: 'Nightingale',
                base: 'Pie',
                note: 'Nightingale type config is auto-inherited from Pie, with roseType highlighted.'
            }
            return cfg
        }
        // Doughnut (inherits Pie)
        if (norm === 'doughnut') {
            const base = chartTypeConfig['Pie']
            if (!base) return null
            const deepClone = (obj) => JSON.parse(JSON.stringify(obj))
            const cfg = deepClone(base)
            if (cfg.advanced) {
                cfg.advanced = cfg.advanced.map(item => {
                    if (item.key === 'isHalfDonut') {
                        return {
                            ...item,
                            label: '[Doughnut Branch Only] ' + (item.label || item.key),
                            description: (item.description || '') + ' (This param is auto-activated for Doughnut type)',
                            highlight: true
                        }
                    }
                    return item
                })
            }
            cfg.__branchInfo = {
                branch: 'Doughnut',
                base: 'Pie',
                note: 'Doughnut type config is auto-inherited from Pie, with isHalfDonut highlighted.'
            }
            return cfg
        }
        // Geo_Map系列分支类型自动继承
        const geoBranchNorms = [
            'geoofmap', 'geomap', 'geoofheatmap', 'geoofscatter', 'geoofpie'
        ]
        if (geoBranchNorms.includes(norm)) {
            const base = chartTypeConfig['Geo_Map']
            if (!base) return null
            const deepClone = (obj) => JSON.parse(JSON.stringify(obj))
            const cfg = deepClone(base)
            // 可选：高亮分支特有参数（如seriesType）
            if (cfg.basic) {
                cfg.basic = cfg.basic.map(item => {
                    if (item.key === 'seriesType') {
                        return {
                            ...item,
                            label: '[Geo Branch Only] ' + (item.label || item.key),
                            description: (item.description || '') + ' (This param is auto-activated for Geo branch type)',
                            highlight: true
                        }
                    }
                    return item
                })
            }
            cfg.__branchInfo = {
                branch: chartTitle,
                base: 'Geo_Map',
                note: chartTitle + ' config is auto-inherited from Geo_Map.'
            }
            return cfg
        }
        // Other branch types can be extended here
        return null
    }

    function matchCondition(item, filter) {
        if (!item.condition) return true
        // 支持 condition: { seriesType: 'heatmap' } 或 { seriesType: ['map','heatmap'] }
        for (const key in item.condition) {
            const condVal = item.condition[key]
            const filterVal = filter[key]
            if (Array.isArray(condVal)) {
                if (!condVal.includes(filterVal)) return false
            } else {
                if (condVal !== filterVal) return false
            }
        }
        return true
    }
    function buildConfigTreeData(chartTitle, cfg, filter) {
        if (!cfg) {
            return { name: `${chartTitle} (No Config Found)`, children: [{ name: 'No items' }] }
        }
        const sections = ['mapping', 'basic', 'advanced']
        const toNode = (item) => {
            const node = {
                name: item.label || item.key,
                value: item.key,
                meta: {
                    type: item.type,
                    required: !!item.required,
                    multiple: !!item.multiple,
                    description: item.description || ''
                }
            }
            // 透传常见元信息
            const metaKeys = ['min', 'max', 'step', 'placeholder', 'options', 'default']
            metaKeys.forEach(k => {
                if (item[k] !== undefined) node.meta[k] = item[k]
            })
            if (item.highlight) {
                node.meta.highlight = true
            }
            return node
        }
        // Special label for branch type tree root node
        let rootName = chartTitle
        if (cfg.__branchInfo) {
            rootName = `${chartTitle}(Inherited from ${cfg.__branchInfo.base})`
        }
        // Geo_Map mapping区复用前端逻辑
        function getGeoMapMappingBySeriesType(baseMapping, seriesType) {
            if (seriesType === 'map' || seriesType === 'bar') {
                return [
                    baseMapping.find(f => f.key === 'nameField'),
                    baseMapping.find(f => f.key === 'value'),
                ].filter(Boolean)
            } else if (seriesType === 'heatmap') {
                return [
                    baseMapping.find(f => f.key === 'lngField'),
                    baseMapping.find(f => f.key === 'latField'),
                    baseMapping.find(f => f.key === 'value'),
                ].filter(Boolean)
            } else if (seriesType === 'scatter') {
                return [
                    baseMapping.find(f => f.key === 'lngField'),
                    baseMapping.find(f => f.key === 'latField'),
                    baseMapping.find(f => f.key === 'value'),
                    baseMapping.find(f => f.key === 'name'),
                ].filter(Boolean)
            } else if (seriesType === 'lines') {
                return [
                    baseMapping.find(f => f.key === 'fromLngField'),
                    baseMapping.find(f => f.key === 'fromLatField'),
                    baseMapping.find(f => f.key === 'toLngField'),
                    baseMapping.find(f => f.key === 'toLatField'),
                    baseMapping.find(f => f.key === 'fromName'),
                    baseMapping.find(f => f.key === 'toName'),
                    baseMapping.find(f => f.key === 'value'),
                ].filter(Boolean)
            } else if (seriesType === 'pie') {
                const valueField = baseMapping.find(f => f.key === 'value')
                return [
                    baseMapping.find(f => f.key === 'lngField'),
                    baseMapping.find(f => f.key === 'latField'),
                    baseMapping.find(f => f.key === 'nameField'),
                    valueField ? { ...valueField, multiple: false } : undefined,
                    baseMapping.find(f => f.key === 'categoryField'),
                ].filter(Boolean)
            }
            // 默认
            return baseMapping
        }
        return {
            name: rootName,
            children: sections.map(sec => {
                let arr = cfg[sec] || []
                // mapping区Geo_Map及分支类型用前端逻辑
                if (sec === 'mapping' && filter && filter.seriesType && (
                    rootName.toLowerCase().includes('geo_map') ||
                    rootName.toLowerCase().includes('geoofmap') ||
                    rootName.toLowerCase().includes('geoofheatmap') ||
                    rootName.toLowerCase().includes('geoofscatter') ||
                    rootName.toLowerCase().includes('geoofpie')
                )) {
                    arr = getGeoMapMappingBySeriesType(arr, filter.seriesType)
                } else if ((sec === 'mapping' || sec === 'basic' || sec === 'advanced') && filter && Object.keys(filter).length > 0) {
                    arr = arr.filter(item => matchCondition(item, filter))
                }
                return {
                    name: sec,
                    children: arr.length ? arr.map(toNode) : [{ name: 'No items' }]
                }
            })
        }
    }

    const cfg = getTypeConfigByTitle(chartTitle)
    const data = buildConfigTreeData(chartTitle, cfg, filter)
    return {
        tooltip: {
            trigger: 'item',
            formatter: (p) => {
                const d = p.data || {}
                if (!d.meta) return `<b>${d.name || ''}</b>`
                const lines = []
                // Highlight branch params
                let nameHtml = d.name
                if (d.meta && d.meta.highlight) {
                    nameHtml = `<span style=\"color:#f59e42;font-weight:bold;\">${d.name}</span>`
                }
                lines.push(`<div><b>${nameHtml}</b> <span style=\"color:#888;\">(config.${d.value})</span></div>`)
                const tags = []
                if (d.meta.type) tags.push(`<span style="color:#8b5cf6;border:1px solid #8b5cf6;border-radius:3px;padding:0 4px;margin-right:3px;font-size:11px;font-weight:600;">${d.meta.type}</span>`)
                // number型参数自动提示min/max
                if (d.meta.type === 'number') {
                    let rangeTip = ''
                    if (typeof d.meta.min === 'number' && typeof d.meta.max === 'number') {
                        rangeTip = `min: ${d.meta.min}, max: ${d.meta.max}`
                    } else if (typeof d.meta.min === 'number') {
                        rangeTip = `min: ${d.meta.min}`
                    } else if (typeof d.meta.max === 'number') {
                        rangeTip = `max: ${d.meta.max}`
                    }
                    if (rangeTip) tags.push(`<span style="color:#10b981;border:1px solid #10b981;border-radius:3px;padding:0 4px;margin-right:3px;font-size:11px;">${rangeTip}</span>`)
                }
                if (d.meta.required) tags.push(`<span style="color:#ef4444;border:1px solid #ef4444;border-radius:3px;padding:0 4px;margin-right:3px;font-size:11px;font-weight:600;">required</span>`)
                if (d.meta.multiple) tags.push(`<span style="color:#3b82f6;border:1px solid #3b82f6;border-radius:3px;padding:0 4px;margin-right:3px;font-size:11px;font-weight:600;">multiple</span>`)
                if (d.meta.highlight) tags.push(`<span style="color:#f59e42;border:1px solid #f59e42;border-radius:3px;padding:0 4px;margin-right:3px;font-size:11px;font-weight:600;">Branch Only</span>`)
                if (tags.length) lines.push(`<div>${tags.join(' ')}</div>`)
                if (d.meta.description) lines.push(`<div style=\"margin-top:4px;color:#888;\">${d.meta.description}</div>`)
                return lines.join('')
            }
        },
        series: [{
            type: 'tree',
            data: [data],
            top: '4%', left: '30%', bottom: '4%', right: '30%',
            orient: 'LR',
            symbol: 'circle',
            symbolSize: 13,
            expandAndCollapse: true,
            initialTreeDepth: 2,
            label: {
                position: 'left',
                verticalAlign: 'middle',
                align: 'right',
                fontSize: 13,
                fontWeight: 'bold',
                color: '#868181ff',
                textBorderWidth: 1.2,
            },
            leaves: {
                label: {
                    position: 'right',
                    align: 'left'
                }
            },
            animationDuration: 200,
            animationDurationUpdate: 300
        }]
    }
}